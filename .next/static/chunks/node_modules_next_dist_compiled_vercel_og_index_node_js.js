/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_next_dist_compiled_vercel_og_index_node_js"],{

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/native-url/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/native-url/index.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={452:function(e){\"use strict\";e.exports=__webpack_require__(/*! next/dist/compiled/querystring-es3 */ \"./node_modules/next/dist/compiled/querystring-es3/index.js\")}};var t={};function __nccwpck_require__(o){var a=t[o];if(a!==undefined){return a.exports}var s=t[o]={exports:{}};var n=true;try{e[o](s,s.exports,__nccwpck_require__);n=false}finally{if(n)delete t[o]}return s.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var o={};!function(){var e=o;var t,a=(t=__nccwpck_require__(452))&&\"object\"==typeof t&&\"default\"in t?t.default:t,s=/https?|ftp|gopher|file/;function r(e){\"string\"==typeof e&&(e=d(e));var t=function(e,t,o){var a=e.auth,s=e.hostname,n=e.protocol||\"\",p=e.pathname||\"\",c=e.hash||\"\",i=e.query||\"\",u=!1;a=a?encodeURIComponent(a).replace(/%3A/i,\":\")+\"@\":\"\",e.host?u=a+e.host:s&&(u=a+(~s.indexOf(\":\")?\"[\"+s+\"]\":s),e.port&&(u+=\":\"+e.port)),i&&\"object\"==typeof i&&(i=t.encode(i));var f=e.search||i&&\"?\"+i||\"\";return n&&\":\"!==n.substr(-1)&&(n+=\":\"),e.slashes||(!n||o.test(n))&&!1!==u?(u=\"//\"+(u||\"\"),p&&\"/\"!==p[0]&&(p=\"/\"+p)):u||(u=\"\"),c&&\"#\"!==c[0]&&(c=\"#\"+c),f&&\"?\"!==f[0]&&(f=\"?\"+f),{protocol:n,host:u,pathname:p=p.replace(/[?#]/g,encodeURIComponent),search:f=f.replace(\"#\",\"%23\"),hash:c}}(e,a,s);return\"\"+t.protocol+t.host+t.pathname+t.search+t.hash}var n=\"http://\",p=\"w.w\",c=n+p,i=/^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i,u=/https?|ftp|gopher|file/;function h(e,t){var o=\"string\"==typeof e?d(e):e;e=\"object\"==typeof e?r(e):e;var a=d(t),s=\"\";o.protocol&&!o.slashes&&(s=o.protocol,e=e.replace(o.protocol,\"\"),s+=\"/\"===t[0]||\"/\"===e[0]?\"/\":\"\"),s&&a.protocol&&(s=\"\",a.slashes||(s=a.protocol,t=t.replace(a.protocol,\"\")));var p=e.match(i);p&&!a.protocol&&(e=e.substr((s=p[1]+(p[2]||\"\")).length),/^\\/\\/[^/]/.test(t)&&(s=s.slice(0,-1)));var f=new URL(e,c+\"/\"),m=new URL(t,f).toString().replace(c,\"\"),v=a.protocol||o.protocol;return v+=o.slashes||a.slashes?\"//\":\"\",!s&&v?m=m.replace(n,v):s&&(m=m.replace(n,\"\")),u.test(m)||~t.indexOf(\".\")||\"/\"===e.slice(-1)||\"/\"===t.slice(-1)||\"/\"!==m.slice(-1)||(m=m.slice(0,-1)),s&&(m=s+(\"/\"===m[0]?m.substr(1):m)),m}function l(){}l.prototype.parse=d,l.prototype.format=r,l.prototype.resolve=h,l.prototype.resolveObject=h;var f=/^https?|ftp|gopher|file/,m=/^(.*?)([#?].*)/,v=/^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i,_=/^([a-z0-9.+-]*:)?\\/\\/\\/*/i,b=/^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;function d(e,t,o){if(void 0===t&&(t=!1),void 0===o&&(o=!1),e&&\"object\"==typeof e&&e instanceof l)return e;var s=(e=e.trim()).match(m);e=s?s[1].replace(/\\\\/g,\"/\")+s[2]:e.replace(/\\\\/g,\"/\"),b.test(e)&&\"/\"!==e.slice(-1)&&(e+=\"/\");var n=!/(^javascript)/.test(e)&&e.match(v),i=_.test(e),u=\"\";n&&(f.test(n[1])||(u=n[1].toLowerCase(),e=\"\"+n[2]+n[3]),n[2]||(i=!1,f.test(n[1])?(u=n[1],e=\"\"+n[3]):e=\"//\"+n[3]),3!==n[2].length&&1!==n[2].length||(u=n[1],e=\"/\"+n[3]));var g,y=(s?s[1]:e).match(/^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/),w=y&&y[1],x=new l,C=\"\",U=\"\";try{g=new URL(e)}catch(t){C=t,u||o||!/^\\/\\//.test(e)||/^\\/\\/.+[@.]/.test(e)||(U=\"/\",e=e.substr(1));try{g=new URL(e,c)}catch(e){return x.protocol=u,x.href=u,x}}x.slashes=i&&!U,x.host=g.host===p?\"\":g.host,x.hostname=g.hostname===p?\"\":g.hostname.replace(/(\\[|\\])/g,\"\"),x.protocol=C?u||null:g.protocol,x.search=g.search.replace(/\\\\/g,\"%5C\"),x.hash=g.hash.replace(/\\\\/g,\"%5C\");var j=e.split(\"#\");!x.search&&~j[0].indexOf(\"?\")&&(x.search=\"?\"),x.hash||\"\"!==j[1]||(x.hash=\"#\"),x.query=t?a.decode(g.search.substr(1)):x.search.substr(1),x.pathname=U+(n?function(e){return e.replace(/['^|`]/g,(function(e){return\"%\"+e.charCodeAt().toString(16).toUpperCase()})).replace(/((?:%[0-9A-F]{2})+)/g,(function(e,t){try{return decodeURIComponent(t).split(\"\").map((function(e){var t=e.charCodeAt();return t>256||/^[a-z0-9]$/i.test(e)?e:\"%\"+t.toString(16).toUpperCase()})).join(\"\")}catch(e){return t}}))}(g.pathname):g.pathname),\"about:\"===x.protocol&&\"blank\"===x.pathname&&(x.protocol=\"\",x.pathname=\"\"),C&&\"/\"!==e[0]&&(x.pathname=x.pathname.substr(1)),u&&!f.test(u)&&\"/\"!==e.slice(-1)&&\"/\"===x.pathname&&(x.pathname=\"\"),x.path=x.pathname+x.search,x.auth=[g.username,g.password].map(decodeURIComponent).filter(Boolean).join(\":\"),x.port=g.port,w&&!x.host.endsWith(w)&&(x.host+=w,x.port=w.slice(1)),x.href=U?\"\"+x.pathname+x.search+x.hash:r(x);var q=/^(file)/.test(x.href)?[\"host\",\"hostname\"]:[];return Object.keys(x).forEach((function(e){~q.indexOf(e)||(x[e]=x[e]||null)})),x}e.parse=d,e.format=r,e.resolve=h,e.resolveObject=function(e,t){return d(h(e,t))},e.Url=l}();module.exports=o})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL25hdGl2ZS11cmwvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksT0FBTyxnQkFBZ0IsYUFBYSxVQUFVLG1CQUFPLENBQUMsc0dBQW9DLElBQUksU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssU0FBUyxZQUFZLFFBQVEsK0dBQStHLGNBQWMsNkJBQTZCLHNCQUFzQiw0RkFBNEYsNktBQTZLLDZCQUE2QixpTEFBaUwseUdBQXlHLFFBQVEsc0RBQXNELHVHQUF1RyxnQkFBZ0IsZ0NBQWdDLDRCQUE0QixnQkFBZ0IsOEtBQThLLGlCQUFpQixnR0FBZ0csd0ZBQXdGLGtPQUFrTyxjQUFjLDJGQUEyRiwwRUFBMEUsSUFBSSw2REFBNkQsSUFBSSxhQUFhLGtCQUFrQix3RkFBd0YsNEJBQTRCLDZGQUE2Riw0REFBNEQsd0tBQXdLLDJGQUEyRixJQUFJLGFBQWEsU0FBUyx5RUFBeUUsSUFBSSxlQUFlLFNBQVMsZ0NBQWdDLHFOQUFxTixtQkFBbUIsb0tBQW9LLHdDQUF3QyxvREFBb0QsMEJBQTBCLEVBQUUscUJBQXFCLElBQUksd0RBQXdELHFCQUFxQix1RUFBdUUsWUFBWSxTQUFTLFVBQVUsR0FBRyxxYkFBcWIsb0RBQW9ELDJDQUEyQyxpQ0FBaUMsS0FBSywrREFBK0QsaUJBQWlCLFNBQVMsR0FBRyxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9uYXRpdmUtdXJsL2luZGV4LmpzPzcyNDUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezQ1MjpmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9cmVxdWlyZShcIm5leHQvZGlzdC9jb21waWxlZC9xdWVyeXN0cmluZy1lczNcIil9fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKG8pe3ZhciBhPXRbb107aWYoYSE9PXVuZGVmaW5lZCl7cmV0dXJuIGEuZXhwb3J0c312YXIgcz10W29dPXtleHBvcnRzOnt9fTt2YXIgbj10cnVlO3RyeXtlW29dKHMscy5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO249ZmFsc2V9ZmluYWxseXtpZihuKWRlbGV0ZSB0W29dfXJldHVybiBzLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciBvPXt9OyFmdW5jdGlvbigpe3ZhciBlPW87dmFyIHQsYT0odD1fX25jY3dwY2tfcmVxdWlyZV9fKDQ1MikpJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJkZWZhdWx0XCJpbiB0P3QuZGVmYXVsdDp0LHM9L2h0dHBzP3xmdHB8Z29waGVyfGZpbGUvO2Z1bmN0aW9uIHIoZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWQoZSkpO3ZhciB0PWZ1bmN0aW9uKGUsdCxvKXt2YXIgYT1lLmF1dGgscz1lLmhvc3RuYW1lLG49ZS5wcm90b2NvbHx8XCJcIixwPWUucGF0aG5hbWV8fFwiXCIsYz1lLmhhc2h8fFwiXCIsaT1lLnF1ZXJ5fHxcIlwiLHU9ITE7YT1hP2VuY29kZVVSSUNvbXBvbmVudChhKS5yZXBsYWNlKC8lM0EvaSxcIjpcIikrXCJAXCI6XCJcIixlLmhvc3Q/dT1hK2UuaG9zdDpzJiYodT1hKyh+cy5pbmRleE9mKFwiOlwiKT9cIltcIitzK1wiXVwiOnMpLGUucG9ydCYmKHUrPVwiOlwiK2UucG9ydCkpLGkmJlwib2JqZWN0XCI9PXR5cGVvZiBpJiYoaT10LmVuY29kZShpKSk7dmFyIGY9ZS5zZWFyY2h8fGkmJlwiP1wiK2l8fFwiXCI7cmV0dXJuIG4mJlwiOlwiIT09bi5zdWJzdHIoLTEpJiYobis9XCI6XCIpLGUuc2xhc2hlc3x8KCFufHxvLnRlc3QobikpJiYhMSE9PXU/KHU9XCIvL1wiKyh1fHxcIlwiKSxwJiZcIi9cIiE9PXBbMF0mJihwPVwiL1wiK3ApKTp1fHwodT1cIlwiKSxjJiZcIiNcIiE9PWNbMF0mJihjPVwiI1wiK2MpLGYmJlwiP1wiIT09ZlswXSYmKGY9XCI/XCIrZikse3Byb3RvY29sOm4saG9zdDp1LHBhdGhuYW1lOnA9cC5yZXBsYWNlKC9bPyNdL2csZW5jb2RlVVJJQ29tcG9uZW50KSxzZWFyY2g6Zj1mLnJlcGxhY2UoXCIjXCIsXCIlMjNcIiksaGFzaDpjfX0oZSxhLHMpO3JldHVyblwiXCIrdC5wcm90b2NvbCt0Lmhvc3QrdC5wYXRobmFtZSt0LnNlYXJjaCt0Lmhhc2h9dmFyIG49XCJodHRwOi8vXCIscD1cIncud1wiLGM9bitwLGk9L14oW2EtejAtOS4rLV0qOlxcL1xcL1xcLykoW2EtejAtOS4rLV06XFwvKik/L2ksdT0vaHR0cHM/fGZ0cHxnb3BoZXJ8ZmlsZS87ZnVuY3Rpb24gaChlLHQpe3ZhciBvPVwic3RyaW5nXCI9PXR5cGVvZiBlP2QoZSk6ZTtlPVwib2JqZWN0XCI9PXR5cGVvZiBlP3IoZSk6ZTt2YXIgYT1kKHQpLHM9XCJcIjtvLnByb3RvY29sJiYhby5zbGFzaGVzJiYocz1vLnByb3RvY29sLGU9ZS5yZXBsYWNlKG8ucHJvdG9jb2wsXCJcIikscys9XCIvXCI9PT10WzBdfHxcIi9cIj09PWVbMF0/XCIvXCI6XCJcIikscyYmYS5wcm90b2NvbCYmKHM9XCJcIixhLnNsYXNoZXN8fChzPWEucHJvdG9jb2wsdD10LnJlcGxhY2UoYS5wcm90b2NvbCxcIlwiKSkpO3ZhciBwPWUubWF0Y2goaSk7cCYmIWEucHJvdG9jb2wmJihlPWUuc3Vic3RyKChzPXBbMV0rKHBbMl18fFwiXCIpKS5sZW5ndGgpLC9eXFwvXFwvW14vXS8udGVzdCh0KSYmKHM9cy5zbGljZSgwLC0xKSkpO3ZhciBmPW5ldyBVUkwoZSxjK1wiL1wiKSxtPW5ldyBVUkwodCxmKS50b1N0cmluZygpLnJlcGxhY2UoYyxcIlwiKSx2PWEucHJvdG9jb2x8fG8ucHJvdG9jb2w7cmV0dXJuIHYrPW8uc2xhc2hlc3x8YS5zbGFzaGVzP1wiLy9cIjpcIlwiLCFzJiZ2P209bS5yZXBsYWNlKG4sdik6cyYmKG09bS5yZXBsYWNlKG4sXCJcIikpLHUudGVzdChtKXx8fnQuaW5kZXhPZihcIi5cIil8fFwiL1wiPT09ZS5zbGljZSgtMSl8fFwiL1wiPT09dC5zbGljZSgtMSl8fFwiL1wiIT09bS5zbGljZSgtMSl8fChtPW0uc2xpY2UoMCwtMSkpLHMmJihtPXMrKFwiL1wiPT09bVswXT9tLnN1YnN0cigxKTptKSksbX1mdW5jdGlvbiBsKCl7fWwucHJvdG90eXBlLnBhcnNlPWQsbC5wcm90b3R5cGUuZm9ybWF0PXIsbC5wcm90b3R5cGUucmVzb2x2ZT1oLGwucHJvdG90eXBlLnJlc29sdmVPYmplY3Q9aDt2YXIgZj0vXmh0dHBzP3xmdHB8Z29waGVyfGZpbGUvLG09L14oLio/KShbIz9dLiopLyx2PS9eKFthLXowLTkuKy1dKjopKFxcL3swLDN9KSguKikvaSxfPS9eKFthLXowLTkuKy1dKjopP1xcL1xcL1xcLyovaSxiPS9eKFthLXowLTkuKy1dKjopKFxcL3swLDJ9KVxcWyguKilcXF0kL2k7ZnVuY3Rpb24gZChlLHQsbyl7aWYodm9pZCAwPT09dCYmKHQ9ITEpLHZvaWQgMD09PW8mJihvPSExKSxlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSBpbnN0YW5jZW9mIGwpcmV0dXJuIGU7dmFyIHM9KGU9ZS50cmltKCkpLm1hdGNoKG0pO2U9cz9zWzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikrc1syXTplLnJlcGxhY2UoL1xcXFwvZyxcIi9cIiksYi50ZXN0KGUpJiZcIi9cIiE9PWUuc2xpY2UoLTEpJiYoZSs9XCIvXCIpO3ZhciBuPSEvKF5qYXZhc2NyaXB0KS8udGVzdChlKSYmZS5tYXRjaCh2KSxpPV8udGVzdChlKSx1PVwiXCI7biYmKGYudGVzdChuWzFdKXx8KHU9blsxXS50b0xvd2VyQ2FzZSgpLGU9XCJcIituWzJdK25bM10pLG5bMl18fChpPSExLGYudGVzdChuWzFdKT8odT1uWzFdLGU9XCJcIituWzNdKTplPVwiLy9cIituWzNdKSwzIT09blsyXS5sZW5ndGgmJjEhPT1uWzJdLmxlbmd0aHx8KHU9blsxXSxlPVwiL1wiK25bM10pKTt2YXIgZyx5PShzP3NbMV06ZSkubWF0Y2goL15odHRwcz86XFwvXFwvW14vXSsoOlswLTldKykoPz1cXC98JCkvKSx3PXkmJnlbMV0seD1uZXcgbCxDPVwiXCIsVT1cIlwiO3RyeXtnPW5ldyBVUkwoZSl9Y2F0Y2godCl7Qz10LHV8fG98fCEvXlxcL1xcLy8udGVzdChlKXx8L15cXC9cXC8uK1tALl0vLnRlc3QoZSl8fChVPVwiL1wiLGU9ZS5zdWJzdHIoMSkpO3RyeXtnPW5ldyBVUkwoZSxjKX1jYXRjaChlKXtyZXR1cm4geC5wcm90b2NvbD11LHguaHJlZj11LHh9fXguc2xhc2hlcz1pJiYhVSx4Lmhvc3Q9Zy5ob3N0PT09cD9cIlwiOmcuaG9zdCx4Lmhvc3RuYW1lPWcuaG9zdG5hbWU9PT1wP1wiXCI6Zy5ob3N0bmFtZS5yZXBsYWNlKC8oXFxbfFxcXSkvZyxcIlwiKSx4LnByb3RvY29sPUM/dXx8bnVsbDpnLnByb3RvY29sLHguc2VhcmNoPWcuc2VhcmNoLnJlcGxhY2UoL1xcXFwvZyxcIiU1Q1wiKSx4Lmhhc2g9Zy5oYXNoLnJlcGxhY2UoL1xcXFwvZyxcIiU1Q1wiKTt2YXIgaj1lLnNwbGl0KFwiI1wiKTsheC5zZWFyY2gmJn5qWzBdLmluZGV4T2YoXCI/XCIpJiYoeC5zZWFyY2g9XCI/XCIpLHguaGFzaHx8XCJcIiE9PWpbMV18fCh4Lmhhc2g9XCIjXCIpLHgucXVlcnk9dD9hLmRlY29kZShnLnNlYXJjaC5zdWJzdHIoMSkpOnguc2VhcmNoLnN1YnN0cigxKSx4LnBhdGhuYW1lPVUrKG4/ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvWydefGBdL2csKGZ1bmN0aW9uKGUpe3JldHVyblwiJVwiK2UuY2hhckNvZGVBdCgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfSkpLnJlcGxhY2UoLygoPzolWzAtOUEtRl17Mn0pKykvZywoZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh0KS5zcGxpdChcIlwiKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hhckNvZGVBdCgpO3JldHVybiB0PjI1Nnx8L15bYS16MC05XSQvaS50ZXN0KGUpP2U6XCIlXCIrdC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX0pKS5qb2luKFwiXCIpfWNhdGNoKGUpe3JldHVybiB0fX0pKX0oZy5wYXRobmFtZSk6Zy5wYXRobmFtZSksXCJhYm91dDpcIj09PXgucHJvdG9jb2wmJlwiYmxhbmtcIj09PXgucGF0aG5hbWUmJih4LnByb3RvY29sPVwiXCIseC5wYXRobmFtZT1cIlwiKSxDJiZcIi9cIiE9PWVbMF0mJih4LnBhdGhuYW1lPXgucGF0aG5hbWUuc3Vic3RyKDEpKSx1JiYhZi50ZXN0KHUpJiZcIi9cIiE9PWUuc2xpY2UoLTEpJiZcIi9cIj09PXgucGF0aG5hbWUmJih4LnBhdGhuYW1lPVwiXCIpLHgucGF0aD14LnBhdGhuYW1lK3guc2VhcmNoLHguYXV0aD1bZy51c2VybmFtZSxnLnBhc3N3b3JkXS5tYXAoZGVjb2RlVVJJQ29tcG9uZW50KS5maWx0ZXIoQm9vbGVhbikuam9pbihcIjpcIikseC5wb3J0PWcucG9ydCx3JiYheC5ob3N0LmVuZHNXaXRoKHcpJiYoeC5ob3N0Kz13LHgucG9ydD13LnNsaWNlKDEpKSx4LmhyZWY9VT9cIlwiK3gucGF0aG5hbWUreC5zZWFyY2greC5oYXNoOnIoeCk7dmFyIHE9L14oZmlsZSkvLnRlc3QoeC5ocmVmKT9bXCJob3N0XCIsXCJob3N0bmFtZVwiXTpbXTtyZXR1cm4gT2JqZWN0LmtleXMoeCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7fnEuaW5kZXhPZihlKXx8KHhbZV09eFtlXXx8bnVsbCl9KSkseH1lLnBhcnNlPWQsZS5mb3JtYXQ9cixlLnJlc29sdmU9aCxlLnJlc29sdmVPYmplY3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZChoKGUsdCkpfSxlLlVybD1sfSgpO21vZHVsZS5leHBvcnRzPW99KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/native-url/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/querystring-es3/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/querystring-es3/index.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){\"use strict\";var e={815:function(e){function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}e.exports=function(e,n,t,o){n=n||\"&\";t=t||\"=\";var a={};if(typeof e!==\"string\"||e.length===0){return a}var i=/\\+/g;e=e.split(n);var u=1e3;if(o&&typeof o.maxKeys===\"number\"){u=o.maxKeys}var c=e.length;if(u>0&&c>u){c=u}for(var p=0;p<c;++p){var f=e[p].replace(i,\"%20\"),s=f.indexOf(t),_,l,y,d;if(s>=0){_=f.substr(0,s);l=f.substr(s+1)}else{_=f;l=\"\"}y=decodeURIComponent(_);d=decodeURIComponent(l);if(!hasOwnProperty(a,y)){a[y]=d}else if(r(a[y])){a[y].push(d)}else{a[y]=[a[y],d]}}return a};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"}},577:function(e){var stringifyPrimitive=function(e){switch(typeof e){case\"string\":return e;case\"boolean\":return e?\"true\":\"false\";case\"number\":return isFinite(e)?e:\"\";default:return\"\"}};e.exports=function(e,t,o,a){t=t||\"&\";o=o||\"=\";if(e===null){e=undefined}if(typeof e===\"object\"){return map(n(e),(function(n){var a=encodeURIComponent(stringifyPrimitive(n))+o;if(r(e[n])){return map(e[n],(function(e){return a+encodeURIComponent(stringifyPrimitive(e))})).join(t)}else{return a+encodeURIComponent(stringifyPrimitive(e[n]))}})).join(t)}if(!a)return\"\";return encodeURIComponent(stringifyPrimitive(a))+o+encodeURIComponent(stringifyPrimitive(e))};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"};function map(e,r){if(e.map)return e.map(r);var n=[];for(var t=0;t<e.length;t++){n.push(r(e[t],t))}return n}var n=Object.keys||function(e){var r=[];for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))r.push(n)}return r}}};var r={};function __nccwpck_require__(n){var t=r[n];if(t!==undefined){return t.exports}var o=r[n]={exports:{}};var a=true;try{e[n](o,o.exports,__nccwpck_require__);a=false}finally{if(a)delete r[n]}return o.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var n={};!function(){var e=n;e.decode=e.parse=__nccwpck_require__(815);e.encode=e.stringify=__nccwpck_require__(577)}();module.exports=n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxhQUFhLE9BQU8sZ0JBQWdCLDZCQUE2QixpREFBaUQsNEJBQTRCLFNBQVMsU0FBUyxTQUFTLHNDQUFzQyxTQUFTLFlBQVksYUFBYSxVQUFVLG1DQUFtQyxZQUFZLGVBQWUsYUFBYSxJQUFJLFlBQVksSUFBSSxLQUFLLG1EQUFtRCxTQUFTLGdCQUFnQixnQkFBZ0IsS0FBSyxJQUFJLEtBQUssd0JBQXdCLHdCQUF3Qix5QkFBeUIsT0FBTyxpQkFBaUIsYUFBYSxLQUFLLGVBQWUsVUFBVSxpQ0FBaUMsNkRBQTZELGlCQUFpQixtQ0FBbUMsaUJBQWlCLHNCQUFzQixzQ0FBc0MscUNBQXFDLG1CQUFtQiw0QkFBNEIsU0FBUyxTQUFTLGFBQWEsWUFBWSx3QkFBd0IsNkJBQTZCLGtEQUFrRCxZQUFZLDZCQUE2QixtREFBbUQsV0FBVyxLQUFLLHVEQUF1RCxXQUFXLGVBQWUsOEZBQThGLGlDQUFpQyw2REFBNkQsa0JBQWtCLHlCQUF5QixTQUFTLFlBQVksV0FBVyxLQUFLLGtCQUFrQixTQUFTLCtCQUErQixTQUFTLGdCQUFnQix1REFBdUQsWUFBWSxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSyxTQUFTLFlBQVksUUFBUSwwQ0FBMEMsOENBQThDLEdBQUcsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzPzI0MWYiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezgxNTpmdW5jdGlvbihlKXtmdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShlLHIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHQsbyl7bj1ufHxcIiZcIjt0PXR8fFwiPVwiO3ZhciBhPXt9O2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcInx8ZS5sZW5ndGg9PT0wKXtyZXR1cm4gYX12YXIgaT0vXFwrL2c7ZT1lLnNwbGl0KG4pO3ZhciB1PTFlMztpZihvJiZ0eXBlb2Ygby5tYXhLZXlzPT09XCJudW1iZXJcIil7dT1vLm1heEtleXN9dmFyIGM9ZS5sZW5ndGg7aWYodT4wJiZjPnUpe2M9dX1mb3IodmFyIHA9MDtwPGM7KytwKXt2YXIgZj1lW3BdLnJlcGxhY2UoaSxcIiUyMFwiKSxzPWYuaW5kZXhPZih0KSxfLGwseSxkO2lmKHM+PTApe189Zi5zdWJzdHIoMCxzKTtsPWYuc3Vic3RyKHMrMSl9ZWxzZXtfPWY7bD1cIlwifXk9ZGVjb2RlVVJJQ29tcG9uZW50KF8pO2Q9ZGVjb2RlVVJJQ29tcG9uZW50KGwpO2lmKCFoYXNPd25Qcm9wZXJ0eShhLHkpKXthW3ldPWR9ZWxzZSBpZihyKGFbeV0pKXthW3ldLnB1c2goZCl9ZWxzZXthW3ldPVthW3ldLGRdfX1yZXR1cm4gYX07dmFyIHI9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT09PVwiW29iamVjdCBBcnJheV1cIn19LDU3NzpmdW5jdGlvbihlKXt2YXIgc3RyaW5naWZ5UHJpbWl0aXZlPWZ1bmN0aW9uKGUpe3N3aXRjaCh0eXBlb2YgZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGU7Y2FzZVwiYm9vbGVhblwiOnJldHVybiBlP1widHJ1ZVwiOlwiZmFsc2VcIjtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoZSk/ZTpcIlwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbyxhKXt0PXR8fFwiJlwiO289b3x8XCI9XCI7aWYoZT09PW51bGwpe2U9dW5kZWZpbmVkfWlmKHR5cGVvZiBlPT09XCJvYmplY3RcIil7cmV0dXJuIG1hcChuKGUpLChmdW5jdGlvbihuKXt2YXIgYT1lbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG4pKStvO2lmKHIoZVtuXSkpe3JldHVybiBtYXAoZVtuXSwoZnVuY3Rpb24oZSl7cmV0dXJuIGErZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShlKSl9KSkuam9pbih0KX1lbHNle3JldHVybiBhK2VuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoZVtuXSkpfX0pKS5qb2luKHQpfWlmKCFhKXJldHVyblwiXCI7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoYSkpK28rZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShlKSl9O3ZhciByPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk9PT1cIltvYmplY3QgQXJyYXldXCJ9O2Z1bmN0aW9uIG1hcChlLHIpe2lmKGUubWFwKXJldHVybiBlLm1hcChyKTt2YXIgbj1bXTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7bi5wdXNoKHIoZVt0XSx0KSl9cmV0dXJuIG59dmFyIG49T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciByPVtdO2Zvcih2YXIgbiBpbiBlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSlyLnB1c2gobil9cmV0dXJuIHJ9fX07dmFyIHI9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhuKXt2YXIgdD1yW25dO2lmKHQhPT11bmRlZmluZWQpe3JldHVybiB0LmV4cG9ydHN9dmFyIG89cltuXT17ZXhwb3J0czp7fX07dmFyIGE9dHJ1ZTt0cnl7ZVtuXShvLG8uZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTthPWZhbHNlfWZpbmFsbHl7aWYoYSlkZWxldGUgcltuXX1yZXR1cm4gby5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgbj17fTshZnVuY3Rpb24oKXt2YXIgZT1uO2UuZGVjb2RlPWUucGFyc2U9X19uY2N3cGNrX3JlcXVpcmVfXyg4MTUpO2UuZW5jb2RlPWUuc3RyaW5naWZ5PV9fbmNjd3Bja19yZXF1aXJlX18oNTc3KX0oKTttb2R1bGUuZXhwb3J0cz1ufSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/querystring-es3/index.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/stream-browserify/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/stream-browserify/index.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n(function(){var e={782:function(e){if(typeof Object.create===\"function\"){e.exports=function inherits(e,t){if(t){e.super_=t;e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:false,writable:true,configurable:true}})}}}else{e.exports=function inherits(e,t){if(t){e.super_=t;var TempCtor=function(){};TempCtor.prototype=t.prototype;e.prototype=new TempCtor;e.prototype.constructor=e}}}},646:function(e){\"use strict\";const t={};function createErrorType(e,r,n){if(!n){n=Error}function getMessage(e,t,n){if(typeof r===\"string\"){return r}else{return r(e,t,n)}}class NodeError extends n{constructor(e,t,r){super(getMessage(e,t,r))}}NodeError.prototype.name=n.name;NodeError.prototype.code=e;t[e]=NodeError}function oneOf(e,t){if(Array.isArray(e)){const r=e.length;e=e.map((e=>String(e)));if(r>2){return`one of ${t} ${e.slice(0,r-1).join(\", \")}, or `+e[r-1]}else if(r===2){return`one of ${t} ${e[0]} or ${e[1]}`}else{return`of ${t} ${e[0]}`}}else{return`of ${t} ${String(e)}`}}function startsWith(e,t,r){return e.substr(!r||r<0?0:+r,t.length)===t}function endsWith(e,t,r){if(r===undefined||r>e.length){r=e.length}return e.substring(r-t.length,r)===t}function includes(e,t,r){if(typeof r!==\"number\"){r=0}if(r+t.length>e.length){return false}else{return e.indexOf(t,r)!==-1}}createErrorType(\"ERR_INVALID_OPT_VALUE\",(function(e,t){return'The value \"'+t+'\" is invalid for option \"'+e+'\"'}),TypeError);createErrorType(\"ERR_INVALID_ARG_TYPE\",(function(e,t,r){let n;if(typeof t===\"string\"&&startsWith(t,\"not \")){n=\"must not be\";t=t.replace(/^not /,\"\")}else{n=\"must be\"}let i;if(endsWith(e,\" argument\")){i=`The ${e} ${n} ${oneOf(t,\"type\")}`}else{const r=includes(e,\".\")?\"property\":\"argument\";i=`The \"${e}\" ${r} ${n} ${oneOf(t,\"type\")}`}i+=`. Received type ${typeof r}`;return i}),TypeError);createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\",\"stream.push() after EOF\");createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\",(function(e){return\"The \"+e+\" method is not implemented\"}));createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\",\"Premature close\");createErrorType(\"ERR_STREAM_DESTROYED\",(function(e){return\"Cannot call \"+e+\" after a stream was destroyed\"}));createErrorType(\"ERR_MULTIPLE_CALLBACK\",\"Callback called multiple times\");createErrorType(\"ERR_STREAM_CANNOT_PIPE\",\"Cannot pipe, not readable\");createErrorType(\"ERR_STREAM_WRITE_AFTER_END\",\"write after end\");createErrorType(\"ERR_STREAM_NULL_VALUES\",\"May not write null values to stream\",TypeError);createErrorType(\"ERR_UNKNOWN_ENCODING\",(function(e){return\"Unknown encoding: \"+e}),TypeError);createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\",\"stream.unshift() after end event\");e.exports.q=t},403:function(e,t,r){\"use strict\";var n=Object.keys||function(e){var t=[];for(var r in e){t.push(r)}return t};e.exports=Duplex;var i=r(709);var a=r(337);r(782)(Duplex,i);{var o=n(a.prototype);for(var s=0;s<o.length;s++){var f=o[s];if(!Duplex.prototype[f])Duplex.prototype[f]=a.prototype[f]}}function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);i.call(this,e);a.call(this,e);this.allowHalfOpen=true;if(e){if(e.readable===false)this.readable=false;if(e.writable===false)this.writable=false;if(e.allowHalfOpen===false){this.allowHalfOpen=false;this.once(\"end\",onend)}}}Object.defineProperty(Duplex.prototype,\"writableHighWaterMark\",{enumerable:false,get:function get(){return this._writableState.highWaterMark}});Object.defineProperty(Duplex.prototype,\"writableBuffer\",{enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer()}});Object.defineProperty(Duplex.prototype,\"writableLength\",{enumerable:false,get:function get(){return this._writableState.length}});function onend(){if(this._writableState.ended)return;process.nextTick(onEndNT,this)}function onEndNT(e){e.end()}Object.defineProperty(Duplex.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._readableState===undefined||this._writableState===undefined){return false}return this._readableState.destroyed&&this._writableState.destroyed},set:function set(e){if(this._readableState===undefined||this._writableState===undefined){return}this._readableState.destroyed=e;this._writableState.destroyed=e}})},889:function(e,t,r){\"use strict\";e.exports=PassThrough;var n=r(170);r(782)(PassThrough,n);function PassThrough(e){if(!(this instanceof PassThrough))return new PassThrough(e);n.call(this,e)}PassThrough.prototype._transform=function(e,t,r){r(null,e)}},709:function(e,t,r){\"use strict\";e.exports=Readable;var n;Readable.ReadableState=ReadableState;var i=r(361).EventEmitter;var a=function EElistenerCount(e,t){return e.listeners(t).length};var o=r(678);var s=r(300).Buffer;var f=__webpack_require__.g.Uint8Array||function(){};function _uint8ArrayToBuffer(e){return s.from(e)}function _isUint8Array(e){return s.isBuffer(e)||e instanceof f}var l=r(837);var u;if(l&&l.debuglog){u=l.debuglog(\"stream\")}else{u=function debug(){}}var d=r(379);var c=r(25);var h=r(776),p=h.getHighWaterMark;var b=r(646).q,g=b.ERR_INVALID_ARG_TYPE,y=b.ERR_STREAM_PUSH_AFTER_EOF,_=b.ERR_METHOD_NOT_IMPLEMENTED,v=b.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;var w;var m;var S;r(782)(Readable,o);var R=c.errorOrDestroy;var E=[\"error\",\"close\",\"destroy\",\"pause\",\"resume\"];function prependListener(e,t,r){if(typeof e.prependListener===\"function\")return e.prependListener(t,r);if(!e._events||!e._events[t])e.on(t,r);else if(Array.isArray(e._events[t]))e._events[t].unshift(r);else e._events[t]=[r,e._events[t]]}function ReadableState(e,t,i){n=n||r(403);e=e||{};if(typeof i!==\"boolean\")i=t instanceof n;this.objectMode=!!e.objectMode;if(i)this.objectMode=this.objectMode||!!e.readableObjectMode;this.highWaterMark=p(this,e,\"readableHighWaterMark\",i);this.buffer=new d;this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;this.sync=true;this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;this.paused=true;this.emitClose=e.emitClose!==false;this.autoDestroy=!!e.autoDestroy;this.destroyed=false;this.defaultEncoding=e.defaultEncoding||\"utf8\";this.awaitDrain=0;this.readingMore=false;this.decoder=null;this.encoding=null;if(e.encoding){if(!w)w=r(704).s;this.decoder=new w(e.encoding);this.encoding=e.encoding}}function Readable(e){n=n||r(403);if(!(this instanceof Readable))return new Readable(e);var t=this instanceof n;this._readableState=new ReadableState(e,this,t);this.readable=true;if(e){if(typeof e.read===\"function\")this._read=e.read;if(typeof e.destroy===\"function\")this._destroy=e.destroy}o.call(this)}Object.defineProperty(Readable.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._readableState===undefined){return false}return this._readableState.destroyed},set:function set(e){if(!this._readableState){return}this._readableState.destroyed=e}});Readable.prototype.destroy=c.destroy;Readable.prototype._undestroy=c.undestroy;Readable.prototype._destroy=function(e,t){t(e)};Readable.prototype.push=function(e,t){var r=this._readableState;var n;if(!r.objectMode){if(typeof e===\"string\"){t=t||r.defaultEncoding;if(t!==r.encoding){e=s.from(e,t);t=\"\"}n=true}}else{n=true}return readableAddChunk(this,e,t,false,n)};Readable.prototype.unshift=function(e){return readableAddChunk(this,e,null,true,false)};function readableAddChunk(e,t,r,n,i){u(\"readableAddChunk\",t);var a=e._readableState;if(t===null){a.reading=false;onEofChunk(e,a)}else{var o;if(!i)o=chunkInvalid(a,t);if(o){R(e,o)}else if(a.objectMode||t&&t.length>0){if(typeof t!==\"string\"&&!a.objectMode&&Object.getPrototypeOf(t)!==s.prototype){t=_uint8ArrayToBuffer(t)}if(n){if(a.endEmitted)R(e,new v);else addChunk(e,a,t,true)}else if(a.ended){R(e,new y)}else if(a.destroyed){return false}else{a.reading=false;if(a.decoder&&!r){t=a.decoder.write(t);if(a.objectMode||t.length!==0)addChunk(e,a,t,false);else maybeReadMore(e,a)}else{addChunk(e,a,t,false)}}}else if(!n){a.reading=false;maybeReadMore(e,a)}}return!a.ended&&(a.length<a.highWaterMark||a.length===0)}function addChunk(e,t,r,n){if(t.flowing&&t.length===0&&!t.sync){t.awaitDrain=0;e.emit(\"data\",r)}else{t.length+=t.objectMode?1:r.length;if(n)t.buffer.unshift(r);else t.buffer.push(r);if(t.needReadable)emitReadable(e)}maybeReadMore(e,t)}function chunkInvalid(e,t){var r;if(!_isUint8Array(t)&&typeof t!==\"string\"&&t!==undefined&&!e.objectMode){r=new g(\"chunk\",[\"string\",\"Buffer\",\"Uint8Array\"],t)}return r}Readable.prototype.isPaused=function(){return this._readableState.flowing===false};Readable.prototype.setEncoding=function(e){if(!w)w=r(704).s;var t=new w(e);this._readableState.decoder=t;this._readableState.encoding=this._readableState.decoder.encoding;var n=this._readableState.buffer.head;var i=\"\";while(n!==null){i+=t.write(n.data);n=n.next}this._readableState.buffer.clear();if(i!==\"\")this._readableState.buffer.push(i);this._readableState.length=i.length;return this};var T=1073741824;function computeNewHighWaterMark(e){if(e>=T){e=T}else{e--;e|=e>>>1;e|=e>>>2;e|=e>>>4;e|=e>>>8;e|=e>>>16;e++}return e}function howMuchToRead(e,t){if(e<=0||t.length===0&&t.ended)return 0;if(t.objectMode)return 1;if(e!==e){if(t.flowing&&t.length)return t.buffer.head.data.length;else return t.length}if(e>t.highWaterMark)t.highWaterMark=computeNewHighWaterMark(e);if(e<=t.length)return e;if(!t.ended){t.needReadable=true;return 0}return t.length}Readable.prototype.read=function(e){u(\"read\",e);e=parseInt(e,10);var t=this._readableState;var r=e;if(e!==0)t.emittedReadable=false;if(e===0&&t.needReadable&&((t.highWaterMark!==0?t.length>=t.highWaterMark:t.length>0)||t.ended)){u(\"read: emitReadable\",t.length,t.ended);if(t.length===0&&t.ended)endReadable(this);else emitReadable(this);return null}e=howMuchToRead(e,t);if(e===0&&t.ended){if(t.length===0)endReadable(this);return null}var n=t.needReadable;u(\"need readable\",n);if(t.length===0||t.length-e<t.highWaterMark){n=true;u(\"length less than watermark\",n)}if(t.ended||t.reading){n=false;u(\"reading or ended\",n)}else if(n){u(\"do read\");t.reading=true;t.sync=true;if(t.length===0)t.needReadable=true;this._read(t.highWaterMark);t.sync=false;if(!t.reading)e=howMuchToRead(r,t)}var i;if(e>0)i=fromList(e,t);else i=null;if(i===null){t.needReadable=t.length<=t.highWaterMark;e=0}else{t.length-=e;t.awaitDrain=0}if(t.length===0){if(!t.ended)t.needReadable=true;if(r!==e&&t.ended)endReadable(this)}if(i!==null)this.emit(\"data\",i);return i};function onEofChunk(e,t){u(\"onEofChunk\");if(t.ended)return;if(t.decoder){var r=t.decoder.end();if(r&&r.length){t.buffer.push(r);t.length+=t.objectMode?1:r.length}}t.ended=true;if(t.sync){emitReadable(e)}else{t.needReadable=false;if(!t.emittedReadable){t.emittedReadable=true;emitReadable_(e)}}}function emitReadable(e){var t=e._readableState;u(\"emitReadable\",t.needReadable,t.emittedReadable);t.needReadable=false;if(!t.emittedReadable){u(\"emitReadable\",t.flowing);t.emittedReadable=true;process.nextTick(emitReadable_,e)}}function emitReadable_(e){var t=e._readableState;u(\"emitReadable_\",t.destroyed,t.length,t.ended);if(!t.destroyed&&(t.length||t.ended)){e.emit(\"readable\");t.emittedReadable=false}t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark;flow(e)}function maybeReadMore(e,t){if(!t.readingMore){t.readingMore=true;process.nextTick(maybeReadMore_,e,t)}}function maybeReadMore_(e,t){while(!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&t.length===0)){var r=t.length;u(\"maybeReadMore read 0\");e.read(0);if(r===t.length)break}t.readingMore=false}Readable.prototype._read=function(e){R(this,new _(\"_read()\"))};Readable.prototype.pipe=function(e,t){var r=this;var n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e);break}n.pipesCount+=1;u(\"pipe count=%d opts=%j\",n.pipesCount,t);var i=(!t||t.end!==false)&&e!==process.stdout&&e!==process.stderr;var o=i?onend:unpipe;if(n.endEmitted)process.nextTick(o);else r.once(\"end\",o);e.on(\"unpipe\",onunpipe);function onunpipe(e,t){u(\"onunpipe\");if(e===r){if(t&&t.hasUnpiped===false){t.hasUnpiped=true;cleanup()}}}function onend(){u(\"onend\");e.end()}var s=pipeOnDrain(r);e.on(\"drain\",s);var f=false;function cleanup(){u(\"cleanup\");e.removeListener(\"close\",onclose);e.removeListener(\"finish\",onfinish);e.removeListener(\"drain\",s);e.removeListener(\"error\",onerror);e.removeListener(\"unpipe\",onunpipe);r.removeListener(\"end\",onend);r.removeListener(\"end\",unpipe);r.removeListener(\"data\",ondata);f=true;if(n.awaitDrain&&(!e._writableState||e._writableState.needDrain))s()}r.on(\"data\",ondata);function ondata(t){u(\"ondata\");var i=e.write(t);u(\"dest.write\",i);if(i===false){if((n.pipesCount===1&&n.pipes===e||n.pipesCount>1&&indexOf(n.pipes,e)!==-1)&&!f){u(\"false write response, pause\",n.awaitDrain);n.awaitDrain++}r.pause()}}function onerror(t){u(\"onerror\",t);unpipe();e.removeListener(\"error\",onerror);if(a(e,\"error\")===0)R(e,t)}prependListener(e,\"error\",onerror);function onclose(){e.removeListener(\"finish\",onfinish);unpipe()}e.once(\"close\",onclose);function onfinish(){u(\"onfinish\");e.removeListener(\"close\",onclose);unpipe()}e.once(\"finish\",onfinish);function unpipe(){u(\"unpipe\");r.unpipe(e)}e.emit(\"pipe\",r);if(!n.flowing){u(\"pipe resume\");r.resume()}return e};function pipeOnDrain(e){return function pipeOnDrainFunctionResult(){var t=e._readableState;u(\"pipeOnDrain\",t.awaitDrain);if(t.awaitDrain)t.awaitDrain--;if(t.awaitDrain===0&&a(e,\"data\")){t.flowing=true;flow(e)}}}Readable.prototype.unpipe=function(e){var t=this._readableState;var r={hasUnpiped:false};if(t.pipesCount===0)return this;if(t.pipesCount===1){if(e&&e!==t.pipes)return this;if(!e)e=t.pipes;t.pipes=null;t.pipesCount=0;t.flowing=false;if(e)e.emit(\"unpipe\",this,r);return this}if(!e){var n=t.pipes;var i=t.pipesCount;t.pipes=null;t.pipesCount=0;t.flowing=false;for(var a=0;a<i;a++){n[a].emit(\"unpipe\",this,{hasUnpiped:false})}return this}var o=indexOf(t.pipes,e);if(o===-1)return this;t.pipes.splice(o,1);t.pipesCount-=1;if(t.pipesCount===1)t.pipes=t.pipes[0];e.emit(\"unpipe\",this,r);return this};Readable.prototype.on=function(e,t){var r=o.prototype.on.call(this,e,t);var n=this._readableState;if(e===\"data\"){n.readableListening=this.listenerCount(\"readable\")>0;if(n.flowing!==false)this.resume()}else if(e===\"readable\"){if(!n.endEmitted&&!n.readableListening){n.readableListening=n.needReadable=true;n.flowing=false;n.emittedReadable=false;u(\"on readable\",n.length,n.reading);if(n.length){emitReadable(this)}else if(!n.reading){process.nextTick(nReadingNextTick,this)}}}return r};Readable.prototype.addListener=Readable.prototype.on;Readable.prototype.removeListener=function(e,t){var r=o.prototype.removeListener.call(this,e,t);if(e===\"readable\"){process.nextTick(updateReadableListening,this)}return r};Readable.prototype.removeAllListeners=function(e){var t=o.prototype.removeAllListeners.apply(this,arguments);if(e===\"readable\"||e===undefined){process.nextTick(updateReadableListening,this)}return t};function updateReadableListening(e){var t=e._readableState;t.readableListening=e.listenerCount(\"readable\")>0;if(t.resumeScheduled&&!t.paused){t.flowing=true}else if(e.listenerCount(\"data\")>0){e.resume()}}function nReadingNextTick(e){u(\"readable nexttick read 0\");e.read(0)}Readable.prototype.resume=function(){var e=this._readableState;if(!e.flowing){u(\"resume\");e.flowing=!e.readableListening;resume(this,e)}e.paused=false;return this};function resume(e,t){if(!t.resumeScheduled){t.resumeScheduled=true;process.nextTick(resume_,e,t)}}function resume_(e,t){u(\"resume\",t.reading);if(!t.reading){e.read(0)}t.resumeScheduled=false;e.emit(\"resume\");flow(e);if(t.flowing&&!t.reading)e.read(0)}Readable.prototype.pause=function(){u(\"call pause flowing=%j\",this._readableState.flowing);if(this._readableState.flowing!==false){u(\"pause\");this._readableState.flowing=false;this.emit(\"pause\")}this._readableState.paused=true;return this};function flow(e){var t=e._readableState;u(\"flow\",t.flowing);while(t.flowing&&e.read()!==null){}}Readable.prototype.wrap=function(e){var t=this;var r=this._readableState;var n=false;e.on(\"end\",(function(){u(\"wrapped end\");if(r.decoder&&!r.ended){var e=r.decoder.end();if(e&&e.length)t.push(e)}t.push(null)}));e.on(\"data\",(function(i){u(\"wrapped data\");if(r.decoder)i=r.decoder.write(i);if(r.objectMode&&(i===null||i===undefined))return;else if(!r.objectMode&&(!i||!i.length))return;var a=t.push(i);if(!a){n=true;e.pause()}}));for(var i in e){if(this[i]===undefined&&typeof e[i]===\"function\"){this[i]=function methodWrap(t){return function methodWrapReturnFunction(){return e[t].apply(e,arguments)}}(i)}}for(var a=0;a<E.length;a++){e.on(E[a],this.emit.bind(this,E[a]))}this._read=function(t){u(\"wrapped _read\",t);if(n){n=false;e.resume()}};return this};if(typeof Symbol===\"function\"){Readable.prototype[Symbol.asyncIterator]=function(){if(m===undefined){m=r(871)}return m(this)}}Object.defineProperty(Readable.prototype,\"readableHighWaterMark\",{enumerable:false,get:function get(){return this._readableState.highWaterMark}});Object.defineProperty(Readable.prototype,\"readableBuffer\",{enumerable:false,get:function get(){return this._readableState&&this._readableState.buffer}});Object.defineProperty(Readable.prototype,\"readableFlowing\",{enumerable:false,get:function get(){return this._readableState.flowing},set:function set(e){if(this._readableState){this._readableState.flowing=e}}});Readable._fromList=fromList;Object.defineProperty(Readable.prototype,\"readableLength\",{enumerable:false,get:function get(){return this._readableState.length}});function fromList(e,t){if(t.length===0)return null;var r;if(t.objectMode)r=t.buffer.shift();else if(!e||e>=t.length){if(t.decoder)r=t.buffer.join(\"\");else if(t.buffer.length===1)r=t.buffer.first();else r=t.buffer.concat(t.length);t.buffer.clear()}else{r=t.buffer.consume(e,t.decoder)}return r}function endReadable(e){var t=e._readableState;u(\"endReadable\",t.endEmitted);if(!t.endEmitted){t.ended=true;process.nextTick(endReadableNT,t,e)}}function endReadableNT(e,t){u(\"endReadableNT\",e.endEmitted,e.length);if(!e.endEmitted&&e.length===0){e.endEmitted=true;t.readable=false;t.emit(\"end\");if(e.autoDestroy){var r=t._writableState;if(!r||r.autoDestroy&&r.finished){t.destroy()}}}}if(typeof Symbol===\"function\"){Readable.from=function(e,t){if(S===undefined){S=r(727)}return S(Readable,e,t)}}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++){if(e[r]===t)return r}return-1}},170:function(e,t,r){\"use strict\";e.exports=Transform;var n=r(646).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,a=n.ERR_MULTIPLE_CALLBACK,o=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,s=n.ERR_TRANSFORM_WITH_LENGTH_0;var f=r(403);r(782)(Transform,f);function afterTransform(e,t){var r=this._transformState;r.transforming=false;var n=r.writecb;if(n===null){return this.emit(\"error\",new a)}r.writechunk=null;r.writecb=null;if(t!=null)this.push(t);n(e);var i=this._readableState;i.reading=false;if(i.needReadable||i.length<i.highWaterMark){this._read(i.highWaterMark)}}function Transform(e){if(!(this instanceof Transform))return new Transform(e);f.call(this,e);this._transformState={afterTransform:afterTransform.bind(this),needTransform:false,transforming:false,writecb:null,writechunk:null,writeencoding:null};this._readableState.needReadable=true;this._readableState.sync=false;if(e){if(typeof e.transform===\"function\")this._transform=e.transform;if(typeof e.flush===\"function\")this._flush=e.flush}this.on(\"prefinish\",prefinish)}function prefinish(){var e=this;if(typeof this._flush===\"function\"&&!this._readableState.destroyed){this._flush((function(t,r){done(e,t,r)}))}else{done(this,null,null)}}Transform.prototype.push=function(e,t){this._transformState.needTransform=false;return f.prototype.push.call(this,e,t)};Transform.prototype._transform=function(e,t,r){r(new i(\"_transform()\"))};Transform.prototype._write=function(e,t,r){var n=this._transformState;n.writecb=r;n.writechunk=e;n.writeencoding=t;if(!n.transforming){var i=this._readableState;if(n.needTransform||i.needReadable||i.length<i.highWaterMark)this._read(i.highWaterMark)}};Transform.prototype._read=function(e){var t=this._transformState;if(t.writechunk!==null&&!t.transforming){t.transforming=true;this._transform(t.writechunk,t.writeencoding,t.afterTransform)}else{t.needTransform=true}};Transform.prototype._destroy=function(e,t){f.prototype._destroy.call(this,e,(function(e){t(e)}))};function done(e,t,r){if(t)return e.emit(\"error\",t);if(r!=null)e.push(r);if(e._writableState.length)throw new s;if(e._transformState.transforming)throw new o;return e.push(null)}},337:function(e,t,r){\"use strict\";e.exports=Writable;function WriteReq(e,t,r){this.chunk=e;this.encoding=t;this.callback=r;this.next=null}function CorkedRequest(e){var t=this;this.next=null;this.entry=null;this.finish=function(){onCorkedFinish(t,e)}}var n;Writable.WritableState=WritableState;var i={deprecate:r(769)};var a=r(678);var o=r(300).Buffer;var s=__webpack_require__.g.Uint8Array||function(){};function _uint8ArrayToBuffer(e){return o.from(e)}function _isUint8Array(e){return o.isBuffer(e)||e instanceof s}var f=r(25);var l=r(776),u=l.getHighWaterMark;var d=r(646).q,c=d.ERR_INVALID_ARG_TYPE,h=d.ERR_METHOD_NOT_IMPLEMENTED,p=d.ERR_MULTIPLE_CALLBACK,b=d.ERR_STREAM_CANNOT_PIPE,g=d.ERR_STREAM_DESTROYED,y=d.ERR_STREAM_NULL_VALUES,_=d.ERR_STREAM_WRITE_AFTER_END,v=d.ERR_UNKNOWN_ENCODING;var w=f.errorOrDestroy;r(782)(Writable,a);function nop(){}function WritableState(e,t,i){n=n||r(403);e=e||{};if(typeof i!==\"boolean\")i=t instanceof n;this.objectMode=!!e.objectMode;if(i)this.objectMode=this.objectMode||!!e.writableObjectMode;this.highWaterMark=u(this,e,\"writableHighWaterMark\",i);this.finalCalled=false;this.needDrain=false;this.ending=false;this.ended=false;this.finished=false;this.destroyed=false;var a=e.decodeStrings===false;this.decodeStrings=!a;this.defaultEncoding=e.defaultEncoding||\"utf8\";this.length=0;this.writing=false;this.corked=0;this.sync=true;this.bufferProcessing=false;this.onwrite=function(e){onwrite(t,e)};this.writecb=null;this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;this.pendingcb=0;this.prefinished=false;this.errorEmitted=false;this.emitClose=e.emitClose!==false;this.autoDestroy=!!e.autoDestroy;this.bufferedRequestCount=0;this.corkedRequestsFree=new CorkedRequest(this)}WritableState.prototype.getBuffer=function getBuffer(){var e=this.bufferedRequest;var t=[];while(e){t.push(e);e=e.next}return t};(function(){try{Object.defineProperty(WritableState.prototype,\"buffer\",{get:i.deprecate((function writableStateBufferGetter(){return this.getBuffer()}),\"_writableState.buffer is deprecated. Use _writableState.getBuffer \"+\"instead.\",\"DEP0003\")})}catch(e){}})();var m;if(typeof Symbol===\"function\"&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]===\"function\"){m=Function.prototype[Symbol.hasInstance];Object.defineProperty(Writable,Symbol.hasInstance,{value:function value(e){if(m.call(this,e))return true;if(this!==Writable)return false;return e&&e._writableState instanceof WritableState}})}else{m=function realHasInstance(e){return e instanceof this}}function Writable(e){n=n||r(403);var t=this instanceof n;if(!t&&!m.call(Writable,this))return new Writable(e);this._writableState=new WritableState(e,this,t);this.writable=true;if(e){if(typeof e.write===\"function\")this._write=e.write;if(typeof e.writev===\"function\")this._writev=e.writev;if(typeof e.destroy===\"function\")this._destroy=e.destroy;if(typeof e.final===\"function\")this._final=e.final}a.call(this)}Writable.prototype.pipe=function(){w(this,new b)};function writeAfterEnd(e,t){var r=new _;w(e,r);process.nextTick(t,r)}function validChunk(e,t,r,n){var i;if(r===null){i=new y}else if(typeof r!==\"string\"&&!t.objectMode){i=new c(\"chunk\",[\"string\",\"Buffer\"],r)}if(i){w(e,i);process.nextTick(n,i);return false}return true}Writable.prototype.write=function(e,t,r){var n=this._writableState;var i=false;var a=!n.objectMode&&_isUint8Array(e);if(a&&!o.isBuffer(e)){e=_uint8ArrayToBuffer(e)}if(typeof t===\"function\"){r=t;t=null}if(a)t=\"buffer\";else if(!t)t=n.defaultEncoding;if(typeof r!==\"function\")r=nop;if(n.ending)writeAfterEnd(this,r);else if(a||validChunk(this,n,e,r)){n.pendingcb++;i=writeOrBuffer(this,n,a,e,t,r)}return i};Writable.prototype.cork=function(){this._writableState.corked++};Writable.prototype.uncork=function(){var e=this._writableState;if(e.corked){e.corked--;if(!e.writing&&!e.corked&&!e.bufferProcessing&&e.bufferedRequest)clearBuffer(this,e)}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(e){if(typeof e===\"string\")e=e.toLowerCase();if(!([\"hex\",\"utf8\",\"utf-8\",\"ascii\",\"binary\",\"base64\",\"ucs2\",\"ucs-2\",\"utf16le\",\"utf-16le\",\"raw\"].indexOf((e+\"\").toLowerCase())>-1))throw new v(e);this._writableState.defaultEncoding=e;return this};Object.defineProperty(Writable.prototype,\"writableBuffer\",{enumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer()}});function decodeChunk(e,t,r){if(!e.objectMode&&e.decodeStrings!==false&&typeof t===\"string\"){t=o.from(t,r)}return t}Object.defineProperty(Writable.prototype,\"writableHighWaterMark\",{enumerable:false,get:function get(){return this._writableState.highWaterMark}});function writeOrBuffer(e,t,r,n,i,a){if(!r){var o=decodeChunk(t,n,i);if(n!==o){r=true;i=\"buffer\";n=o}}var s=t.objectMode?1:n.length;t.length+=s;var f=t.length<t.highWaterMark;if(!f)t.needDrain=true;if(t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:a,next:null};if(l){l.next=t.lastBufferedRequest}else{t.bufferedRequest=t.lastBufferedRequest}t.bufferedRequestCount+=1}else{doWrite(e,t,false,s,n,i,a)}return f}function doWrite(e,t,r,n,i,a,o){t.writelen=n;t.writecb=o;t.writing=true;t.sync=true;if(t.destroyed)t.onwrite(new g(\"write\"));else if(r)e._writev(i,t.onwrite);else e._write(i,a,t.onwrite);t.sync=false}function onwriteError(e,t,r,n,i){--t.pendingcb;if(r){process.nextTick(i,n);process.nextTick(finishMaybe,e,t);e._writableState.errorEmitted=true;w(e,n)}else{i(n);e._writableState.errorEmitted=true;w(e,n);finishMaybe(e,t)}}function onwriteStateUpdate(e){e.writing=false;e.writecb=null;e.length-=e.writelen;e.writelen=0}function onwrite(e,t){var r=e._writableState;var n=r.sync;var i=r.writecb;if(typeof i!==\"function\")throw new p;onwriteStateUpdate(r);if(t)onwriteError(e,r,n,t,i);else{var a=needFinish(r)||e.destroyed;if(!a&&!r.corked&&!r.bufferProcessing&&r.bufferedRequest){clearBuffer(e,r)}if(n){process.nextTick(afterWrite,e,r,a,i)}else{afterWrite(e,r,a,i)}}}function afterWrite(e,t,r,n){if(!r)onwriteDrain(e,t);t.pendingcb--;n();finishMaybe(e,t)}function onwriteDrain(e,t){if(t.length===0&&t.needDrain){t.needDrain=false;e.emit(\"drain\")}}function clearBuffer(e,t){t.bufferProcessing=true;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount;var i=new Array(n);var a=t.corkedRequestsFree;a.entry=r;var o=0;var s=true;while(r){i[o]=r;if(!r.isBuf)s=false;r=r.next;o+=1}i.allBuffers=s;doWrite(e,t,true,t.length,i,\"\",a.finish);t.pendingcb++;t.lastBufferedRequest=null;if(a.next){t.corkedRequestsFree=a.next;a.next=null}else{t.corkedRequestsFree=new CorkedRequest(t)}t.bufferedRequestCount=0}else{while(r){var f=r.chunk;var l=r.encoding;var u=r.callback;var d=t.objectMode?1:f.length;doWrite(e,t,false,d,f,l,u);r=r.next;t.bufferedRequestCount--;if(t.writing){break}}if(r===null)t.lastBufferedRequest=null}t.bufferedRequest=r;t.bufferProcessing=false}Writable.prototype._write=function(e,t,r){r(new h(\"_write()\"))};Writable.prototype._writev=null;Writable.prototype.end=function(e,t,r){var n=this._writableState;if(typeof e===\"function\"){r=e;e=null;t=null}else if(typeof t===\"function\"){r=t;t=null}if(e!==null&&e!==undefined)this.write(e,t);if(n.corked){n.corked=1;this.uncork()}if(!n.ending)endWritable(this,n,r);return this};Object.defineProperty(Writable.prototype,\"writableLength\",{enumerable:false,get:function get(){return this._writableState.length}});function needFinish(e){return e.ending&&e.length===0&&e.bufferedRequest===null&&!e.finished&&!e.writing}function callFinal(e,t){e._final((function(r){t.pendingcb--;if(r){w(e,r)}t.prefinished=true;e.emit(\"prefinish\");finishMaybe(e,t)}))}function prefinish(e,t){if(!t.prefinished&&!t.finalCalled){if(typeof e._final===\"function\"&&!t.destroyed){t.pendingcb++;t.finalCalled=true;process.nextTick(callFinal,e,t)}else{t.prefinished=true;e.emit(\"prefinish\")}}}function finishMaybe(e,t){var r=needFinish(t);if(r){prefinish(e,t);if(t.pendingcb===0){t.finished=true;e.emit(\"finish\");if(t.autoDestroy){var n=e._readableState;if(!n||n.autoDestroy&&n.endEmitted){e.destroy()}}}}return r}function endWritable(e,t,r){t.ending=true;finishMaybe(e,t);if(r){if(t.finished)process.nextTick(r);else e.once(\"finish\",r)}t.ended=true;e.writable=false}function onCorkedFinish(e,t,r){var n=e.entry;e.entry=null;while(n){var i=n.callback;t.pendingcb--;i(r);n=n.next}t.corkedRequestsFree.next=e}Object.defineProperty(Writable.prototype,\"destroyed\",{enumerable:false,get:function get(){if(this._writableState===undefined){return false}return this._writableState.destroyed},set:function set(e){if(!this._writableState){return}this._writableState.destroyed=e}});Writable.prototype.destroy=f.destroy;Writable.prototype._undestroy=f.undestroy;Writable.prototype._destroy=function(e,t){t(e)}},871:function(e,t,r){\"use strict\";var n;function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}var i=r(698);var a=Symbol(\"lastResolve\");var o=Symbol(\"lastReject\");var s=Symbol(\"error\");var f=Symbol(\"ended\");var l=Symbol(\"lastPromise\");var u=Symbol(\"handlePromise\");var d=Symbol(\"stream\");function createIterResult(e,t){return{value:e,done:t}}function readAndResolve(e){var t=e[a];if(t!==null){var r=e[d].read();if(r!==null){e[l]=null;e[a]=null;e[o]=null;t(createIterResult(r,false))}}}function onReadable(e){process.nextTick(readAndResolve,e)}function wrapForNext(e,t){return function(r,n){e.then((function(){if(t[f]){r(createIterResult(undefined,true));return}t[u](r,n)}),n)}}var c=Object.getPrototypeOf((function(){}));var h=Object.setPrototypeOf((n={get stream(){return this[d]},next:function next(){var e=this;var t=this[s];if(t!==null){return Promise.reject(t)}if(this[f]){return Promise.resolve(createIterResult(undefined,true))}if(this[d].destroyed){return new Promise((function(t,r){process.nextTick((function(){if(e[s]){r(e[s])}else{t(createIterResult(undefined,true))}}))}))}var r=this[l];var n;if(r){n=new Promise(wrapForNext(r,this))}else{var i=this[d].read();if(i!==null){return Promise.resolve(createIterResult(i,false))}n=new Promise(this[u])}this[l]=n;return n}},_defineProperty(n,Symbol.asyncIterator,(function(){return this})),_defineProperty(n,\"return\",(function _return(){var e=this;return new Promise((function(t,r){e[d].destroy(null,(function(e){if(e){r(e);return}t(createIterResult(undefined,true))}))}))})),n),c);var p=function createReadableStreamAsyncIterator(e){var t;var r=Object.create(h,(t={},_defineProperty(t,d,{value:e,writable:true}),_defineProperty(t,a,{value:null,writable:true}),_defineProperty(t,o,{value:null,writable:true}),_defineProperty(t,s,{value:null,writable:true}),_defineProperty(t,f,{value:e._readableState.endEmitted,writable:true}),_defineProperty(t,u,{value:function value(e,t){var n=r[d].read();if(n){r[l]=null;r[a]=null;r[o]=null;e(createIterResult(n,false))}else{r[a]=e;r[o]=t}},writable:true}),t));r[l]=null;i(e,(function(e){if(e&&e.code!==\"ERR_STREAM_PREMATURE_CLOSE\"){var t=r[o];if(t!==null){r[l]=null;r[a]=null;r[o]=null;t(e)}r[s]=e;return}var n=r[a];if(n!==null){r[l]=null;r[a]=null;r[o]=null;n(createIterResult(undefined,true))}r[f]=true}));e.on(\"readable\",onReadable.bind(null,r));return r};e.exports=p},379:function(e,t,r){\"use strict\";function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);if(t)n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}));r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};if(t%2){ownKeys(Object(r),true).forEach((function(t){_defineProperty(e,t,r[t])}))}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(e,Object.getOwnPropertyDescriptors(r))}else{ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}}return e}function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}function _classCallCheck(e,t){if(!(e instanceof t)){throw new TypeError(\"Cannot call a class as a function\")}}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||false;n.configurable=true;if(\"value\"in n)n.writable=true;Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){if(t)_defineProperties(e.prototype,t);if(r)_defineProperties(e,r);return e}var n=r(300),i=n.Buffer;var a=r(837),o=a.inspect;var s=o&&o.custom||\"inspect\";function copyBuffer(e,t,r){i.prototype.copy.call(e,t,r)}e.exports=function(){function BufferList(){_classCallCheck(this,BufferList);this.head=null;this.tail=null;this.length=0}_createClass(BufferList,[{key:\"push\",value:function push(e){var t={data:e,next:null};if(this.length>0)this.tail.next=t;else this.head=t;this.tail=t;++this.length}},{key:\"unshift\",value:function unshift(e){var t={data:e,next:this.head};if(this.length===0)this.tail=t;this.head=t;++this.length}},{key:\"shift\",value:function shift(){if(this.length===0)return;var e=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return e}},{key:\"clear\",value:function clear(){this.head=this.tail=null;this.length=0}},{key:\"join\",value:function join(e){if(this.length===0)return\"\";var t=this.head;var r=\"\"+t.data;while(t=t.next){r+=e+t.data}return r}},{key:\"concat\",value:function concat(e){if(this.length===0)return i.alloc(0);var t=i.allocUnsafe(e>>>0);var r=this.head;var n=0;while(r){copyBuffer(r.data,t,n);n+=r.data.length;r=r.next}return t}},{key:\"consume\",value:function consume(e,t){var r;if(e<this.head.data.length){r=this.head.data.slice(0,e);this.head.data=this.head.data.slice(e)}else if(e===this.head.data.length){r=this.shift()}else{r=t?this._getString(e):this._getBuffer(e)}return r}},{key:\"first\",value:function first(){return this.head.data}},{key:\"_getString\",value:function _getString(e){var t=this.head;var r=1;var n=t.data;e-=n.length;while(t=t.next){var i=t.data;var a=e>i.length?i.length:e;if(a===i.length)n+=i;else n+=i.slice(0,e);e-=a;if(e===0){if(a===i.length){++r;if(t.next)this.head=t.next;else this.head=this.tail=null}else{this.head=t;t.data=i.slice(a)}break}++r}this.length-=r;return n}},{key:\"_getBuffer\",value:function _getBuffer(e){var t=i.allocUnsafe(e);var r=this.head;var n=1;r.data.copy(t);e-=r.data.length;while(r=r.next){var a=r.data;var o=e>a.length?a.length:e;a.copy(t,t.length-e,0,o);e-=o;if(e===0){if(o===a.length){++n;if(r.next)this.head=r.next;else this.head=this.tail=null}else{this.head=r;r.data=a.slice(o)}break}++n}this.length-=n;return t}},{key:s,value:function value(e,t){return o(this,_objectSpread({},t,{depth:0,customInspect:false}))}}]);return BufferList}()},25:function(e){\"use strict\";function destroy(e,t){var r=this;var n=this._readableState&&this._readableState.destroyed;var i=this._writableState&&this._writableState.destroyed;if(n||i){if(t){t(e)}else if(e){if(!this._writableState){process.nextTick(emitErrorNT,this,e)}else if(!this._writableState.errorEmitted){this._writableState.errorEmitted=true;process.nextTick(emitErrorNT,this,e)}}return this}if(this._readableState){this._readableState.destroyed=true}if(this._writableState){this._writableState.destroyed=true}this._destroy(e||null,(function(e){if(!t&&e){if(!r._writableState){process.nextTick(emitErrorAndCloseNT,r,e)}else if(!r._writableState.errorEmitted){r._writableState.errorEmitted=true;process.nextTick(emitErrorAndCloseNT,r,e)}else{process.nextTick(emitCloseNT,r)}}else if(t){process.nextTick(emitCloseNT,r);t(e)}else{process.nextTick(emitCloseNT,r)}}));return this}function emitErrorAndCloseNT(e,t){emitErrorNT(e,t);emitCloseNT(e)}function emitCloseNT(e){if(e._writableState&&!e._writableState.emitClose)return;if(e._readableState&&!e._readableState.emitClose)return;e.emit(\"close\")}function undestroy(){if(this._readableState){this._readableState.destroyed=false;this._readableState.reading=false;this._readableState.ended=false;this._readableState.endEmitted=false}if(this._writableState){this._writableState.destroyed=false;this._writableState.ended=false;this._writableState.ending=false;this._writableState.finalCalled=false;this._writableState.prefinished=false;this._writableState.finished=false;this._writableState.errorEmitted=false}}function emitErrorNT(e,t){e.emit(\"error\",t)}function errorOrDestroy(e,t){var r=e._readableState;var n=e._writableState;if(r&&r.autoDestroy||n&&n.autoDestroy)e.destroy(t);else e.emit(\"error\",t)}e.exports={destroy:destroy,undestroy:undestroy,errorOrDestroy:errorOrDestroy}},698:function(e,t,r){\"use strict\";var n=r(646).q.ERR_STREAM_PREMATURE_CLOSE;function once(e){var t=false;return function(){if(t)return;t=true;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++){n[i]=arguments[i]}e.apply(this,n)}}function noop(){}function isRequest(e){return e.setHeader&&typeof e.abort===\"function\"}function eos(e,t,r){if(typeof t===\"function\")return eos(e,null,t);if(!t)t={};r=once(r||noop);var i=t.readable||t.readable!==false&&e.readable;var a=t.writable||t.writable!==false&&e.writable;var o=function onlegacyfinish(){if(!e.writable)f()};var s=e._writableState&&e._writableState.finished;var f=function onfinish(){a=false;s=true;if(!i)r.call(e)};var l=e._readableState&&e._readableState.endEmitted;var u=function onend(){i=false;l=true;if(!a)r.call(e)};var d=function onerror(t){r.call(e,t)};var c=function onclose(){var t;if(i&&!l){if(!e._readableState||!e._readableState.ended)t=new n;return r.call(e,t)}if(a&&!s){if(!e._writableState||!e._writableState.ended)t=new n;return r.call(e,t)}};var h=function onrequest(){e.req.on(\"finish\",f)};if(isRequest(e)){e.on(\"complete\",f);e.on(\"abort\",c);if(e.req)h();else e.on(\"request\",h)}else if(a&&!e._writableState){e.on(\"end\",o);e.on(\"close\",o)}e.on(\"end\",u);e.on(\"finish\",f);if(t.error!==false)e.on(\"error\",d);e.on(\"close\",c);return function(){e.removeListener(\"complete\",f);e.removeListener(\"abort\",c);e.removeListener(\"request\",h);if(e.req)e.req.removeListener(\"finish\",f);e.removeListener(\"end\",o);e.removeListener(\"close\",o);e.removeListener(\"finish\",f);e.removeListener(\"end\",u);e.removeListener(\"error\",d);e.removeListener(\"close\",c)}}e.exports=eos},727:function(e,t,r){\"use strict\";function asyncGeneratorStep(e,t,r,n,i,a,o){try{var s=e[a](o);var f=s.value}catch(e){r(e);return}if(s.done){t(f)}else{Promise.resolve(f).then(n,i)}}function _asyncToGenerator(e){return function(){var t=this,r=arguments;return new Promise((function(n,i){var a=e.apply(t,r);function _next(e){asyncGeneratorStep(a,n,i,_next,_throw,\"next\",e)}function _throw(e){asyncGeneratorStep(a,n,i,_next,_throw,\"throw\",e)}_next(undefined)}))}}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);if(t)n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}));r.push.apply(r,n)}return r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};if(t%2){ownKeys(Object(r),true).forEach((function(t){_defineProperty(e,t,r[t])}))}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(e,Object.getOwnPropertyDescriptors(r))}else{ownKeys(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}}return e}function _defineProperty(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}var n=r(646).q.ERR_INVALID_ARG_TYPE;function from(e,t,r){var i;if(t&&typeof t.next===\"function\"){i=t}else if(t&&t[Symbol.asyncIterator])i=t[Symbol.asyncIterator]();else if(t&&t[Symbol.iterator])i=t[Symbol.iterator]();else throw new n(\"iterable\",[\"Iterable\"],t);var a=new e(_objectSpread({objectMode:true},r));var o=false;a._read=function(){if(!o){o=true;next()}};function next(){return _next2.apply(this,arguments)}function _next2(){_next2=_asyncToGenerator((function*(){try{var e=yield i.next(),t=e.value,r=e.done;if(r){a.push(null)}else if(a.push(yield t)){next()}else{o=false}}catch(e){a.destroy(e)}}));return _next2.apply(this,arguments)}return a}e.exports=from},442:function(e,t,r){\"use strict\";var n;function once(e){var t=false;return function(){if(t)return;t=true;e.apply(void 0,arguments)}}var i=r(646).q,a=i.ERR_MISSING_ARGS,o=i.ERR_STREAM_DESTROYED;function noop(e){if(e)throw e}function isRequest(e){return e.setHeader&&typeof e.abort===\"function\"}function destroyer(e,t,i,a){a=once(a);var s=false;e.on(\"close\",(function(){s=true}));if(n===undefined)n=r(698);n(e,{readable:t,writable:i},(function(e){if(e)return a(e);s=true;a()}));var f=false;return function(t){if(s)return;if(f)return;f=true;if(isRequest(e))return e.abort();if(typeof e.destroy===\"function\")return e.destroy();a(t||new o(\"pipe\"))}}function call(e){e()}function pipe(e,t){return e.pipe(t)}function popCallback(e){if(!e.length)return noop;if(typeof e[e.length-1]!==\"function\")return noop;return e.pop()}function pipeline(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++){t[r]=arguments[r]}var n=popCallback(t);if(Array.isArray(t[0]))t=t[0];if(t.length<2){throw new a(\"streams\")}var i;var o=t.map((function(e,r){var a=r<t.length-1;var s=r>0;return destroyer(e,a,s,(function(e){if(!i)i=e;if(e)o.forEach(call);if(a)return;o.forEach(call);n(i)}))}));return t.reduce(pipe)}e.exports=pipeline},776:function(e,t,r){\"use strict\";var n=r(646).q.ERR_INVALID_OPT_VALUE;function highWaterMarkFrom(e,t,r){return e.highWaterMark!=null?e.highWaterMark:t?e[r]:null}function getHighWaterMark(e,t,r,i){var a=highWaterMarkFrom(t,i,r);if(a!=null){if(!(isFinite(a)&&Math.floor(a)===a)||a<0){var o=i?r:\"highWaterMark\";throw new n(o,a)}return Math.floor(a)}return e.objectMode?16:16*1024}e.exports={getHighWaterMark:getHighWaterMark}},678:function(e,t,r){e.exports=r(781)},55:function(e,t,r){var n=r(300);var i=n.Buffer;function copyProps(e,t){for(var r in e){t[r]=e[r]}}if(i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow){e.exports=n}else{copyProps(n,t);t.Buffer=SafeBuffer}function SafeBuffer(e,t,r){return i(e,t,r)}SafeBuffer.prototype=Object.create(i.prototype);copyProps(i,SafeBuffer);SafeBuffer.from=function(e,t,r){if(typeof e===\"number\"){throw new TypeError(\"Argument must not be a number\")}return i(e,t,r)};SafeBuffer.alloc=function(e,t,r){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}var n=i(e);if(t!==undefined){if(typeof r===\"string\"){n.fill(t,r)}else{n.fill(t)}}else{n.fill(0)}return n};SafeBuffer.allocUnsafe=function(e){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}return i(e)};SafeBuffer.allocUnsafeSlow=function(e){if(typeof e!==\"number\"){throw new TypeError(\"Argument must be a number\")}return n.SlowBuffer(e)}},173:function(e,t,r){e.exports=Stream;var n=r(361).EventEmitter;var i=r(782);i(Stream,n);Stream.Readable=r(709);Stream.Writable=r(337);Stream.Duplex=r(403);Stream.Transform=r(170);Stream.PassThrough=r(889);Stream.finished=r(698);Stream.pipeline=r(442);Stream.Stream=Stream;function Stream(){n.call(this)}Stream.prototype.pipe=function(e,t){var r=this;function ondata(t){if(e.writable){if(false===e.write(t)&&r.pause){r.pause()}}}r.on(\"data\",ondata);function ondrain(){if(r.readable&&r.resume){r.resume()}}e.on(\"drain\",ondrain);if(!e._isStdio&&(!t||t.end!==false)){r.on(\"end\",onend);r.on(\"close\",onclose)}var i=false;function onend(){if(i)return;i=true;e.end()}function onclose(){if(i)return;i=true;if(typeof e.destroy===\"function\")e.destroy()}function onerror(e){cleanup();if(n.listenerCount(this,\"error\")===0){throw e}}r.on(\"error\",onerror);e.on(\"error\",onerror);function cleanup(){r.removeListener(\"data\",ondata);e.removeListener(\"drain\",ondrain);r.removeListener(\"end\",onend);r.removeListener(\"close\",onclose);r.removeListener(\"error\",onerror);e.removeListener(\"error\",onerror);r.removeListener(\"end\",cleanup);r.removeListener(\"close\",cleanup);e.removeListener(\"close\",cleanup)}r.on(\"end\",cleanup);r.on(\"close\",cleanup);e.on(\"close\",cleanup);e.emit(\"pipe\",r);return e}},704:function(e,t,r){\"use strict\";var n=r(55).Buffer;var i=n.isEncoding||function(e){e=\"\"+e;switch(e&&e.toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":case\"raw\":return true;default:return false}};function _normalizeEncoding(e){if(!e)return\"utf8\";var t;while(true){switch(e){case\"utf8\":case\"utf-8\":return\"utf8\";case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return\"utf16le\";case\"latin1\":case\"binary\":return\"latin1\";case\"base64\":case\"ascii\":case\"hex\":return e;default:if(t)return;e=(\"\"+e).toLowerCase();t=true}}}function normalizeEncoding(e){var t=_normalizeEncoding(e);if(typeof t!==\"string\"&&(n.isEncoding===i||!i(e)))throw new Error(\"Unknown encoding: \"+e);return t||e}t.s=StringDecoder;function StringDecoder(e){this.encoding=normalizeEncoding(e);var t;switch(this.encoding){case\"utf16le\":this.text=utf16Text;this.end=utf16End;t=4;break;case\"utf8\":this.fillLast=utf8FillLast;t=4;break;case\"base64\":this.text=base64Text;this.end=base64End;t=3;break;default:this.write=simpleWrite;this.end=simpleEnd;return}this.lastNeed=0;this.lastTotal=0;this.lastChar=n.allocUnsafe(t)}StringDecoder.prototype.write=function(e){if(e.length===0)return\"\";var t;var r;if(this.lastNeed){t=this.fillLast(e);if(t===undefined)return\"\";r=this.lastNeed;this.lastNeed=0}else{r=0}if(r<e.length)return t?t+this.text(e,r):this.text(e,r);return t||\"\"};StringDecoder.prototype.end=utf8End;StringDecoder.prototype.text=utf8Text;StringDecoder.prototype.fillLast=function(e){if(this.lastNeed<=e.length){e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length);this.lastNeed-=e.length};function utf8CheckByte(e){if(e<=127)return 0;else if(e>>5===6)return 2;else if(e>>4===14)return 3;else if(e>>3===30)return 4;return e>>6===2?-1:-2}function utf8CheckIncomplete(e,t,r){var n=t.length-1;if(n<r)return 0;var i=utf8CheckByte(t[n]);if(i>=0){if(i>0)e.lastNeed=i-1;return i}if(--n<r||i===-2)return 0;i=utf8CheckByte(t[n]);if(i>=0){if(i>0)e.lastNeed=i-2;return i}if(--n<r||i===-2)return 0;i=utf8CheckByte(t[n]);if(i>=0){if(i>0){if(i===2)i=0;else e.lastNeed=i-3}return i}return 0}function utf8CheckExtraBytes(e,t,r){if((t[0]&192)!==128){e.lastNeed=0;return\"�\"}if(e.lastNeed>1&&t.length>1){if((t[1]&192)!==128){e.lastNeed=1;return\"�\"}if(e.lastNeed>2&&t.length>2){if((t[2]&192)!==128){e.lastNeed=2;return\"�\"}}}}function utf8FillLast(e){var t=this.lastTotal-this.lastNeed;var r=utf8CheckExtraBytes(this,e,t);if(r!==undefined)return r;if(this.lastNeed<=e.length){e.copy(this.lastChar,t,0,this.lastNeed);return this.lastChar.toString(this.encoding,0,this.lastTotal)}e.copy(this.lastChar,t,0,e.length);this.lastNeed-=e.length}function utf8Text(e,t){var r=utf8CheckIncomplete(this,e,t);if(!this.lastNeed)return e.toString(\"utf8\",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);e.copy(this.lastChar,0,n);return e.toString(\"utf8\",t,n)}function utf8End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed)return t+\"�\";return t}function utf16Text(e,t){if((e.length-t)%2===0){var r=e.toString(\"utf16le\",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319){this.lastNeed=2;this.lastTotal=4;this.lastChar[0]=e[e.length-2];this.lastChar[1]=e[e.length-1];return r.slice(0,-1)}}return r}this.lastNeed=1;this.lastTotal=2;this.lastChar[0]=e[e.length-1];return e.toString(\"utf16le\",t,e.length-1)}function utf16End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString(\"utf16le\",0,r)}return t}function base64Text(e,t){var r=(e.length-t)%3;if(r===0)return e.toString(\"base64\",t);this.lastNeed=3-r;this.lastTotal=3;if(r===1){this.lastChar[0]=e[e.length-1]}else{this.lastChar[0]=e[e.length-2];this.lastChar[1]=e[e.length-1]}return e.toString(\"base64\",t,e.length-r)}function base64End(e){var t=e&&e.length?this.write(e):\"\";if(this.lastNeed)return t+this.lastChar.toString(\"base64\",0,3-this.lastNeed);return t}function simpleWrite(e){return e.toString(this.encoding)}function simpleEnd(e){return e&&e.length?this.write(e):\"\"}},769:function(e){e.exports=deprecate;function deprecate(e,t){if(config(\"noDeprecation\")){return e}var r=false;function deprecated(){if(!r){if(config(\"throwDeprecation\")){throw new Error(t)}else if(config(\"traceDeprecation\")){console.trace(t)}else{console.warn(t)}r=true}return e.apply(this,arguments)}return deprecated}function config(e){try{if(!__webpack_require__.g.localStorage)return false}catch(e){return false}var t=__webpack_require__.g.localStorage[e];if(null==t)return false;return String(t).toLowerCase()===\"true\"}},300:function(e){\"use strict\";e.exports=__webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")},361:function(e){\"use strict\";e.exports=__webpack_require__(/*! events */ \"./node_modules/events/events.js\")},781:function(e){\"use strict\";e.exports=(__webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter)},837:function(e){\"use strict\";e.exports=__webpack_require__(/*! util */ \"./node_modules/next/dist/compiled/util/util.js\")}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var a=true;try{e[r](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(173);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/stream-browserify/index.js\n"));

/***/ }),

/***/ "?9b2c":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* (ignored) */

/***/ }),

/***/ "./node_modules/next/dist/compiled/@vercel/og/index.node.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@vercel/og/index.node.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageResponse: function() { return /* binding */ ImageResponse; },\n/* harmony export */   unstable_createNodejsStream: function() { return /* binding */ unstable_createNodejsStream; }\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"./node_modules/next/dist/compiled/stream-browserify/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"?9b2c\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target, mod));\n\n// node_modules/.pnpm/tiny-inflate@1.0.3/node_modules/tiny-inflate/index.js\nvar require_tiny_inflate = __commonJS({\n  \"node_modules/.pnpm/tiny-inflate@1.0.3/node_modules/tiny-inflate/index.js\"(exports2, module) {\n    var TINF_OK = 0;\n    var TINF_DATA_ERROR = -3;\n    function Tree() {\n      this.table = new Uint16Array(16);\n      this.trans = new Uint16Array(288);\n    }\n    function Data(source, dest) {\n      this.source = source;\n      this.sourceIndex = 0;\n      this.tag = 0;\n      this.bitcount = 0;\n      this.dest = dest;\n      this.destLen = 0;\n      this.ltree = new Tree();\n      this.dtree = new Tree();\n    }\n    var sltree = new Tree();\n    var sdtree = new Tree();\n    var length_bits = new Uint8Array(30);\n    var length_base = new Uint16Array(30);\n    var dist_bits = new Uint8Array(30);\n    var dist_base = new Uint16Array(30);\n    var clcidx = new Uint8Array([\n      16,\n      17,\n      18,\n      0,\n      8,\n      7,\n      9,\n      6,\n      10,\n      5,\n      11,\n      4,\n      12,\n      3,\n      13,\n      2,\n      14,\n      1,\n      15\n    ]);\n    var code_tree = new Tree();\n    var lengths = new Uint8Array(288 + 32);\n    function tinf_build_bits_base(bits2, base, delta, first) {\n      var i, sum;\n      for (i = 0; i < delta; ++i)\n        bits2[i] = 0;\n      for (i = 0; i < 30 - delta; ++i)\n        bits2[i + delta] = i / delta | 0;\n      for (sum = first, i = 0; i < 30; ++i) {\n        base[i] = sum;\n        sum += 1 << bits2[i];\n      }\n    }\n    function tinf_build_fixed_trees(lt, dt2) {\n      var i;\n      for (i = 0; i < 7; ++i)\n        lt.table[i] = 0;\n      lt.table[7] = 24;\n      lt.table[8] = 152;\n      lt.table[9] = 112;\n      for (i = 0; i < 24; ++i)\n        lt.trans[i] = 256 + i;\n      for (i = 0; i < 144; ++i)\n        lt.trans[24 + i] = i;\n      for (i = 0; i < 8; ++i)\n        lt.trans[24 + 144 + i] = 280 + i;\n      for (i = 0; i < 112; ++i)\n        lt.trans[24 + 144 + 8 + i] = 144 + i;\n      for (i = 0; i < 5; ++i)\n        dt2.table[i] = 0;\n      dt2.table[5] = 32;\n      for (i = 0; i < 32; ++i)\n        dt2.trans[i] = i;\n    }\n    var offs = new Uint16Array(16);\n    function tinf_build_tree(t, lengths2, off, num) {\n      var i, sum;\n      for (i = 0; i < 16; ++i)\n        t.table[i] = 0;\n      for (i = 0; i < num; ++i)\n        t.table[lengths2[off + i]]++;\n      t.table[0] = 0;\n      for (sum = 0, i = 0; i < 16; ++i) {\n        offs[i] = sum;\n        sum += t.table[i];\n      }\n      for (i = 0; i < num; ++i) {\n        if (lengths2[off + i])\n          t.trans[offs[lengths2[off + i]]++] = i;\n      }\n    }\n    function tinf_getbit(d) {\n      if (!d.bitcount--) {\n        d.tag = d.source[d.sourceIndex++];\n        d.bitcount = 7;\n      }\n      var bit = d.tag & 1;\n      d.tag >>>= 1;\n      return bit;\n    }\n    function tinf_read_bits(d, num, base) {\n      if (!num)\n        return base;\n      while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n      }\n      var val = d.tag & 65535 >>> 16 - num;\n      d.tag >>>= num;\n      d.bitcount -= num;\n      return val + base;\n    }\n    function tinf_decode_symbol(d, t) {\n      while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n      }\n      var sum = 0, cur = 0, len = 0;\n      var tag = d.tag;\n      do {\n        cur = 2 * cur + (tag & 1);\n        tag >>>= 1;\n        ++len;\n        sum += t.table[len];\n        cur -= t.table[len];\n      } while (cur >= 0);\n      d.tag = tag;\n      d.bitcount -= len;\n      return t.trans[sum + cur];\n    }\n    function tinf_decode_trees(d, lt, dt2) {\n      var hlit, hdist, hclen;\n      var i, num, length;\n      hlit = tinf_read_bits(d, 5, 257);\n      hdist = tinf_read_bits(d, 5, 1);\n      hclen = tinf_read_bits(d, 4, 4);\n      for (i = 0; i < 19; ++i)\n        lengths[i] = 0;\n      for (i = 0; i < hclen; ++i) {\n        var clen = tinf_read_bits(d, 3, 0);\n        lengths[clcidx[i]] = clen;\n      }\n      tinf_build_tree(code_tree, lengths, 0, 19);\n      for (num = 0; num < hlit + hdist; ) {\n        var sym = tinf_decode_symbol(d, code_tree);\n        switch (sym) {\n          case 16:\n            var prev = lengths[num - 1];\n            for (length = tinf_read_bits(d, 2, 3); length; --length) {\n              lengths[num++] = prev;\n            }\n            break;\n          case 17:\n            for (length = tinf_read_bits(d, 3, 3); length; --length) {\n              lengths[num++] = 0;\n            }\n            break;\n          case 18:\n            for (length = tinf_read_bits(d, 7, 11); length; --length) {\n              lengths[num++] = 0;\n            }\n            break;\n          default:\n            lengths[num++] = sym;\n            break;\n        }\n      }\n      tinf_build_tree(lt, lengths, 0, hlit);\n      tinf_build_tree(dt2, lengths, hlit, hdist);\n    }\n    function tinf_inflate_block_data(d, lt, dt2) {\n      while (1) {\n        var sym = tinf_decode_symbol(d, lt);\n        if (sym === 256) {\n          return TINF_OK;\n        }\n        if (sym < 256) {\n          d.dest[d.destLen++] = sym;\n        } else {\n          var length, dist, offs2;\n          var i;\n          sym -= 257;\n          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n          dist = tinf_decode_symbol(d, dt2);\n          offs2 = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n          for (i = offs2; i < offs2 + length; ++i) {\n            d.dest[d.destLen++] = d.dest[i];\n          }\n        }\n      }\n    }\n    function tinf_inflate_uncompressed_block(d) {\n      var length, invlength;\n      var i;\n      while (d.bitcount > 8) {\n        d.sourceIndex--;\n        d.bitcount -= 8;\n      }\n      length = d.source[d.sourceIndex + 1];\n      length = 256 * length + d.source[d.sourceIndex];\n      invlength = d.source[d.sourceIndex + 3];\n      invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n      if (length !== (~invlength & 65535))\n        return TINF_DATA_ERROR;\n      d.sourceIndex += 4;\n      for (i = length; i; --i)\n        d.dest[d.destLen++] = d.source[d.sourceIndex++];\n      d.bitcount = 0;\n      return TINF_OK;\n    }\n    function tinf_uncompress(source, dest) {\n      var d = new Data(source, dest);\n      var bfinal, btype, res;\n      do {\n        bfinal = tinf_getbit(d);\n        btype = tinf_read_bits(d, 2, 0);\n        switch (btype) {\n          case 0:\n            res = tinf_inflate_uncompressed_block(d);\n            break;\n          case 1:\n            res = tinf_inflate_block_data(d, sltree, sdtree);\n            break;\n          case 2:\n            tinf_decode_trees(d, d.ltree, d.dtree);\n            res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n            break;\n          default:\n            res = TINF_DATA_ERROR;\n        }\n        if (res !== TINF_OK)\n          throw new Error(\"Data error\");\n      } while (!bfinal);\n      if (d.destLen < d.dest.length) {\n        if (typeof d.dest.slice === \"function\")\n          return d.dest.slice(0, d.destLen);\n        else\n          return d.dest.subarray(0, d.destLen);\n      }\n      return d.dest;\n    }\n    tinf_build_fixed_trees(sltree, sdtree);\n    tinf_build_bits_base(length_bits, length_base, 4, 3);\n    tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n    length_bits[28] = 0;\n    length_base[28] = 258;\n    module.exports = tinf_uncompress;\n  }\n});\n\n// node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/swap.js\nvar require_swap = __commonJS({\n  \"node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/swap.js\"(exports2, module) {\n    var isBigEndian = new Uint8Array(new Uint32Array([305419896]).buffer)[0] === 18;\n    var swap = (b, n, m) => {\n      let i = b[n];\n      b[n] = b[m];\n      b[m] = i;\n    };\n    var swap32 = (array) => {\n      const len = array.length;\n      for (let i = 0; i < len; i += 4) {\n        swap(array, i, i + 3);\n        swap(array, i + 1, i + 2);\n      }\n    };\n    var swap32LE = (array) => {\n      if (isBigEndian) {\n        swap32(array);\n      }\n    };\n    module.exports = {\n      swap32LE\n    };\n  }\n});\n\n// node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/index.js\nvar require_unicode_trie = __commonJS({\n  \"node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/index.js\"(exports2, module) {\n    var inflate = require_tiny_inflate();\n    var { swap32LE } = require_swap();\n    var SHIFT_1 = 6 + 5;\n    var SHIFT_2 = 5;\n    var SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n    var OMITTED_BMP_INDEX_1_LENGTH = 65536 >> SHIFT_1;\n    var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n    var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n    var INDEX_SHIFT = 2;\n    var DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n    var DATA_MASK = DATA_BLOCK_LENGTH - 1;\n    var LSCP_INDEX_2_OFFSET = 65536 >> SHIFT_2;\n    var LSCP_INDEX_2_LENGTH = 1024 >> SHIFT_2;\n    var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n    var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\n    var UTF8_2B_INDEX_2_LENGTH = 2048 >> 6;\n    var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n    var DATA_GRANULARITY = 1 << INDEX_SHIFT;\n    var UnicodeTrie = class {\n      constructor(data) {\n        const isBuffer = typeof data.readUInt32BE === \"function\" && typeof data.slice === \"function\";\n        if (isBuffer || data instanceof Uint8Array) {\n          let uncompressedLength;\n          if (isBuffer) {\n            this.highStart = data.readUInt32LE(0);\n            this.errorValue = data.readUInt32LE(4);\n            uncompressedLength = data.readUInt32LE(8);\n            data = data.slice(12);\n          } else {\n            const view = new DataView(data.buffer);\n            this.highStart = view.getUint32(0, true);\n            this.errorValue = view.getUint32(4, true);\n            uncompressedLength = view.getUint32(8, true);\n            data = data.subarray(12);\n          }\n          data = inflate(data, new Uint8Array(uncompressedLength));\n          data = inflate(data, new Uint8Array(uncompressedLength));\n          swap32LE(data);\n          this.data = new Uint32Array(data.buffer);\n        } else {\n          ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);\n        }\n      }\n      get(codePoint) {\n        let index;\n        if (codePoint < 0 || codePoint > 1114111) {\n          return this.errorValue;\n        }\n        if (codePoint < 55296 || codePoint > 56319 && codePoint <= 65535) {\n          index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n          return this.data[index];\n        }\n        if (codePoint <= 65535) {\n          index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 55296 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n          return this.data[index];\n        }\n        if (codePoint < this.highStart) {\n          index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];\n          index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];\n          index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n          return this.data[index];\n        }\n        return this.data[this.data.length - DATA_GRANULARITY];\n      }\n    };\n    module.exports = UnicodeTrie;\n  }\n});\n\n// node_modules/.pnpm/base64-js@0.0.8/node_modules/base64-js/lib/b64.js\nvar require_b64 = __commonJS({\n  \"node_modules/.pnpm/base64-js@0.0.8/node_modules/base64-js/lib/b64.js\"(exports2) {\n    var lookup = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    (function(exports3) {\n      \"use strict\";\n      var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n      var PLUS = \"+\".charCodeAt(0);\n      var SLASH = \"/\".charCodeAt(0);\n      var NUMBER = \"0\".charCodeAt(0);\n      var LOWER = \"a\".charCodeAt(0);\n      var UPPER = \"A\".charCodeAt(0);\n      var PLUS_URL_SAFE = \"-\".charCodeAt(0);\n      var SLASH_URL_SAFE = \"_\".charCodeAt(0);\n      function decode2(elt) {\n        var code = elt.charCodeAt(0);\n        if (code === PLUS || code === PLUS_URL_SAFE)\n          return 62;\n        if (code === SLASH || code === SLASH_URL_SAFE)\n          return 63;\n        if (code < NUMBER)\n          return -1;\n        if (code < NUMBER + 10)\n          return code - NUMBER + 26 + 26;\n        if (code < UPPER + 26)\n          return code - UPPER;\n        if (code < LOWER + 26)\n          return code - LOWER + 26;\n      }\n      function b64ToByteArray(b64) {\n        var i, j, l, tmp, placeHolders, arr;\n        if (b64.length % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        var len = b64.length;\n        placeHolders = b64.charAt(len - 2) === \"=\" ? 2 : b64.charAt(len - 1) === \"=\" ? 1 : 0;\n        arr = new Arr(b64.length * 3 / 4 - placeHolders);\n        l = placeHolders > 0 ? b64.length - 4 : b64.length;\n        var L = 0;\n        function push(v) {\n          arr[L++] = v;\n        }\n        for (i = 0, j = 0; i < l; i += 4, j += 3) {\n          tmp = decode2(b64.charAt(i)) << 18 | decode2(b64.charAt(i + 1)) << 12 | decode2(b64.charAt(i + 2)) << 6 | decode2(b64.charAt(i + 3));\n          push((tmp & 16711680) >> 16);\n          push((tmp & 65280) >> 8);\n          push(tmp & 255);\n        }\n        if (placeHolders === 2) {\n          tmp = decode2(b64.charAt(i)) << 2 | decode2(b64.charAt(i + 1)) >> 4;\n          push(tmp & 255);\n        } else if (placeHolders === 1) {\n          tmp = decode2(b64.charAt(i)) << 10 | decode2(b64.charAt(i + 1)) << 4 | decode2(b64.charAt(i + 2)) >> 2;\n          push(tmp >> 8 & 255);\n          push(tmp & 255);\n        }\n        return arr;\n      }\n      function uint8ToBase64(uint8) {\n        var i, extraBytes = uint8.length % 3, output = \"\", temp, length;\n        function encode(num) {\n          return lookup.charAt(num);\n        }\n        function tripletToBase64(num) {\n          return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);\n        }\n        for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n          temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n          output += tripletToBase64(temp);\n        }\n        switch (extraBytes) {\n          case 1:\n            temp = uint8[uint8.length - 1];\n            output += encode(temp >> 2);\n            output += encode(temp << 4 & 63);\n            output += \"==\";\n            break;\n          case 2:\n            temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n            output += encode(temp >> 10);\n            output += encode(temp >> 4 & 63);\n            output += encode(temp << 2 & 63);\n            output += \"=\";\n            break;\n        }\n        return output;\n      }\n      exports3.toByteArray = b64ToByteArray;\n      exports3.fromByteArray = uint8ToBase64;\n    })(typeof exports2 === \"undefined\" ? exports2.base64js = {} : exports2);\n  }\n});\n\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/parse.js\nvar require_parse = __commonJS({\n  \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/parse.js\"(exports2, module) {\n    var openParentheses = \"(\".charCodeAt(0);\n    var closeParentheses = \")\".charCodeAt(0);\n    var singleQuote = \"'\".charCodeAt(0);\n    var doubleQuote = '\"'.charCodeAt(0);\n    var backslash = \"\\\\\".charCodeAt(0);\n    var slash = \"/\".charCodeAt(0);\n    var comma = \",\".charCodeAt(0);\n    var colon = \":\".charCodeAt(0);\n    var star = \"*\".charCodeAt(0);\n    var uLower = \"u\".charCodeAt(0);\n    var uUpper = \"U\".charCodeAt(0);\n    var plus = \"+\".charCodeAt(0);\n    var isUnicodeRange = /^[a-f0-9?-]+$/i;\n    module.exports = function(input) {\n      var tokens = [];\n      var value = input;\n      var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;\n      var pos = 0;\n      var code = value.charCodeAt(pos);\n      var max2 = value.length;\n      var stack = [{ nodes: tokens }];\n      var balanced = 0;\n      var parent;\n      var name = \"\";\n      var before = \"\";\n      var after = \"\";\n      while (pos < max2) {\n        if (code <= 32) {\n          next = pos;\n          do {\n            next += 1;\n            code = value.charCodeAt(next);\n          } while (code <= 32);\n          token = value.slice(pos, next);\n          prev = tokens[tokens.length - 1];\n          if (code === closeParentheses && balanced) {\n            after = token;\n          } else if (prev && prev.type === \"div\") {\n            prev.after = token;\n            prev.sourceEndIndex += token.length;\n          } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === \"function\" && parent.value !== \"calc\")) {\n            before = token;\n          } else {\n            tokens.push({\n              type: \"space\",\n              sourceIndex: pos,\n              sourceEndIndex: next,\n              value: token\n            });\n          }\n          pos = next;\n        } else if (code === singleQuote || code === doubleQuote) {\n          next = pos;\n          quote = code === singleQuote ? \"'\" : '\"';\n          token = {\n            type: \"string\",\n            sourceIndex: pos,\n            quote\n          };\n          do {\n            escape = false;\n            next = value.indexOf(quote, next + 1);\n            if (~next) {\n              escapePos = next;\n              while (value.charCodeAt(escapePos - 1) === backslash) {\n                escapePos -= 1;\n                escape = !escape;\n              }\n            } else {\n              value += quote;\n              next = value.length - 1;\n              token.unclosed = true;\n            }\n          } while (escape);\n          token.value = value.slice(pos + 1, next);\n          token.sourceEndIndex = token.unclosed ? next : next + 1;\n          tokens.push(token);\n          pos = next + 1;\n          code = value.charCodeAt(pos);\n        } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n          next = value.indexOf(\"*/\", pos);\n          token = {\n            type: \"comment\",\n            sourceIndex: pos,\n            sourceEndIndex: next + 2\n          };\n          if (next === -1) {\n            token.unclosed = true;\n            next = value.length;\n            token.sourceEndIndex = next;\n          }\n          token.value = value.slice(pos + 2, next);\n          tokens.push(token);\n          pos = next + 2;\n          code = value.charCodeAt(pos);\n        } else if ((code === slash || code === star) && parent && parent.type === \"function\" && parent.value === \"calc\") {\n          token = value[pos];\n          tokens.push({\n            type: \"word\",\n            sourceIndex: pos - before.length,\n            sourceEndIndex: pos + token.length,\n            value: token\n          });\n          pos += 1;\n          code = value.charCodeAt(pos);\n        } else if (code === slash || code === comma || code === colon) {\n          token = value[pos];\n          tokens.push({\n            type: \"div\",\n            sourceIndex: pos - before.length,\n            sourceEndIndex: pos + token.length,\n            value: token,\n            before,\n            after: \"\"\n          });\n          before = \"\";\n          pos += 1;\n          code = value.charCodeAt(pos);\n        } else if (openParentheses === code) {\n          next = pos;\n          do {\n            next += 1;\n            code = value.charCodeAt(next);\n          } while (code <= 32);\n          parenthesesOpenPos = pos;\n          token = {\n            type: \"function\",\n            sourceIndex: pos - name.length,\n            value: name,\n            before: value.slice(parenthesesOpenPos + 1, next)\n          };\n          pos = next;\n          if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n            next -= 1;\n            do {\n              escape = false;\n              next = value.indexOf(\")\", next + 1);\n              if (~next) {\n                escapePos = next;\n                while (value.charCodeAt(escapePos - 1) === backslash) {\n                  escapePos -= 1;\n                  escape = !escape;\n                }\n              } else {\n                value += \")\";\n                next = value.length - 1;\n                token.unclosed = true;\n              }\n            } while (escape);\n            whitespacePos = next;\n            do {\n              whitespacePos -= 1;\n              code = value.charCodeAt(whitespacePos);\n            } while (code <= 32);\n            if (parenthesesOpenPos < whitespacePos) {\n              if (pos !== whitespacePos + 1) {\n                token.nodes = [\n                  {\n                    type: \"word\",\n                    sourceIndex: pos,\n                    sourceEndIndex: whitespacePos + 1,\n                    value: value.slice(pos, whitespacePos + 1)\n                  }\n                ];\n              } else {\n                token.nodes = [];\n              }\n              if (token.unclosed && whitespacePos + 1 !== next) {\n                token.after = \"\";\n                token.nodes.push({\n                  type: \"space\",\n                  sourceIndex: whitespacePos + 1,\n                  sourceEndIndex: next,\n                  value: value.slice(whitespacePos + 1, next)\n                });\n              } else {\n                token.after = value.slice(whitespacePos + 1, next);\n                token.sourceEndIndex = next;\n              }\n            } else {\n              token.after = \"\";\n              token.nodes = [];\n            }\n            pos = next + 1;\n            token.sourceEndIndex = token.unclosed ? next : pos;\n            code = value.charCodeAt(pos);\n            tokens.push(token);\n          } else {\n            balanced += 1;\n            token.after = \"\";\n            token.sourceEndIndex = pos + 1;\n            tokens.push(token);\n            stack.push(token);\n            tokens = token.nodes = [];\n            parent = token;\n          }\n          name = \"\";\n        } else if (closeParentheses === code && balanced) {\n          pos += 1;\n          code = value.charCodeAt(pos);\n          parent.after = after;\n          parent.sourceEndIndex += after.length;\n          after = \"\";\n          balanced -= 1;\n          stack[stack.length - 1].sourceEndIndex = pos;\n          stack.pop();\n          parent = stack[balanced];\n          tokens = parent.nodes;\n        } else {\n          next = pos;\n          do {\n            if (code === backslash) {\n              next += 1;\n            }\n            next += 1;\n            code = value.charCodeAt(next);\n          } while (next < max2 && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === \"function\" && parent.value === \"calc\" || code === slash && parent.type === \"function\" && parent.value === \"calc\" || code === closeParentheses && balanced));\n          token = value.slice(pos, next);\n          if (openParentheses === code) {\n            name = token;\n          } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {\n            tokens.push({\n              type: \"unicode-range\",\n              sourceIndex: pos,\n              sourceEndIndex: next,\n              value: token\n            });\n          } else {\n            tokens.push({\n              type: \"word\",\n              sourceIndex: pos,\n              sourceEndIndex: next,\n              value: token\n            });\n          }\n          pos = next;\n        }\n      }\n      for (pos = stack.length - 1; pos; pos -= 1) {\n        stack[pos].unclosed = true;\n        stack[pos].sourceEndIndex = value.length;\n      }\n      return stack[0].nodes;\n    };\n  }\n});\n\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/walk.js\nvar require_walk = __commonJS({\n  \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/walk.js\"(exports2, module) {\n    module.exports = function walk(nodes, cb, bubble) {\n      var i, max2, node, result;\n      for (i = 0, max2 = nodes.length; i < max2; i += 1) {\n        node = nodes[i];\n        if (!bubble) {\n          result = cb(node, i, nodes);\n        }\n        if (result !== false && node.type === \"function\" && Array.isArray(node.nodes)) {\n          walk(node.nodes, cb, bubble);\n        }\n        if (bubble) {\n          cb(node, i, nodes);\n        }\n      }\n    };\n  }\n});\n\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/stringify.js\nvar require_stringify = __commonJS({\n  \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/stringify.js\"(exports2, module) {\n    function stringifyNode(node, custom) {\n      var type = node.type;\n      var value = node.value;\n      var buf;\n      var customResult;\n      if (custom && (customResult = custom(node)) !== void 0) {\n        return customResult;\n      } else if (type === \"word\" || type === \"space\") {\n        return value;\n      } else if (type === \"string\") {\n        buf = node.quote || \"\";\n        return buf + value + (node.unclosed ? \"\" : buf);\n      } else if (type === \"comment\") {\n        return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n      } else if (type === \"div\") {\n        return (node.before || \"\") + value + (node.after || \"\");\n      } else if (Array.isArray(node.nodes)) {\n        buf = stringify(node.nodes, custom);\n        if (type !== \"function\") {\n          return buf;\n        }\n        return value + \"(\" + (node.before || \"\") + buf + (node.after || \"\") + (node.unclosed ? \"\" : \")\");\n      }\n      return value;\n    }\n    function stringify(nodes, custom) {\n      var result, i;\n      if (Array.isArray(nodes)) {\n        result = \"\";\n        for (i = nodes.length - 1; ~i; i -= 1) {\n          result = stringifyNode(nodes[i], custom) + result;\n        }\n        return result;\n      }\n      return stringifyNode(nodes, custom);\n    }\n    module.exports = stringify;\n  }\n});\n\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/unit.js\nvar require_unit = __commonJS({\n  \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/unit.js\"(exports2, module) {\n    var minus = \"-\".charCodeAt(0);\n    var plus = \"+\".charCodeAt(0);\n    var dot = \".\".charCodeAt(0);\n    var exp = \"e\".charCodeAt(0);\n    var EXP = \"E\".charCodeAt(0);\n    function likeNumber(value) {\n      var code = value.charCodeAt(0);\n      var nextCode;\n      if (code === plus || code === minus) {\n        nextCode = value.charCodeAt(1);\n        if (nextCode >= 48 && nextCode <= 57) {\n          return true;\n        }\n        var nextNextCode = value.charCodeAt(2);\n        if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n          return true;\n        }\n        return false;\n      }\n      if (code === dot) {\n        nextCode = value.charCodeAt(1);\n        if (nextCode >= 48 && nextCode <= 57) {\n          return true;\n        }\n        return false;\n      }\n      if (code >= 48 && code <= 57) {\n        return true;\n      }\n      return false;\n    }\n    module.exports = function(value) {\n      var pos = 0;\n      var length = value.length;\n      var code;\n      var nextCode;\n      var nextNextCode;\n      if (length === 0 || !likeNumber(value)) {\n        return false;\n      }\n      code = value.charCodeAt(pos);\n      if (code === plus || code === minus) {\n        pos++;\n      }\n      while (pos < length) {\n        code = value.charCodeAt(pos);\n        if (code < 48 || code > 57) {\n          break;\n        }\n        pos += 1;\n      }\n      code = value.charCodeAt(pos);\n      nextCode = value.charCodeAt(pos + 1);\n      if (code === dot && nextCode >= 48 && nextCode <= 57) {\n        pos += 2;\n        while (pos < length) {\n          code = value.charCodeAt(pos);\n          if (code < 48 || code > 57) {\n            break;\n          }\n          pos += 1;\n        }\n      }\n      code = value.charCodeAt(pos);\n      nextCode = value.charCodeAt(pos + 1);\n      nextNextCode = value.charCodeAt(pos + 2);\n      if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {\n        pos += nextCode === plus || nextCode === minus ? 3 : 2;\n        while (pos < length) {\n          code = value.charCodeAt(pos);\n          if (code < 48 || code > 57) {\n            break;\n          }\n          pos += 1;\n        }\n      }\n      return {\n        number: value.slice(0, pos),\n        unit: value.slice(pos)\n      };\n    };\n  }\n});\n\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/index.js\nvar require_lib = __commonJS({\n  \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/index.js\"(exports2, module) {\n    var parse2 = require_parse();\n    var walk = require_walk();\n    var stringify = require_stringify();\n    function ValueParser(value) {\n      if (this instanceof ValueParser) {\n        this.nodes = parse2(value);\n        return this;\n      }\n      return new ValueParser(value);\n    }\n    ValueParser.prototype.toString = function() {\n      return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n    };\n    ValueParser.prototype.walk = function(cb, bubble) {\n      walk(this.nodes, cb, bubble);\n      return this;\n    };\n    ValueParser.unit = require_unit();\n    ValueParser.walk = walk;\n    ValueParser.stringify = stringify;\n    module.exports = ValueParser;\n  }\n});\n\n// node_modules/.pnpm/camelize@1.0.0/node_modules/camelize/index.js\nvar require_camelize = __commonJS({\n  \"node_modules/.pnpm/camelize@1.0.0/node_modules/camelize/index.js\"(exports2, module) {\n    module.exports = function(obj) {\n      if (typeof obj === \"string\")\n        return camelCase(obj);\n      return walk(obj);\n    };\n    function walk(obj) {\n      if (!obj || typeof obj !== \"object\")\n        return obj;\n      if (isDate(obj) || isRegex(obj))\n        return obj;\n      if (isArray(obj))\n        return map(obj, walk);\n      return reduce(objectKeys(obj), function(acc, key) {\n        var camel = camelCase(key);\n        acc[camel] = walk(obj[key]);\n        return acc;\n      }, {});\n    }\n    function camelCase(str) {\n      return str.replace(/[_.-](\\w|$)/g, function(_, x) {\n        return x.toUpperCase();\n      });\n    }\n    var isArray = Array.isArray || function(obj) {\n      return Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n    var isDate = function(obj) {\n      return Object.prototype.toString.call(obj) === \"[object Date]\";\n    };\n    var isRegex = function(obj) {\n      return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n    };\n    var has = Object.prototype.hasOwnProperty;\n    var objectKeys = Object.keys || function(obj) {\n      var keys = [];\n      for (var key in obj) {\n        if (has.call(obj, key))\n          keys.push(key);\n      }\n      return keys;\n    };\n    function map(xs, f) {\n      if (xs.map)\n        return xs.map(f);\n      var res = [];\n      for (var i = 0; i < xs.length; i++) {\n        res.push(f(xs[i], i));\n      }\n      return res;\n    }\n    function reduce(xs, f, acc) {\n      if (xs.reduce)\n        return xs.reduce(f, acc);\n      for (var i = 0; i < xs.length; i++) {\n        acc = f(acc, xs[i], i);\n      }\n      return acc;\n    }\n  }\n});\n\n// node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/colors.json\nvar require_colors = __commonJS({\n  \"node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/colors.json\"(exports2, module) {\n    module.exports = {\n      black: \"#000000\",\n      silver: \"#c0c0c0\",\n      gray: \"#808080\",\n      white: \"#ffffff\",\n      maroon: \"#800000\",\n      red: \"#ff0000\",\n      purple: \"#800080\",\n      fuchsia: \"#ff00ff\",\n      green: \"#008000\",\n      lime: \"#00ff00\",\n      olive: \"#808000\",\n      yellow: \"#ffff00\",\n      navy: \"#000080\",\n      blue: \"#0000ff\",\n      teal: \"#008080\",\n      aqua: \"#00ffff\",\n      orange: \"#ffa500\",\n      aliceblue: \"#f0f8ff\",\n      antiquewhite: \"#faebd7\",\n      aquamarine: \"#7fffd4\",\n      azure: \"#f0ffff\",\n      beige: \"#f5f5dc\",\n      bisque: \"#ffe4c4\",\n      blanchedalmond: \"#ffebcd\",\n      blueviolet: \"#8a2be2\",\n      brown: \"#a52a2a\",\n      burlywood: \"#deb887\",\n      cadetblue: \"#5f9ea0\",\n      chartreuse: \"#7fff00\",\n      chocolate: \"#d2691e\",\n      coral: \"#ff7f50\",\n      cornflowerblue: \"#6495ed\",\n      cornsilk: \"#fff8dc\",\n      crimson: \"#dc143c\",\n      darkblue: \"#00008b\",\n      darkcyan: \"#008b8b\",\n      darkgoldenrod: \"#b8860b\",\n      darkgray: \"#a9a9a9\",\n      darkgreen: \"#006400\",\n      darkgrey: \"#a9a9a9\",\n      darkkhaki: \"#bdb76b\",\n      darkmagenta: \"#8b008b\",\n      darkolivegreen: \"#556b2f\",\n      darkorange: \"#ff8c00\",\n      darkorchid: \"#9932cc\",\n      darkred: \"#8b0000\",\n      darksalmon: \"#e9967a\",\n      darkseagreen: \"#8fbc8f\",\n      darkslateblue: \"#483d8b\",\n      darkslategray: \"#2f4f4f\",\n      darkslategrey: \"#2f4f4f\",\n      darkturquoise: \"#00ced1\",\n      darkviolet: \"#9400d3\",\n      deeppink: \"#ff1493\",\n      deepskyblue: \"#00bfff\",\n      dimgray: \"#696969\",\n      dimgrey: \"#696969\",\n      dodgerblue: \"#1e90ff\",\n      firebrick: \"#b22222\",\n      floralwhite: \"#fffaf0\",\n      forestgreen: \"#228b22\",\n      gainsboro: \"#dcdcdc\",\n      ghostwhite: \"#f8f8ff\",\n      gold: \"#ffd700\",\n      goldenrod: \"#daa520\",\n      greenyellow: \"#adff2f\",\n      grey: \"#808080\",\n      honeydew: \"#f0fff0\",\n      hotpink: \"#ff69b4\",\n      indianred: \"#cd5c5c\",\n      indigo: \"#4b0082\",\n      ivory: \"#fffff0\",\n      khaki: \"#f0e68c\",\n      lavender: \"#e6e6fa\",\n      lavenderblush: \"#fff0f5\",\n      lawngreen: \"#7cfc00\",\n      lemonchiffon: \"#fffacd\",\n      lightblue: \"#add8e6\",\n      lightcoral: \"#f08080\",\n      lightcyan: \"#e0ffff\",\n      lightgoldenrodyellow: \"#fafad2\",\n      lightgray: \"#d3d3d3\",\n      lightgreen: \"#90ee90\",\n      lightgrey: \"#d3d3d3\",\n      lightpink: \"#ffb6c1\",\n      lightsalmon: \"#ffa07a\",\n      lightseagreen: \"#20b2aa\",\n      lightskyblue: \"#87cefa\",\n      lightslategray: \"#778899\",\n      lightslategrey: \"#778899\",\n      lightsteelblue: \"#b0c4de\",\n      lightyellow: \"#ffffe0\",\n      limegreen: \"#32cd32\",\n      linen: \"#faf0e6\",\n      mediumaquamarine: \"#66cdaa\",\n      mediumblue: \"#0000cd\",\n      mediumorchid: \"#ba55d3\",\n      mediumpurple: \"#9370db\",\n      mediumseagreen: \"#3cb371\",\n      mediumslateblue: \"#7b68ee\",\n      mediumspringgreen: \"#00fa9a\",\n      mediumturquoise: \"#48d1cc\",\n      mediumvioletred: \"#c71585\",\n      midnightblue: \"#191970\",\n      mintcream: \"#f5fffa\",\n      mistyrose: \"#ffe4e1\",\n      moccasin: \"#ffe4b5\",\n      navajowhite: \"#ffdead\",\n      oldlace: \"#fdf5e6\",\n      olivedrab: \"#6b8e23\",\n      orangered: \"#ff4500\",\n      orchid: \"#da70d6\",\n      palegoldenrod: \"#eee8aa\",\n      palegreen: \"#98fb98\",\n      paleturquoise: \"#afeeee\",\n      palevioletred: \"#db7093\",\n      papayawhip: \"#ffefd5\",\n      peachpuff: \"#ffdab9\",\n      peru: \"#cd853f\",\n      pink: \"#ffc0cb\",\n      plum: \"#dda0dd\",\n      powderblue: \"#b0e0e6\",\n      rosybrown: \"#bc8f8f\",\n      royalblue: \"#4169e1\",\n      saddlebrown: \"#8b4513\",\n      salmon: \"#fa8072\",\n      sandybrown: \"#f4a460\",\n      seagreen: \"#2e8b57\",\n      seashell: \"#fff5ee\",\n      sienna: \"#a0522d\",\n      skyblue: \"#87ceeb\",\n      slateblue: \"#6a5acd\",\n      slategray: \"#708090\",\n      slategrey: \"#708090\",\n      snow: \"#fffafa\",\n      springgreen: \"#00ff7f\",\n      steelblue: \"#4682b4\",\n      tan: \"#d2b48c\",\n      thistle: \"#d8bfd8\",\n      tomato: \"#ff6347\",\n      turquoise: \"#40e0d0\",\n      violet: \"#ee82ee\",\n      wheat: \"#f5deb3\",\n      whitesmoke: \"#f5f5f5\",\n      yellowgreen: \"#9acd32\",\n      rebeccapurple: \"#663399\"\n    };\n  }\n});\n\n// node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/index.js\nvar require_css_color_keywords = __commonJS({\n  \"node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/index.js\"(exports2, module) {\n    \"use strict\";\n    module.exports = require_colors();\n  }\n});\n\n// node_modules/.pnpm/css-to-react-native@3.0.0/node_modules/css-to-react-native/index.js\nvar require_css_to_react_native = __commonJS({\n  \"node_modules/.pnpm/css-to-react-native@3.0.0/node_modules/css-to-react-native/index.js\"(exports2) {\n    \"use strict\";\n    Object.defineProperty(exports2, \"__esModule\", {\n      value: true\n    });\n    function _interopDefault(ex) {\n      return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n    }\n    var parse2 = require_lib();\n    var parse__default = _interopDefault(parse2);\n    var camelizeStyleName = _interopDefault(require_camelize());\n    var cssColorKeywords = _interopDefault(require_css_color_keywords());\n    var matchString = function matchString2(node) {\n      if (node.type !== \"string\")\n        return null;\n      return node.value.replace(/\\\\([0-9a-f]{1,6})(?:\\s|$)/gi, function(match, charCode) {\n        return String.fromCharCode(parseInt(charCode, 16));\n      }).replace(/\\\\/g, \"\");\n    };\n    var hexColorRe = /^(#(?:[0-9a-f]{3,4}){1,2})$/i;\n    var cssFunctionNameRe = /^(rgba?|hsla?|hwb|lab|lch|gray|color)$/;\n    var matchColor = function matchColor2(node) {\n      if (node.type === \"word\" && (hexColorRe.test(node.value) || node.value in cssColorKeywords || node.value === \"transparent\")) {\n        return node.value;\n      } else if (node.type === \"function\" && cssFunctionNameRe.test(node.value)) {\n        return parse2.stringify(node);\n      }\n      return null;\n    };\n    var noneRe = /^(none)$/i;\n    var autoRe = /^(auto)$/i;\n    var identRe = /(^-?[_a-z][_a-z0-9-]*$)/i;\n    var numberRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)$/i;\n    var lengthRe = /^(0$|(?:[+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?=px$))/i;\n    var unsupportedUnitRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(ch|em|ex|rem|vh|vw|vmin|vmax|cm|mm|in|pc|pt))$/i;\n    var angleRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(?:deg|rad))$/i;\n    var percentRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?%)$/i;\n    var noopToken = function noopToken2(predicate) {\n      return function(node) {\n        return predicate(node) ? \"<token>\" : null;\n      };\n    };\n    var valueForTypeToken = function valueForTypeToken2(type) {\n      return function(node) {\n        return node.type === type ? node.value : null;\n      };\n    };\n    var regExpToken = function regExpToken2(regExp, transform2) {\n      if (transform2 === void 0) {\n        transform2 = String;\n      }\n      return function(node) {\n        if (node.type !== \"word\")\n          return null;\n        var match = node.value.match(regExp);\n        if (match === null)\n          return null;\n        var value = transform2(match[1]);\n        return value;\n      };\n    };\n    var SPACE = noopToken(function(node) {\n      return node.type === \"space\";\n    });\n    var SLASH = noopToken(function(node) {\n      return node.type === \"div\" && node.value === \"/\";\n    });\n    var COMMA = noopToken(function(node) {\n      return node.type === \"div\" && node.value === \",\";\n    });\n    var WORD = valueForTypeToken(\"word\");\n    var NONE = regExpToken(noneRe);\n    var AUTO = regExpToken(autoRe);\n    var NUMBER = regExpToken(numberRe, Number);\n    var LENGTH = regExpToken(lengthRe, Number);\n    var UNSUPPORTED_LENGTH_UNIT = regExpToken(unsupportedUnitRe);\n    var ANGLE = regExpToken(angleRe, function(angle) {\n      return angle.toLowerCase();\n    });\n    var PERCENT = regExpToken(percentRe);\n    var IDENT = regExpToken(identRe);\n    var STRING = matchString;\n    var COLOR = matchColor;\n    var LINE = regExpToken(/^(none|underline|line-through)$/i);\n    var BORDER_STYLE = regExpToken(/^(solid|dashed|dotted)$/);\n    var defaultBorderWidth = 1;\n    var defaultBorderColor = \"black\";\n    var defaultBorderStyle = \"solid\";\n    var border = function border2(tokenStream) {\n      var borderWidth2;\n      var borderColor2;\n      var borderStyle;\n      if (tokenStream.matches(NONE)) {\n        tokenStream.expectEmpty();\n        return {\n          borderWidth: 0,\n          borderColor: \"black\",\n          borderStyle: \"solid\"\n        };\n      }\n      var partsParsed = 0;\n      while (partsParsed < 3 && tokenStream.hasTokens()) {\n        if (partsParsed !== 0)\n          tokenStream.expect(SPACE);\n        if (borderWidth2 === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n          borderWidth2 = tokenStream.lastValue;\n        } else if (borderColor2 === void 0 && tokenStream.matches(COLOR)) {\n          borderColor2 = tokenStream.lastValue;\n        } else if (borderStyle === void 0 && tokenStream.matches(BORDER_STYLE)) {\n          borderStyle = tokenStream.lastValue;\n        } else {\n          tokenStream[\"throw\"]();\n        }\n        partsParsed += 1;\n      }\n      tokenStream.expectEmpty();\n      if (borderWidth2 === void 0)\n        borderWidth2 = defaultBorderWidth;\n      if (borderColor2 === void 0)\n        borderColor2 = defaultBorderColor;\n      if (borderStyle === void 0)\n        borderStyle = defaultBorderStyle;\n      return {\n        borderWidth: borderWidth2,\n        borderColor: borderColor2,\n        borderStyle\n      };\n    };\n    var directionFactory = function directionFactory2(_ref) {\n      var _ref$types = _ref.types, types = _ref$types === void 0 ? [LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT] : _ref$types, _ref$directions = _ref.directions, directions = _ref$directions === void 0 ? [\"Top\", \"Right\", \"Bottom\", \"Left\"] : _ref$directions, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? \"\" : _ref$prefix, _ref$suffix = _ref.suffix, suffix = _ref$suffix === void 0 ? \"\" : _ref$suffix;\n      return function(tokenStream) {\n        var _ref2;\n        var values = [];\n        values.push(tokenStream.expect.apply(tokenStream, types));\n        while (values.length < 4 && tokenStream.hasTokens()) {\n          tokenStream.expect(SPACE);\n          values.push(tokenStream.expect.apply(tokenStream, types));\n        }\n        tokenStream.expectEmpty();\n        var top = values[0], _values$ = values[1], right = _values$ === void 0 ? top : _values$, _values$2 = values[2], bottom = _values$2 === void 0 ? top : _values$2, _values$3 = values[3], left = _values$3 === void 0 ? right : _values$3;\n        var keyFor = function keyFor2(n) {\n          return \"\" + prefix + directions[n] + suffix;\n        };\n        return _ref2 = {}, _ref2[keyFor(0)] = top, _ref2[keyFor(1)] = right, _ref2[keyFor(2)] = bottom, _ref2[keyFor(3)] = left, _ref2;\n      };\n    };\n    var parseShadowOffset = function parseShadowOffset2(tokenStream) {\n      var width = tokenStream.expect(LENGTH);\n      var height = tokenStream.matches(SPACE) ? tokenStream.expect(LENGTH) : width;\n      tokenStream.expectEmpty();\n      return {\n        width,\n        height\n      };\n    };\n    var parseShadow = function parseShadow2(tokenStream) {\n      var offsetX;\n      var offsetY;\n      var radius;\n      var color;\n      if (tokenStream.matches(NONE)) {\n        tokenStream.expectEmpty();\n        return {\n          offset: {\n            width: 0,\n            height: 0\n          },\n          radius: 0,\n          color: \"black\"\n        };\n      }\n      var didParseFirst = false;\n      while (tokenStream.hasTokens()) {\n        if (didParseFirst)\n          tokenStream.expect(SPACE);\n        if (offsetX === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n          offsetX = tokenStream.lastValue;\n          tokenStream.expect(SPACE);\n          offsetY = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n          tokenStream.saveRewindPoint();\n          if (tokenStream.matches(SPACE) && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n            radius = tokenStream.lastValue;\n          } else {\n            tokenStream.rewind();\n          }\n        } else if (color === void 0 && tokenStream.matches(COLOR)) {\n          color = tokenStream.lastValue;\n        } else {\n          tokenStream[\"throw\"]();\n        }\n        didParseFirst = true;\n      }\n      if (offsetX === void 0)\n        tokenStream[\"throw\"]();\n      return {\n        offset: {\n          width: offsetX,\n          height: offsetY\n        },\n        radius: radius !== void 0 ? radius : 0,\n        color: color !== void 0 ? color : \"black\"\n      };\n    };\n    var boxShadow = function boxShadow2(tokenStream) {\n      var _parseShadow = parseShadow(tokenStream), offset = _parseShadow.offset, radius = _parseShadow.radius, color = _parseShadow.color;\n      return {\n        shadowOffset: offset,\n        shadowRadius: radius,\n        shadowColor: color,\n        shadowOpacity: 1\n      };\n    };\n    var defaultFlexGrow = 1;\n    var defaultFlexShrink = 1;\n    var defaultFlexBasis = 0;\n    var flex = function flex2(tokenStream) {\n      var flexGrow;\n      var flexShrink;\n      var flexBasis;\n      if (tokenStream.matches(NONE)) {\n        tokenStream.expectEmpty();\n        return {\n          flexGrow: 0,\n          flexShrink: 0,\n          flexBasis: \"auto\"\n        };\n      }\n      tokenStream.saveRewindPoint();\n      if (tokenStream.matches(AUTO) && !tokenStream.hasTokens()) {\n        return {\n          flexGrow: 1,\n          flexShrink: 1,\n          flexBasis: \"auto\"\n        };\n      }\n      tokenStream.rewind();\n      var partsParsed = 0;\n      while (partsParsed < 2 && tokenStream.hasTokens()) {\n        if (partsParsed !== 0)\n          tokenStream.expect(SPACE);\n        if (flexGrow === void 0 && tokenStream.matches(NUMBER)) {\n          flexGrow = tokenStream.lastValue;\n          tokenStream.saveRewindPoint();\n          if (tokenStream.matches(SPACE) && tokenStream.matches(NUMBER)) {\n            flexShrink = tokenStream.lastValue;\n          } else {\n            tokenStream.rewind();\n          }\n        } else if (flexBasis === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT)) {\n          flexBasis = tokenStream.lastValue;\n        } else if (flexBasis === void 0 && tokenStream.matches(AUTO)) {\n          flexBasis = \"auto\";\n        } else {\n          tokenStream[\"throw\"]();\n        }\n        partsParsed += 1;\n      }\n      tokenStream.expectEmpty();\n      if (flexGrow === void 0)\n        flexGrow = defaultFlexGrow;\n      if (flexShrink === void 0)\n        flexShrink = defaultFlexShrink;\n      if (flexBasis === void 0)\n        flexBasis = defaultFlexBasis;\n      return {\n        flexGrow,\n        flexShrink,\n        flexBasis\n      };\n    };\n    var FLEX_WRAP = regExpToken(/(nowrap|wrap|wrap-reverse)/);\n    var FLEX_DIRECTION = regExpToken(/(row|row-reverse|column|column-reverse)/);\n    var defaultFlexWrap = \"nowrap\";\n    var defaultFlexDirection = \"row\";\n    var flexFlow = function flexFlow2(tokenStream) {\n      var flexWrap;\n      var flexDirection;\n      var partsParsed = 0;\n      while (partsParsed < 2 && tokenStream.hasTokens()) {\n        if (partsParsed !== 0)\n          tokenStream.expect(SPACE);\n        if (flexWrap === void 0 && tokenStream.matches(FLEX_WRAP)) {\n          flexWrap = tokenStream.lastValue;\n        } else if (flexDirection === void 0 && tokenStream.matches(FLEX_DIRECTION)) {\n          flexDirection = tokenStream.lastValue;\n        } else {\n          tokenStream[\"throw\"]();\n        }\n        partsParsed += 1;\n      }\n      tokenStream.expectEmpty();\n      if (flexWrap === void 0)\n        flexWrap = defaultFlexWrap;\n      if (flexDirection === void 0)\n        flexDirection = defaultFlexDirection;\n      return {\n        flexWrap,\n        flexDirection\n      };\n    };\n    var fontFamily = function fontFamily2(tokenStream) {\n      var fontFamily3;\n      if (tokenStream.matches(STRING)) {\n        fontFamily3 = tokenStream.lastValue;\n      } else {\n        fontFamily3 = tokenStream.expect(IDENT);\n        while (tokenStream.hasTokens()) {\n          tokenStream.expect(SPACE);\n          var nextIdent = tokenStream.expect(IDENT);\n          fontFamily3 += \" \" + nextIdent;\n        }\n      }\n      tokenStream.expectEmpty();\n      return {\n        fontFamily: fontFamily3\n      };\n    };\n    var NORMAL = regExpToken(/^(normal)$/);\n    var STYLE = regExpToken(/^(italic)$/);\n    var WEIGHT = regExpToken(/^([1-9]00|bold)$/);\n    var VARIANT = regExpToken(/^(small-caps)$/);\n    var defaultFontStyle = \"normal\";\n    var defaultFontWeight = \"normal\";\n    var defaultFontVariant = [];\n    var font = function font2(tokenStream) {\n      var fontStyle;\n      var fontWeight2;\n      var fontVariant2;\n      var lineHeight;\n      var numStyleWeightVariantMatched = 0;\n      while (numStyleWeightVariantMatched < 3 && tokenStream.hasTokens()) {\n        if (tokenStream.matches(NORMAL))\n          ;\n        else if (fontStyle === void 0 && tokenStream.matches(STYLE)) {\n          fontStyle = tokenStream.lastValue;\n        } else if (fontWeight2 === void 0 && tokenStream.matches(WEIGHT)) {\n          fontWeight2 = tokenStream.lastValue;\n        } else if (fontVariant2 === void 0 && tokenStream.matches(VARIANT)) {\n          fontVariant2 = [tokenStream.lastValue];\n        } else {\n          break;\n        }\n        tokenStream.expect(SPACE);\n        numStyleWeightVariantMatched += 1;\n      }\n      var fontSize = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n      if (tokenStream.matches(SLASH)) {\n        lineHeight = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n      }\n      tokenStream.expect(SPACE);\n      var _fontFamily = fontFamily(tokenStream), fontFamily$1 = _fontFamily.fontFamily;\n      if (fontStyle === void 0)\n        fontStyle = defaultFontStyle;\n      if (fontWeight2 === void 0)\n        fontWeight2 = defaultFontWeight;\n      if (fontVariant2 === void 0)\n        fontVariant2 = defaultFontVariant;\n      var out = {\n        fontStyle,\n        fontWeight: fontWeight2,\n        fontVariant: fontVariant2,\n        fontSize,\n        fontFamily: fontFamily$1\n      };\n      if (lineHeight !== void 0)\n        out.lineHeight = lineHeight;\n      return out;\n    };\n    var ALIGN_CONTENT = regExpToken(/(flex-(?:start|end)|center|stretch|space-(?:between|around))/);\n    var JUSTIFY_CONTENT = regExpToken(/(flex-(?:start|end)|center|space-(?:between|around|evenly))/);\n    var placeContent = function placeContent2(tokenStream) {\n      var alignContent = tokenStream.expect(ALIGN_CONTENT);\n      var justifyContent;\n      if (tokenStream.hasTokens()) {\n        tokenStream.expect(SPACE);\n        justifyContent = tokenStream.expect(JUSTIFY_CONTENT);\n      } else {\n        justifyContent = \"stretch\";\n      }\n      tokenStream.expectEmpty();\n      return {\n        alignContent,\n        justifyContent\n      };\n    };\n    var STYLE$1 = regExpToken(/^(solid|double|dotted|dashed)$/);\n    var defaultTextDecorationLine = \"none\";\n    var defaultTextDecorationStyle = \"solid\";\n    var defaultTextDecorationColor = \"black\";\n    var textDecoration = function textDecoration2(tokenStream) {\n      var line;\n      var style;\n      var color;\n      var didParseFirst = false;\n      while (tokenStream.hasTokens()) {\n        if (didParseFirst)\n          tokenStream.expect(SPACE);\n        if (line === void 0 && tokenStream.matches(LINE)) {\n          var lines = [tokenStream.lastValue.toLowerCase()];\n          tokenStream.saveRewindPoint();\n          if (lines[0] !== \"none\" && tokenStream.matches(SPACE) && tokenStream.matches(LINE)) {\n            lines.push(tokenStream.lastValue.toLowerCase());\n            lines.sort().reverse();\n          } else {\n            tokenStream.rewind();\n          }\n          line = lines.join(\" \");\n        } else if (style === void 0 && tokenStream.matches(STYLE$1)) {\n          style = tokenStream.lastValue;\n        } else if (color === void 0 && tokenStream.matches(COLOR)) {\n          color = tokenStream.lastValue;\n        } else {\n          tokenStream[\"throw\"]();\n        }\n        didParseFirst = true;\n      }\n      return {\n        textDecorationLine: line !== void 0 ? line : defaultTextDecorationLine,\n        textDecorationColor: color !== void 0 ? color : defaultTextDecorationColor,\n        textDecorationStyle: style !== void 0 ? style : defaultTextDecorationStyle\n      };\n    };\n    var textDecorationLine = function textDecorationLine2(tokenStream) {\n      var lines = [];\n      var didParseFirst = false;\n      while (tokenStream.hasTokens()) {\n        if (didParseFirst)\n          tokenStream.expect(SPACE);\n        lines.push(tokenStream.expect(LINE).toLowerCase());\n        didParseFirst = true;\n      }\n      lines.sort().reverse();\n      return {\n        textDecorationLine: lines.join(\" \")\n      };\n    };\n    var textShadow = function textShadow2(tokenStream) {\n      var _parseShadow2 = parseShadow(tokenStream), offset = _parseShadow2.offset, radius = _parseShadow2.radius, color = _parseShadow2.color;\n      return {\n        textShadowOffset: offset,\n        textShadowRadius: radius,\n        textShadowColor: color\n      };\n    };\n    var oneOfType = function oneOfType2(tokenType) {\n      return function(functionStream) {\n        var value = functionStream.expect(tokenType);\n        functionStream.expectEmpty();\n        return value;\n      };\n    };\n    var singleNumber = oneOfType(NUMBER);\n    var singleLength = oneOfType(LENGTH);\n    var singleAngle = oneOfType(ANGLE);\n    var xyTransformFactory = function xyTransformFactory2(tokenType) {\n      return function(key, valueIfOmitted) {\n        return function(functionStream) {\n          var _ref3, _ref4;\n          var x = functionStream.expect(tokenType);\n          var y;\n          if (functionStream.hasTokens()) {\n            functionStream.expect(COMMA);\n            y = functionStream.expect(tokenType);\n          } else if (valueIfOmitted !== void 0) {\n            y = valueIfOmitted;\n          } else {\n            return x;\n          }\n          functionStream.expectEmpty();\n          return [(_ref3 = {}, _ref3[key + \"Y\"] = y, _ref3), (_ref4 = {}, _ref4[key + \"X\"] = x, _ref4)];\n        };\n      };\n    };\n    var xyNumber = xyTransformFactory(NUMBER);\n    var xyLength = xyTransformFactory(LENGTH);\n    var xyAngle = xyTransformFactory(ANGLE);\n    var partTransforms = {\n      perspective: singleNumber,\n      scale: xyNumber(\"scale\"),\n      scaleX: singleNumber,\n      scaleY: singleNumber,\n      translate: xyLength(\"translate\", 0),\n      translateX: singleLength,\n      translateY: singleLength,\n      rotate: singleAngle,\n      rotateX: singleAngle,\n      rotateY: singleAngle,\n      rotateZ: singleAngle,\n      skewX: singleAngle,\n      skewY: singleAngle,\n      skew: xyAngle(\"skew\", \"0deg\")\n    };\n    var transform = function transform2(tokenStream) {\n      var transforms2 = [];\n      var didParseFirst = false;\n      while (tokenStream.hasTokens()) {\n        if (didParseFirst)\n          tokenStream.expect(SPACE);\n        var functionStream = tokenStream.expectFunction();\n        var functionName = functionStream.functionName;\n        var transformedValues = partTransforms[functionName](functionStream);\n        if (!Array.isArray(transformedValues)) {\n          var _ref5;\n          transformedValues = [(_ref5 = {}, _ref5[functionName] = transformedValues, _ref5)];\n        }\n        transforms2 = transformedValues.concat(transforms2);\n        didParseFirst = true;\n      }\n      return {\n        transform: transforms2\n      };\n    };\n    var background = function background2(tokenStream) {\n      return {\n        backgroundColor: tokenStream.expect(COLOR)\n      };\n    };\n    var borderColor = directionFactory({\n      types: [COLOR],\n      prefix: \"border\",\n      suffix: \"Color\"\n    });\n    var borderRadius = directionFactory({\n      directions: [\"TopLeft\", \"TopRight\", \"BottomRight\", \"BottomLeft\"],\n      prefix: \"border\",\n      suffix: \"Radius\"\n    });\n    var borderWidth = directionFactory({\n      prefix: \"border\",\n      suffix: \"Width\"\n    });\n    var margin = directionFactory({\n      types: [LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT, AUTO],\n      prefix: \"margin\"\n    });\n    var padding = directionFactory({\n      prefix: \"padding\"\n    });\n    var fontVariant = function fontVariant2(tokenStream) {\n      return {\n        fontVariant: [tokenStream.expect(IDENT)]\n      };\n    };\n    var fontWeight = function fontWeight2(tokenStream) {\n      return {\n        fontWeight: tokenStream.expect(WORD)\n      };\n    };\n    var shadowOffset = function shadowOffset2(tokenStream) {\n      return {\n        shadowOffset: parseShadowOffset(tokenStream)\n      };\n    };\n    var textShadowOffset = function textShadowOffset2(tokenStream) {\n      return {\n        textShadowOffset: parseShadowOffset(tokenStream)\n      };\n    };\n    var transforms = {\n      background,\n      border,\n      borderColor,\n      borderRadius,\n      borderWidth,\n      boxShadow,\n      flex,\n      flexFlow,\n      font,\n      fontFamily,\n      fontVariant,\n      fontWeight,\n      margin,\n      padding,\n      placeContent,\n      shadowOffset,\n      textShadow,\n      textShadowOffset,\n      textDecoration,\n      textDecorationLine,\n      transform\n    };\n    var propertiesWithoutUnits;\n    if (true) {\n      propertiesWithoutUnits = [\"aspectRatio\", \"elevation\", \"flexGrow\", \"flexShrink\", \"opacity\", \"shadowOpacity\", \"zIndex\"];\n    }\n    var devPropertiesWithUnitsRegExp = propertiesWithoutUnits != null ? new RegExp(propertiesWithoutUnits.join(\"|\")) : null;\n    var SYMBOL_MATCH = \"SYMBOL_MATCH\";\n    var TokenStream = /* @__PURE__ */ function() {\n      function TokenStream2(nodes, parent) {\n        this.index = 0;\n        this.nodes = nodes;\n        this.functionName = parent != null ? parent.value : null;\n        this.lastValue = null;\n        this.rewindIndex = -1;\n      }\n      var _proto = TokenStream2.prototype;\n      _proto.hasTokens = function hasTokens() {\n        return this.index <= this.nodes.length - 1;\n      };\n      _proto[SYMBOL_MATCH] = function() {\n        if (!this.hasTokens())\n          return null;\n        var node = this.nodes[this.index];\n        for (var i = 0; i < arguments.length; i += 1) {\n          var tokenDescriptor = i < 0 || arguments.length <= i ? void 0 : arguments[i];\n          var value = tokenDescriptor(node);\n          if (value !== null) {\n            this.index += 1;\n            this.lastValue = value;\n            return value;\n          }\n        }\n        return null;\n      };\n      _proto.matches = function matches() {\n        return this[SYMBOL_MATCH].apply(this, arguments) !== null;\n      };\n      _proto.expect = function expect() {\n        var value = this[SYMBOL_MATCH].apply(this, arguments);\n        return value !== null ? value : this[\"throw\"]();\n      };\n      _proto.matchesFunction = function matchesFunction() {\n        var node = this.nodes[this.index];\n        if (node.type !== \"function\")\n          return null;\n        var value = new TokenStream2(node.nodes, node);\n        this.index += 1;\n        this.lastValue = null;\n        return value;\n      };\n      _proto.expectFunction = function expectFunction() {\n        var value = this.matchesFunction();\n        return value !== null ? value : this[\"throw\"]();\n      };\n      _proto.expectEmpty = function expectEmpty() {\n        if (this.hasTokens())\n          this[\"throw\"]();\n      };\n      _proto[\"throw\"] = function _throw() {\n        throw new Error(\"Unexpected token type: \" + this.nodes[this.index].type);\n      };\n      _proto.saveRewindPoint = function saveRewindPoint() {\n        this.rewindIndex = this.index;\n      };\n      _proto.rewind = function rewind() {\n        if (this.rewindIndex === -1)\n          throw new Error(\"Internal error\");\n        this.index = this.rewindIndex;\n        this.lastValue = null;\n      };\n      return TokenStream2;\n    }();\n    var numberOrLengthRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?:px)?$/i;\n    var numberOnlyRe = /^[+-]?(?:\\d*\\.\\d*|[1-9]\\d*)(?:e[+-]?\\d+)?$/i;\n    var boolRe = /^true|false$/i;\n    var nullRe = /^null$/i;\n    var undefinedRe = /^undefined$/i;\n    var transformRawValue = function transformRawValue2(propName, value) {\n      if (true) {\n        var needsUnit = !devPropertiesWithUnitsRegExp.test(propName);\n        var isNumberWithoutUnit = numberOnlyRe.test(value);\n        if (needsUnit && isNumberWithoutUnit) {\n          console.warn('Expected style \"' + propName + \": \" + value + '\" to contain units');\n        }\n        if (!needsUnit && value !== \"0\" && !isNumberWithoutUnit) {\n          console.warn('Expected style \"' + propName + \": \" + value + '\" to be unitless');\n        }\n      }\n      var numberMatch = value.match(numberOrLengthRe);\n      if (numberMatch !== null)\n        return Number(numberMatch[1]);\n      var boolMatch = value.match(boolRe);\n      if (boolMatch !== null)\n        return boolMatch[0].toLowerCase() === \"true\";\n      var nullMatch = value.match(nullRe);\n      if (nullMatch !== null)\n        return null;\n      var undefinedMatch = value.match(undefinedRe);\n      if (undefinedMatch !== null)\n        return void 0;\n      return value;\n    };\n    var baseTransformShorthandValue = function baseTransformShorthandValue2(propName, value) {\n      var ast = parse__default(value);\n      var tokenStream = new TokenStream(ast.nodes);\n      return transforms[propName](tokenStream);\n    };\n    var transformShorthandValue =  false ? 0 : function(propName, value) {\n      try {\n        return baseTransformShorthandValue(propName, value);\n      } catch (e) {\n        throw new Error('Failed to parse declaration \"' + propName + \": \" + value + '\"');\n      }\n    };\n    var getStylesForProperty = function getStylesForProperty2(propName, inputValue, allowShorthand) {\n      var _ref6;\n      var isRawValue = allowShorthand === false || !(propName in transforms);\n      var value = inputValue.trim();\n      var propValues = isRawValue ? (_ref6 = {}, _ref6[propName] = transformRawValue(propName, value), _ref6) : transformShorthandValue(propName, value);\n      return propValues;\n    };\n    var getPropertyName = function getPropertyName2(propName) {\n      var isCustomProp = /^--\\w+/.test(propName);\n      if (isCustomProp) {\n        return propName;\n      }\n      return camelizeStyleName(propName);\n    };\n    var index = function index2(rules, shorthandBlacklist) {\n      if (shorthandBlacklist === void 0) {\n        shorthandBlacklist = [];\n      }\n      return rules.reduce(function(accum, rule) {\n        var propertyName = getPropertyName(rule[0]);\n        var value = rule[1];\n        var allowShorthand = shorthandBlacklist.indexOf(propertyName) === -1;\n        return Object.assign(accum, getStylesForProperty(propertyName, value, allowShorthand));\n      }, {});\n    };\n    exports2[\"default\"] = index;\n    exports2.getPropertyName = getPropertyName;\n    exports2.getStylesForProperty = getStylesForProperty;\n    exports2.transformRawValue = transformRawValue;\n  }\n});\n\n// node_modules/.pnpm/css-background-parser@0.1.0/node_modules/css-background-parser/index.js\nvar require_css_background_parser = __commonJS({\n  \"node_modules/.pnpm/css-background-parser@0.1.0/node_modules/css-background-parser/index.js\"(exports2, module) {\n    (function(exports3) {\n      function BackgroundList(backgrounds) {\n        if (!(this instanceof BackgroundList)) {\n          return new BackgroundList();\n        }\n        this.backgrounds = backgrounds || [];\n      }\n      BackgroundList.prototype.toString = function() {\n        return this.backgrounds.join(\", \");\n      };\n      function Background(props) {\n        if (!(this instanceof Background)) {\n          return new Background(props);\n        }\n        props = props || {};\n        var bg = this;\n        function defprop(name, defaultValue) {\n          bg[name] = name in props ? props[name] : defaultValue;\n        }\n        defprop(\"color\", \"\");\n        defprop(\"image\", \"none\");\n        defprop(\"attachment\", \"scroll\");\n        defprop(\"clip\", \"border-box\");\n        defprop(\"origin\", \"padding-box\");\n        defprop(\"position\", \"0% 0%\");\n        defprop(\"repeat\", \"repeat\");\n        defprop(\"size\", \"auto\");\n      }\n      Background.prototype.toString = function() {\n        var list = [\n          this.image,\n          this.repeat,\n          this.attachment,\n          this.position + \" / \" + this.size,\n          this.origin,\n          this.clip\n        ];\n        if (this.color) {\n          list.unshift(this.color);\n        }\n        return list.join(\" \");\n      };\n      exports3.BackgroundList = BackgroundList;\n      exports3.Background = Background;\n      function parseImages(cssText) {\n        var images = [];\n        var tokens = /[,\\(\\)]/;\n        var parens = 0;\n        var buffer = \"\";\n        if (cssText == null) {\n          return images;\n        }\n        while (cssText.length) {\n          var match = tokens.exec(cssText);\n          if (!match) {\n            break;\n          }\n          var char = match[0];\n          var ignoreChar = false;\n          switch (char) {\n            case \",\":\n              if (!parens) {\n                images.push(buffer.trim());\n                buffer = \"\";\n                ignoreChar = true;\n              }\n              break;\n            case \"(\":\n              parens++;\n              break;\n            case \")\":\n              parens--;\n              break;\n          }\n          var index = match.index + 1;\n          buffer += cssText.slice(0, ignoreChar ? index - 1 : index);\n          cssText = cssText.slice(index);\n        }\n        if (buffer.length || cssText.length) {\n          images.push((buffer + cssText).trim());\n        }\n        return images;\n      }\n      function trim(str) {\n        return str.trim();\n      }\n      function parseSimpleList(cssText) {\n        return (cssText || \"\").split(\",\").map(trim);\n      }\n      exports3.parseElementStyle = function(styleObject) {\n        var list = new BackgroundList();\n        if (styleObject == null) {\n          return list;\n        }\n        var bgImage = parseImages(styleObject.backgroundImage);\n        var bgColor = styleObject.backgroundColor;\n        var bgAttachment = parseSimpleList(styleObject.backgroundAttachment);\n        var bgClip = parseSimpleList(styleObject.backgroundClip);\n        var bgOrigin = parseSimpleList(styleObject.backgroundOrigin);\n        var bgPosition = parseSimpleList(styleObject.backgroundPosition);\n        var bgRepeat = parseSimpleList(styleObject.backgroundRepeat);\n        var bgSize = parseSimpleList(styleObject.backgroundSize);\n        var background;\n        for (var i = 0, ii = bgImage.length; i < ii; i++) {\n          background = new Background({\n            image: bgImage[i],\n            attachment: bgAttachment[i % bgAttachment.length],\n            clip: bgClip[i % bgClip.length],\n            origin: bgOrigin[i % bgOrigin.length],\n            position: bgPosition[i % bgPosition.length],\n            repeat: bgRepeat[i % bgRepeat.length],\n            size: bgSize[i % bgSize.length]\n          });\n          if (i === ii - 1) {\n            background.color = bgColor;\n          }\n          list.backgrounds.push(background);\n        }\n        return list;\n      };\n    })(function(root) {\n      if (typeof module !== \"undefined\" && module.exports !== void 0)\n        return module.exports;\n      return root.cssBgParser = {};\n    }(exports2));\n  }\n});\n\n// node_modules/.pnpm/css-box-shadow@1.0.0-3/node_modules/css-box-shadow/index.js\nvar require_css_box_shadow = __commonJS({\n  \"node_modules/.pnpm/css-box-shadow@1.0.0-3/node_modules/css-box-shadow/index.js\"(exports2, module) {\n    var VALUES_REG = /,(?![^\\(]*\\))/;\n    var PARTS_REG = /\\s(?![^(]*\\))/;\n    var LENGTH_REG = /^[0-9]+[a-zA-Z%]+?$/;\n    var parseValue = (str) => {\n      const parts = str.split(PARTS_REG);\n      const inset = parts.includes(\"inset\");\n      const last = parts.slice(-1)[0];\n      const color = !isLength(last) ? last : void 0;\n      const nums = parts.filter((n) => n !== \"inset\").filter((n) => n !== color).map(toNum);\n      const [offsetX, offsetY, blurRadius, spreadRadius] = nums;\n      return {\n        inset,\n        offsetX,\n        offsetY,\n        blurRadius,\n        spreadRadius,\n        color\n      };\n    };\n    var stringifyValue = (obj) => {\n      const {\n        inset,\n        offsetX = 0,\n        offsetY = 0,\n        blurRadius = 0,\n        spreadRadius,\n        color\n      } = obj || {};\n      return [\n        inset ? \"inset\" : null,\n        offsetX,\n        offsetY,\n        blurRadius,\n        spreadRadius,\n        color\n      ].filter((v) => v !== null && v !== void 0).map(toPx).map((s) => (\"\" + s).trim()).join(\" \");\n    };\n    var isLength = (v) => v === \"0\" || LENGTH_REG.test(v);\n    var toNum = (v) => {\n      if (!/px$/.test(v) && v !== \"0\")\n        return v;\n      const n = parseFloat(v);\n      return !isNaN(n) ? n : v;\n    };\n    var toPx = (n) => typeof n === \"number\" && n !== 0 ? n + \"px\" : n;\n    var parse2 = (str) => str.split(VALUES_REG).map((s) => s.trim()).map(parseValue);\n    var stringify = (arr) => arr.map(stringifyValue).join(\", \");\n    module.exports = {\n      parse: parse2,\n      stringify\n    };\n  }\n});\n\n// node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js\nvar require_color_name = __commonJS({\n  \"node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js\"(exports2, module) {\n    \"use strict\";\n    module.exports = {\n      \"aliceblue\": [240, 248, 255],\n      \"antiquewhite\": [250, 235, 215],\n      \"aqua\": [0, 255, 255],\n      \"aquamarine\": [127, 255, 212],\n      \"azure\": [240, 255, 255],\n      \"beige\": [245, 245, 220],\n      \"bisque\": [255, 228, 196],\n      \"black\": [0, 0, 0],\n      \"blanchedalmond\": [255, 235, 205],\n      \"blue\": [0, 0, 255],\n      \"blueviolet\": [138, 43, 226],\n      \"brown\": [165, 42, 42],\n      \"burlywood\": [222, 184, 135],\n      \"cadetblue\": [95, 158, 160],\n      \"chartreuse\": [127, 255, 0],\n      \"chocolate\": [210, 105, 30],\n      \"coral\": [255, 127, 80],\n      \"cornflowerblue\": [100, 149, 237],\n      \"cornsilk\": [255, 248, 220],\n      \"crimson\": [220, 20, 60],\n      \"cyan\": [0, 255, 255],\n      \"darkblue\": [0, 0, 139],\n      \"darkcyan\": [0, 139, 139],\n      \"darkgoldenrod\": [184, 134, 11],\n      \"darkgray\": [169, 169, 169],\n      \"darkgreen\": [0, 100, 0],\n      \"darkgrey\": [169, 169, 169],\n      \"darkkhaki\": [189, 183, 107],\n      \"darkmagenta\": [139, 0, 139],\n      \"darkolivegreen\": [85, 107, 47],\n      \"darkorange\": [255, 140, 0],\n      \"darkorchid\": [153, 50, 204],\n      \"darkred\": [139, 0, 0],\n      \"darksalmon\": [233, 150, 122],\n      \"darkseagreen\": [143, 188, 143],\n      \"darkslateblue\": [72, 61, 139],\n      \"darkslategray\": [47, 79, 79],\n      \"darkslategrey\": [47, 79, 79],\n      \"darkturquoise\": [0, 206, 209],\n      \"darkviolet\": [148, 0, 211],\n      \"deeppink\": [255, 20, 147],\n      \"deepskyblue\": [0, 191, 255],\n      \"dimgray\": [105, 105, 105],\n      \"dimgrey\": [105, 105, 105],\n      \"dodgerblue\": [30, 144, 255],\n      \"firebrick\": [178, 34, 34],\n      \"floralwhite\": [255, 250, 240],\n      \"forestgreen\": [34, 139, 34],\n      \"fuchsia\": [255, 0, 255],\n      \"gainsboro\": [220, 220, 220],\n      \"ghostwhite\": [248, 248, 255],\n      \"gold\": [255, 215, 0],\n      \"goldenrod\": [218, 165, 32],\n      \"gray\": [128, 128, 128],\n      \"green\": [0, 128, 0],\n      \"greenyellow\": [173, 255, 47],\n      \"grey\": [128, 128, 128],\n      \"honeydew\": [240, 255, 240],\n      \"hotpink\": [255, 105, 180],\n      \"indianred\": [205, 92, 92],\n      \"indigo\": [75, 0, 130],\n      \"ivory\": [255, 255, 240],\n      \"khaki\": [240, 230, 140],\n      \"lavender\": [230, 230, 250],\n      \"lavenderblush\": [255, 240, 245],\n      \"lawngreen\": [124, 252, 0],\n      \"lemonchiffon\": [255, 250, 205],\n      \"lightblue\": [173, 216, 230],\n      \"lightcoral\": [240, 128, 128],\n      \"lightcyan\": [224, 255, 255],\n      \"lightgoldenrodyellow\": [250, 250, 210],\n      \"lightgray\": [211, 211, 211],\n      \"lightgreen\": [144, 238, 144],\n      \"lightgrey\": [211, 211, 211],\n      \"lightpink\": [255, 182, 193],\n      \"lightsalmon\": [255, 160, 122],\n      \"lightseagreen\": [32, 178, 170],\n      \"lightskyblue\": [135, 206, 250],\n      \"lightslategray\": [119, 136, 153],\n      \"lightslategrey\": [119, 136, 153],\n      \"lightsteelblue\": [176, 196, 222],\n      \"lightyellow\": [255, 255, 224],\n      \"lime\": [0, 255, 0],\n      \"limegreen\": [50, 205, 50],\n      \"linen\": [250, 240, 230],\n      \"magenta\": [255, 0, 255],\n      \"maroon\": [128, 0, 0],\n      \"mediumaquamarine\": [102, 205, 170],\n      \"mediumblue\": [0, 0, 205],\n      \"mediumorchid\": [186, 85, 211],\n      \"mediumpurple\": [147, 112, 219],\n      \"mediumseagreen\": [60, 179, 113],\n      \"mediumslateblue\": [123, 104, 238],\n      \"mediumspringgreen\": [0, 250, 154],\n      \"mediumturquoise\": [72, 209, 204],\n      \"mediumvioletred\": [199, 21, 133],\n      \"midnightblue\": [25, 25, 112],\n      \"mintcream\": [245, 255, 250],\n      \"mistyrose\": [255, 228, 225],\n      \"moccasin\": [255, 228, 181],\n      \"navajowhite\": [255, 222, 173],\n      \"navy\": [0, 0, 128],\n      \"oldlace\": [253, 245, 230],\n      \"olive\": [128, 128, 0],\n      \"olivedrab\": [107, 142, 35],\n      \"orange\": [255, 165, 0],\n      \"orangered\": [255, 69, 0],\n      \"orchid\": [218, 112, 214],\n      \"palegoldenrod\": [238, 232, 170],\n      \"palegreen\": [152, 251, 152],\n      \"paleturquoise\": [175, 238, 238],\n      \"palevioletred\": [219, 112, 147],\n      \"papayawhip\": [255, 239, 213],\n      \"peachpuff\": [255, 218, 185],\n      \"peru\": [205, 133, 63],\n      \"pink\": [255, 192, 203],\n      \"plum\": [221, 160, 221],\n      \"powderblue\": [176, 224, 230],\n      \"purple\": [128, 0, 128],\n      \"rebeccapurple\": [102, 51, 153],\n      \"red\": [255, 0, 0],\n      \"rosybrown\": [188, 143, 143],\n      \"royalblue\": [65, 105, 225],\n      \"saddlebrown\": [139, 69, 19],\n      \"salmon\": [250, 128, 114],\n      \"sandybrown\": [244, 164, 96],\n      \"seagreen\": [46, 139, 87],\n      \"seashell\": [255, 245, 238],\n      \"sienna\": [160, 82, 45],\n      \"silver\": [192, 192, 192],\n      \"skyblue\": [135, 206, 235],\n      \"slateblue\": [106, 90, 205],\n      \"slategray\": [112, 128, 144],\n      \"slategrey\": [112, 128, 144],\n      \"snow\": [255, 250, 250],\n      \"springgreen\": [0, 255, 127],\n      \"steelblue\": [70, 130, 180],\n      \"tan\": [210, 180, 140],\n      \"teal\": [0, 128, 128],\n      \"thistle\": [216, 191, 216],\n      \"tomato\": [255, 99, 71],\n      \"turquoise\": [64, 224, 208],\n      \"violet\": [238, 130, 238],\n      \"wheat\": [245, 222, 179],\n      \"white\": [255, 255, 255],\n      \"whitesmoke\": [245, 245, 245],\n      \"yellow\": [255, 255, 0],\n      \"yellowgreen\": [154, 205, 50]\n    };\n  }\n});\n\n// node_modules/.pnpm/hex-rgb@4.3.0/node_modules/hex-rgb/index.js\nvar require_hex_rgb = __commonJS({\n  \"node_modules/.pnpm/hex-rgb@4.3.0/node_modules/hex-rgb/index.js\"(exports2, module) {\n    \"use strict\";\n    var hexCharacters = \"a-f\\\\d\";\n    var match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\n    var match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\n    var nonHexChars = new RegExp(`[^#${hexCharacters}]`, \"gi\");\n    var validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, \"i\");\n    module.exports = (hex, options = {}) => {\n      if (typeof hex !== \"string\" || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n        throw new TypeError(\"Expected a valid hex string\");\n      }\n      hex = hex.replace(/^#/, \"\");\n      let alphaFromHex = 1;\n      if (hex.length === 8) {\n        alphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n        hex = hex.slice(0, 6);\n      }\n      if (hex.length === 4) {\n        alphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n        hex = hex.slice(0, 3);\n      }\n      if (hex.length === 3) {\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n      }\n      const number2 = Number.parseInt(hex, 16);\n      const red = number2 >> 16;\n      const green = number2 >> 8 & 255;\n      const blue = number2 & 255;\n      const alpha = typeof options.alpha === \"number\" ? options.alpha : alphaFromHex;\n      if (options.format === \"array\") {\n        return [red, green, blue, alpha];\n      }\n      if (options.format === \"css\") {\n        const alphaString = alpha === 1 ? \"\" : ` / ${Number((alpha * 100).toFixed(2))}%`;\n        return `rgb(${red} ${green} ${blue}${alphaString})`;\n      }\n      return { red, green, blue, alpha };\n    };\n  }\n});\n\n// node_modules/.pnpm/escape-html@1.0.3/node_modules/escape-html/index.js\nvar require_escape_html = __commonJS({\n  \"node_modules/.pnpm/escape-html@1.0.3/node_modules/escape-html/index.js\"(exports2, module) {\n    \"use strict\";\n    var matchHtmlRegExp = /[\"'&<>]/;\n    module.exports = escapeHtml;\n    function escapeHtml(string) {\n      var str = \"\" + string;\n      var match = matchHtmlRegExp.exec(str);\n      if (!match) {\n        return str;\n      }\n      var escape;\n      var html = \"\";\n      var index = 0;\n      var lastIndex = 0;\n      for (index = match.index; index < str.length; index++) {\n        switch (str.charCodeAt(index)) {\n          case 34:\n            escape = \"&quot;\";\n            break;\n          case 38:\n            escape = \"&amp;\";\n            break;\n          case 39:\n            escape = \"&#39;\";\n            break;\n          case 60:\n            escape = \"&lt;\";\n            break;\n          case 62:\n            escape = \"&gt;\";\n            break;\n          default:\n            continue;\n        }\n        if (lastIndex !== index) {\n          html += str.substring(lastIndex, index);\n        }\n        lastIndex = index + 1;\n        html += escape;\n      }\n      return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n    }\n  }\n});\n\n// node_modules/.pnpm/linebreak@1.1.0/node_modules/linebreak/dist/module.mjs\nvar import_unicode_trie = __toESM(require_unicode_trie(), 1);\nvar import_base64_js = __toESM(require_b64(), 1);\nvar $557adaaeb0c7885f$exports = {};\nvar $1627905f8be2ef3f$export$fb4028874a74450 = 5;\nvar $1627905f8be2ef3f$export$1bb1140fe1358b00 = 12;\nvar $1627905f8be2ef3f$export$f3e416a182673355 = 13;\nvar $1627905f8be2ef3f$export$24aa617c849a894a = 16;\nvar $1627905f8be2ef3f$export$a73c4d14459b698d = 17;\nvar $1627905f8be2ef3f$export$9e5d732f3676a9ba = 22;\nvar $1627905f8be2ef3f$export$1dff41d5c0caca01 = 28;\nvar $1627905f8be2ef3f$export$30a74a373318dec6 = 31;\nvar $1627905f8be2ef3f$export$d710c5f50fc7496a = 33;\nvar $1627905f8be2ef3f$export$66498d28055820a9 = 34;\nvar $1627905f8be2ef3f$export$eb6c6d0b7c8826f2 = 35;\nvar $1627905f8be2ef3f$export$de92be486109a1df = 36;\nvar $1627905f8be2ef3f$export$606cfc2a8896c91f = 37;\nvar $1627905f8be2ef3f$export$e51d3c675bb0140d = 38;\nvar $1627905f8be2ef3f$export$da51c6332ad11d7b = 39;\nvar $1627905f8be2ef3f$export$bea437c40441867d = 40;\nvar $1627905f8be2ef3f$export$c4c7eecbfed13dc9 = 41;\nvar $1627905f8be2ef3f$export$98e1f8a379849661 = 42;\nvar $32627af916ac1b00$export$98f50d781a474745 = 0;\nvar $32627af916ac1b00$export$12ee1f8f5315ca7e = 1;\nvar $32627af916ac1b00$export$e4965ce242860454 = 2;\nvar $32627af916ac1b00$export$8f14048969dcd45e = 3;\nvar $32627af916ac1b00$export$133eb141bf58aff4 = 4;\nvar $32627af916ac1b00$export$5bdb8ccbf5c57afc = [\n  [\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$8f14048969dcd45e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ],\n  [\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$e4965ce242860454,\n    $32627af916ac1b00$export$133eb141bf58aff4,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$98f50d781a474745,\n    $32627af916ac1b00$export$12ee1f8f5315ca7e,\n    $32627af916ac1b00$export$98f50d781a474745\n  ]\n];\nvar $557adaaeb0c7885f$var$data = import_base64_js.default.toByteArray(\"AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/\");\nvar $557adaaeb0c7885f$var$classTrie = new import_unicode_trie.default($557adaaeb0c7885f$var$data);\nvar $557adaaeb0c7885f$var$mapClass = function(c2) {\n  switch (c2) {\n    case $1627905f8be2ef3f$export$d710c5f50fc7496a:\n      return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n    case $1627905f8be2ef3f$export$da51c6332ad11d7b:\n    case $1627905f8be2ef3f$export$bea437c40441867d:\n    case $1627905f8be2ef3f$export$98e1f8a379849661:\n      return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n    case $1627905f8be2ef3f$export$eb6c6d0b7c8826f2:\n      return $1627905f8be2ef3f$export$fb4028874a74450;\n    default:\n      return c2;\n  }\n};\nvar $557adaaeb0c7885f$var$mapFirst = function(c2) {\n  switch (c2) {\n    case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n    case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n      return $1627905f8be2ef3f$export$66498d28055820a9;\n    case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n      return $1627905f8be2ef3f$export$9e5d732f3676a9ba;\n    default:\n      return c2;\n  }\n};\nvar $557adaaeb0c7885f$var$Break = class {\n  constructor(position, required = false) {\n    this.position = position;\n    this.required = required;\n  }\n};\nvar $557adaaeb0c7885f$var$LineBreaker = class {\n  nextCodePoint() {\n    const code = this.string.charCodeAt(this.pos++);\n    const next = this.string.charCodeAt(this.pos);\n    if (55296 <= code && code <= 56319 && 56320 <= next && next <= 57343) {\n      this.pos++;\n      return (code - 55296) * 1024 + (next - 56320) + 65536;\n    }\n    return code;\n  }\n  nextCharClass() {\n    return $557adaaeb0c7885f$var$mapClass($557adaaeb0c7885f$var$classTrie.get(this.nextCodePoint()));\n  }\n  getSimpleBreak() {\n    switch (this.nextClass) {\n      case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n        return false;\n      case $1627905f8be2ef3f$export$66498d28055820a9:\n      case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n      case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n        this.curClass = $1627905f8be2ef3f$export$66498d28055820a9;\n        return false;\n      case $1627905f8be2ef3f$export$de92be486109a1df:\n        this.curClass = $1627905f8be2ef3f$export$de92be486109a1df;\n        return false;\n    }\n    return null;\n  }\n  getPairTableBreak(lastClass) {\n    let shouldBreak = false;\n    switch ($32627af916ac1b00$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]) {\n      case $32627af916ac1b00$export$98f50d781a474745:\n        shouldBreak = true;\n        break;\n      case $32627af916ac1b00$export$12ee1f8f5315ca7e:\n        shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n        break;\n      case $32627af916ac1b00$export$e4965ce242860454:\n        shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n        if (!shouldBreak) {\n          shouldBreak = false;\n          return shouldBreak;\n        }\n        break;\n      case $32627af916ac1b00$export$8f14048969dcd45e:\n        if (lastClass !== $1627905f8be2ef3f$export$c4c7eecbfed13dc9)\n          return shouldBreak;\n        break;\n      case $32627af916ac1b00$export$133eb141bf58aff4:\n        break;\n    }\n    if (this.LB8a)\n      shouldBreak = false;\n    if (this.LB21a && (this.curClass === $1627905f8be2ef3f$export$24aa617c849a894a || this.curClass === $1627905f8be2ef3f$export$a73c4d14459b698d)) {\n      shouldBreak = false;\n      this.LB21a = false;\n    } else\n      this.LB21a = this.curClass === $1627905f8be2ef3f$export$f3e416a182673355;\n    if (this.curClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n      this.LB30a++;\n      if (this.LB30a == 2 && this.nextClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n        shouldBreak = true;\n        this.LB30a = 0;\n      }\n    } else\n      this.LB30a = 0;\n    this.curClass = this.nextClass;\n    return shouldBreak;\n  }\n  nextBreak() {\n    if (this.curClass == null) {\n      let firstClass = this.nextCharClass();\n      this.curClass = $557adaaeb0c7885f$var$mapFirst(firstClass);\n      this.nextClass = firstClass;\n      this.LB8a = firstClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n      this.LB30a = 0;\n    }\n    while (this.pos < this.string.length) {\n      this.lastPos = this.pos;\n      const lastClass = this.nextClass;\n      this.nextClass = this.nextCharClass();\n      if (this.curClass === $1627905f8be2ef3f$export$66498d28055820a9 || this.curClass === $1627905f8be2ef3f$export$de92be486109a1df && this.nextClass !== $1627905f8be2ef3f$export$606cfc2a8896c91f) {\n        this.curClass = $557adaaeb0c7885f$var$mapFirst($557adaaeb0c7885f$var$mapClass(this.nextClass));\n        return new $557adaaeb0c7885f$var$Break(this.lastPos, true);\n      }\n      let shouldBreak = this.getSimpleBreak();\n      if (shouldBreak === null)\n        shouldBreak = this.getPairTableBreak(lastClass);\n      this.LB8a = this.nextClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n      if (shouldBreak)\n        return new $557adaaeb0c7885f$var$Break(this.lastPos);\n    }\n    if (this.lastPos < this.string.length) {\n      this.lastPos = this.string.length;\n      return new $557adaaeb0c7885f$var$Break(this.string.length);\n    }\n    return null;\n  }\n  constructor(string) {\n    this.string = string;\n    this.pos = 0;\n    this.lastPos = 0;\n    this.curClass = null;\n    this.nextClass = null;\n    this.LB8a = false;\n    this.LB21a = false;\n    this.LB30a = 0;\n  }\n};\n$557adaaeb0c7885f$exports = $557adaaeb0c7885f$var$LineBreaker;\n\n// node_modules/.pnpm/satori@0.10.1/node_modules/satori/dist/index.wasm.js\nvar import_css_to_react_native = __toESM(require_css_to_react_native(), 1);\nvar import_css_background_parser = __toESM(require_css_background_parser(), 1);\nvar import_css_box_shadow = __toESM(require_css_box_shadow(), 1);\n\n// node_modules/.pnpm/parse-css-color@0.2.1/node_modules/parse-css-color/dist/index.esm.js\nvar import_color_name = __toESM(require_color_name());\nvar import_hex_rgb = __toESM(require_hex_rgb());\nvar pattern = /^#([a-f0-9]{3,4}|[a-f0-9]{4}(?:[a-f0-9]{2}){1,2})\\b$/;\nvar hexRe = new RegExp(pattern, \"i\");\nvar float = \"-?\\\\d*(?:\\\\.\\\\d+)\";\nvar number = `(${float}?)`;\nvar percentage = `(${float}?%)`;\nvar numberOrPercentage = `(${float}?%?)`;\nvar pattern$1 = `^\n  hsla?\\\\(\n    \\\\s*(-?\\\\d*(?:\\\\.\\\\d+)?(?:deg|rad|turn)?)\\\\s*,\n    \\\\s*${percentage}\\\\s*,\n    \\\\s*${percentage}\\\\s*\n    (?:,\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar hsl3Re = new RegExp(pattern$1);\nvar pattern$2 = `^\n  hsla?\\\\(\n    \\\\s*(-?\\\\d*(?:\\\\.\\\\d+)?(?:deg|rad|turn)?)\\\\s*\n    \\\\s+${percentage}\n    \\\\s+${percentage}\n    \\\\s*(?:\\\\s*\\\\/\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar hsl4Re = new RegExp(pattern$2);\nvar pattern$3 = `^\n  rgba?\\\\(\n    \\\\s*${number}\\\\s*,\n    \\\\s*${number}\\\\s*,\n    \\\\s*${number}\\\\s*\n    (?:,\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar rgb3NumberRe = new RegExp(pattern$3);\nvar pattern$4 = `^\n  rgba?\\\\(\n    \\\\s*${percentage}\\\\s*,\n    \\\\s*${percentage}\\\\s*,\n    \\\\s*${percentage}\\\\s*\n    (?:,\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n  $\n`.replace(/\\n|\\s/g, \"\");\nvar rgb3PercentageRe = new RegExp(pattern$4);\nvar pattern$5 = `^\n  rgba?\\\\(\n    \\\\s*${number}\n    \\\\s+${number}\n    \\\\s+${number}\n    \\\\s*(?:\\\\s*\\\\/\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n$\n`.replace(/\\n|\\s/g, \"\");\nvar rgb4NumberRe = new RegExp(pattern$5);\nvar pattern$6 = `^\n  rgba?\\\\(\n    \\\\s*${percentage}\n    \\\\s+${percentage}\n    \\\\s+${percentage}\n    \\\\s*(?:\\\\s*\\\\/\\\\s*${numberOrPercentage}\\\\s*)?\n  \\\\)\n$\n`.replace(/\\n|\\s/g, \"\");\nvar rgb4PercentageRe = new RegExp(pattern$6);\nvar pattern$7 = /^transparent$/;\nvar transparentRe = new RegExp(pattern$7, \"i\");\nvar clamp = (num, min, max2) => Math.min(Math.max(min, num), max2);\nvar parseRGB = (num) => {\n  let n = num;\n  if (typeof n !== \"number\")\n    n = n.endsWith(\"%\") ? parseFloat(n) * 255 / 100 : parseFloat(n);\n  return clamp(Math.round(n), 0, 255);\n};\nvar parsePercentage = (percentage2) => clamp(parseFloat(percentage2), 0, 100);\nfunction parseAlpha(alpha) {\n  let a = alpha;\n  if (typeof a !== \"number\")\n    a = a.endsWith(\"%\") ? parseFloat(a) / 100 : parseFloat(a);\n  return clamp(a, 0, 1);\n}\nfunction getHEX(hex) {\n  const [r, g2, b, a] = (0, import_hex_rgb.default)(hex, { format: \"array\" });\n  return getRGB([null, ...[r, g2, b, a]]);\n}\nfunction getHSL([, h, s, l, a = 1]) {\n  let hh = h;\n  if (hh.endsWith(\"turn\")) {\n    hh = parseFloat(hh) * 360 / 1;\n  } else if (hh.endsWith(\"rad\")) {\n    hh = Math.round(parseFloat(hh) * 180 / Math.PI);\n  } else {\n    hh = parseFloat(hh);\n  }\n  return {\n    type: \"hsl\",\n    values: [hh, parsePercentage(s), parsePercentage(l)],\n    alpha: parseAlpha(a === null ? 1 : a)\n  };\n}\nfunction getRGB([, r, g2, b, a = 1]) {\n  return {\n    type: \"rgb\",\n    values: [r, g2, b].map(parseRGB),\n    alpha: parseAlpha(a === null ? 1 : a)\n  };\n}\nvar parseCSSColor = (str) => {\n  if (typeof str !== \"string\")\n    return null;\n  const hex = hexRe.exec(str);\n  if (hex)\n    return getHEX(hex[0]);\n  const hsl = hsl4Re.exec(str) || hsl3Re.exec(str);\n  if (hsl)\n    return getHSL(hsl);\n  const rgb = rgb4NumberRe.exec(str) || rgb4PercentageRe.exec(str) || rgb3NumberRe.exec(str) || rgb3PercentageRe.exec(str);\n  if (rgb)\n    return getRGB(rgb);\n  if (transparentRe.exec(str))\n    return getRGB([null, 0, 0, 0, 0]);\n  const cn = import_color_name.default[str.toLowerCase()];\n  if (cn)\n    return getRGB([null, cn[0], cn[1], cn[2], 1]);\n  return null;\n};\nvar index_esm_default = parseCSSColor;\n\n// node_modules/.pnpm/satori@0.10.1/node_modules/satori/dist/index.wasm.js\nvar import_postcss_value_parser = __toESM(require_lib(), 1);\nvar import_css_to_react_native2 = __toESM(require_css_to_react_native(), 1);\nvar import_escape_html = __toESM(require_escape_html(), 1);\nvar import_css_to_react_native3 = __toESM(require_css_to_react_native(), 1);\n\n// node_modules/.pnpm/@shuding+opentype.js@1.4.0-beta.0/node_modules/@shuding/opentype.js/dist/opentype.module.js\nvar u8 = Uint8Array;\nvar u16 = Uint16Array;\nvar u32 = Uint32Array;\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\nvar freb = function(eb, start) {\n  var b = new u16(31);\n  for (var i = 0; i < 31; ++i) {\n    b[i] = start += 1 << eb[i - 1];\n  }\n  var r = new u32(b[30]);\n  for (var i = 1; i < 30; ++i) {\n    for (var j = b[i]; j < b[i + 1]; ++j) {\n      r[j] = j - b[i] << 5 | i;\n    }\n  }\n  return [b, r];\n};\nvar _a = freb(fleb, 2);\nvar fl = _a[0];\nvar revfl = _a[1];\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0);\nvar fd = _b[0];\nvar rev = new u16(32768);\nfor (i = 0; i < 32768; ++i) {\n  x = (i & 43690) >>> 1 | (i & 21845) << 1;\n  x = (x & 52428) >>> 2 | (x & 13107) << 2;\n  x = (x & 61680) >>> 4 | (x & 3855) << 4;\n  rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;\n}\nvar x;\nvar i;\nvar hMap = function(cd, mb, r) {\n  var s = cd.length;\n  var i = 0;\n  var l = new u16(mb);\n  for (; i < s; ++i) {\n    if (cd[i]) {\n      ++l[cd[i] - 1];\n    }\n  }\n  var le = new u16(mb);\n  for (i = 0; i < mb; ++i) {\n    le[i] = le[i - 1] + l[i - 1] << 1;\n  }\n  var co;\n  if (r) {\n    co = new u16(1 << mb);\n    var rvb = 15 - mb;\n    for (i = 0; i < s; ++i) {\n      if (cd[i]) {\n        var sv = i << 4 | cd[i];\n        var r_1 = mb - cd[i];\n        var v = le[cd[i] - 1]++ << r_1;\n        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {\n          co[rev[v] >>> rvb] = sv;\n        }\n      }\n    }\n  } else {\n    co = new u16(s);\n    for (i = 0; i < s; ++i) {\n      if (cd[i]) {\n        co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];\n      }\n    }\n  }\n  return co;\n};\nvar flt = new u8(288);\nfor (i = 0; i < 144; ++i) {\n  flt[i] = 8;\n}\nvar i;\nfor (i = 144; i < 256; ++i) {\n  flt[i] = 9;\n}\nvar i;\nfor (i = 256; i < 280; ++i) {\n  flt[i] = 7;\n}\nvar i;\nfor (i = 280; i < 288; ++i) {\n  flt[i] = 8;\n}\nvar i;\nvar fdt = new u8(32);\nfor (i = 0; i < 32; ++i) {\n  fdt[i] = 5;\n}\nvar i;\nvar flrm = /* @__PURE__ */ hMap(flt, 9, 1);\nvar fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);\nvar max = function(a) {\n  var m = a[0];\n  for (var i = 1; i < a.length; ++i) {\n    if (a[i] > m) {\n      m = a[i];\n    }\n  }\n  return m;\n};\nvar bits = function(d, p, m) {\n  var o = p / 8 | 0;\n  return (d[o] | d[o + 1] << 8) >> (p & 7) & m;\n};\nvar bits16 = function(d, p) {\n  var o = p / 8 | 0;\n  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);\n};\nvar shft = function(p) {\n  return (p + 7) / 8 | 0;\n};\nvar slc = function(v, s, e) {\n  if (s == null || s < 0) {\n    s = 0;\n  }\n  if (e == null || e > v.length) {\n    e = v.length;\n  }\n  var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n  n.set(v.subarray(s, e));\n  return n;\n};\nvar ec = [\n  \"unexpected EOF\",\n  \"invalid block type\",\n  \"invalid length/literal\",\n  \"invalid distance\",\n  \"stream finished\",\n  \"no stream handler\",\n  ,\n  \"no callback\",\n  \"invalid UTF-8 data\",\n  \"extra field too long\",\n  \"date not in range 1980-2099\",\n  \"filename too long\",\n  \"stream finishing\",\n  \"invalid zip data\"\n];\nvar err = function(ind, msg, nt2) {\n  var e = new Error(msg || ec[ind]);\n  e.code = ind;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(e, err);\n  }\n  if (!nt2) {\n    throw e;\n  }\n  return e;\n};\nvar inflt = function(dat, buf, st) {\n  var sl2 = dat.length;\n  if (!sl2 || st && st.f && !st.l) {\n    return buf || new u8(0);\n  }\n  var noBuf = !buf || st;\n  var noSt = !st || st.i;\n  if (!st) {\n    st = {};\n  }\n  if (!buf) {\n    buf = new u8(sl2 * 3);\n  }\n  var cbuf = function(l2) {\n    var bl2 = buf.length;\n    if (l2 > bl2) {\n      var nbuf = new u8(Math.max(bl2 * 2, l2));\n      nbuf.set(buf);\n      buf = nbuf;\n    }\n  };\n  var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n  var tbts = sl2 * 8;\n  do {\n    if (!lm) {\n      final = bits(dat, pos, 1);\n      var type = bits(dat, pos + 1, 3);\n      pos += 3;\n      if (!type) {\n        var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;\n        if (t > sl2) {\n          if (noSt) {\n            err(0);\n          }\n          break;\n        }\n        if (noBuf) {\n          cbuf(bt + l);\n        }\n        buf.set(dat.subarray(s, t), bt);\n        st.b = bt += l, st.p = pos = t * 8, st.f = final;\n        continue;\n      } else if (type == 1) {\n        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n      } else if (type == 2) {\n        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n        var tl2 = hLit + bits(dat, pos + 5, 31) + 1;\n        pos += 14;\n        var ldt = new u8(tl2);\n        var clt = new u8(19);\n        for (var i = 0; i < hcLen; ++i) {\n          clt[clim[i]] = bits(dat, pos + i * 3, 7);\n        }\n        pos += hcLen * 3;\n        var clb = max(clt), clbmsk = (1 << clb) - 1;\n        var clm = hMap(clt, clb, 1);\n        for (var i = 0; i < tl2; ) {\n          var r = clm[bits(dat, pos, clbmsk)];\n          pos += r & 15;\n          var s = r >>> 4;\n          if (s < 16) {\n            ldt[i++] = s;\n          } else {\n            var c2 = 0, n = 0;\n            if (s == 16) {\n              n = 3 + bits(dat, pos, 3), pos += 2, c2 = ldt[i - 1];\n            } else if (s == 17) {\n              n = 3 + bits(dat, pos, 7), pos += 3;\n            } else if (s == 18) {\n              n = 11 + bits(dat, pos, 127), pos += 7;\n            }\n            while (n--) {\n              ldt[i++] = c2;\n            }\n          }\n        }\n        var lt = ldt.subarray(0, hLit), dt2 = ldt.subarray(hLit);\n        lbt = max(lt);\n        dbt = max(dt2);\n        lm = hMap(lt, lbt, 1);\n        dm = hMap(dt2, dbt, 1);\n      } else {\n        err(1);\n      }\n      if (pos > tbts) {\n        if (noSt) {\n          err(0);\n        }\n        break;\n      }\n    }\n    if (noBuf) {\n      cbuf(bt + 131072);\n    }\n    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n    var lpos = pos;\n    for (; ; lpos = pos) {\n      var c2 = lm[bits16(dat, pos) & lms], sym = c2 >>> 4;\n      pos += c2 & 15;\n      if (pos > tbts) {\n        if (noSt) {\n          err(0);\n        }\n        break;\n      }\n      if (!c2) {\n        err(2);\n      }\n      if (sym < 256) {\n        buf[bt++] = sym;\n      } else if (sym == 256) {\n        lpos = pos, lm = null;\n        break;\n      } else {\n        var add = sym - 254;\n        if (sym > 264) {\n          var i = sym - 257, b = fleb[i];\n          add = bits(dat, pos, (1 << b) - 1) + fl[i];\n          pos += b;\n        }\n        var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n        if (!d) {\n          err(3);\n        }\n        pos += d & 15;\n        var dt2 = fd[dsym];\n        if (dsym > 3) {\n          var b = fdeb[dsym];\n          dt2 += bits16(dat, pos) & (1 << b) - 1, pos += b;\n        }\n        if (pos > tbts) {\n          if (noSt) {\n            err(0);\n          }\n          break;\n        }\n        if (noBuf) {\n          cbuf(bt + 131072);\n        }\n        var end = bt + add;\n        for (; bt < end; bt += 4) {\n          buf[bt] = buf[bt - dt2];\n          buf[bt + 1] = buf[bt + 1 - dt2];\n          buf[bt + 2] = buf[bt + 2 - dt2];\n          buf[bt + 3] = buf[bt + 3 - dt2];\n        }\n        bt = end;\n      }\n    }\n    st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n    if (lm) {\n      final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    }\n  } while (!final);\n  return bt == buf.length ? buf : slc(buf, 0, bt);\n};\nvar et = /* @__PURE__ */ new u8(0);\nfunction inflateSync(data, out) {\n  return inflt(data, out);\n}\nvar td = typeof TextDecoder != \"undefined\" && /* @__PURE__ */ new TextDecoder();\nvar tds = 0;\ntry {\n  td.decode(et, { stream: true });\n  tds = 1;\n} catch (e) {\n}\nfunction Path() {\n  this.commands = [];\n  this.fill = \"black\";\n  this.stroke = null;\n  this.strokeWidth = 1;\n}\nPath.prototype.moveTo = function(x, y) {\n  this.commands.push({\n    type: \"M\",\n    x,\n    y\n  });\n};\nPath.prototype.lineTo = function(x, y) {\n  this.commands.push({\n    type: \"L\",\n    x,\n    y\n  });\n};\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n  this.commands.push({\n    type: \"C\",\n    x1,\n    y1,\n    x2,\n    y2,\n    x,\n    y\n  });\n};\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n  this.commands.push({\n    type: \"Q\",\n    x1,\n    y1,\n    x,\n    y\n  });\n};\nPath.prototype.close = Path.prototype.closePath = function() {\n  this.commands.push({\n    type: \"Z\"\n  });\n};\nPath.prototype.extend = function(pathOrCommands) {\n  if (pathOrCommands.commands) {\n    pathOrCommands = pathOrCommands.commands;\n  }\n  Array.prototype.push.apply(this.commands, pathOrCommands);\n};\nPath.prototype.toPathData = function(decimalPlaces) {\n  decimalPlaces = decimalPlaces !== void 0 ? decimalPlaces : 2;\n  function floatToString(v) {\n    if (Math.round(v) === v) {\n      return \"\" + Math.round(v);\n    } else {\n      return v.toFixed(decimalPlaces);\n    }\n  }\n  function packValues() {\n    var arguments$1 = arguments;\n    var s = \"\";\n    for (var i2 = 0; i2 < arguments.length; i2 += 1) {\n      var v = arguments$1[i2];\n      if (v >= 0 && i2 > 0) {\n        s += \" \";\n      }\n      s += floatToString(v);\n    }\n    return s;\n  }\n  var d = \"\";\n  for (var i = 0; i < this.commands.length; i += 1) {\n    var cmd = this.commands[i];\n    if (cmd.type === \"M\") {\n      d += \"M\" + packValues(cmd.x, cmd.y);\n    } else if (cmd.type === \"L\") {\n      d += \"L\" + packValues(cmd.x, cmd.y);\n    } else if (cmd.type === \"C\") {\n      d += \"C\" + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n    } else if (cmd.type === \"Q\") {\n      d += \"Q\" + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n    } else if (cmd.type === \"Z\") {\n      d += \"Z\";\n    }\n  }\n  return d;\n};\nvar cffStandardStrings = [\n  \".notdef\",\n  \"space\",\n  \"exclam\",\n  \"quotedbl\",\n  \"numbersign\",\n  \"dollar\",\n  \"percent\",\n  \"ampersand\",\n  \"quoteright\",\n  \"parenleft\",\n  \"parenright\",\n  \"asterisk\",\n  \"plus\",\n  \"comma\",\n  \"hyphen\",\n  \"period\",\n  \"slash\",\n  \"zero\",\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n  \"seven\",\n  \"eight\",\n  \"nine\",\n  \"colon\",\n  \"semicolon\",\n  \"less\",\n  \"equal\",\n  \"greater\",\n  \"question\",\n  \"at\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"bracketleft\",\n  \"backslash\",\n  \"bracketright\",\n  \"asciicircum\",\n  \"underscore\",\n  \"quoteleft\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"braceleft\",\n  \"bar\",\n  \"braceright\",\n  \"asciitilde\",\n  \"exclamdown\",\n  \"cent\",\n  \"sterling\",\n  \"fraction\",\n  \"yen\",\n  \"florin\",\n  \"section\",\n  \"currency\",\n  \"quotesingle\",\n  \"quotedblleft\",\n  \"guillemotleft\",\n  \"guilsinglleft\",\n  \"guilsinglright\",\n  \"fi\",\n  \"fl\",\n  \"endash\",\n  \"dagger\",\n  \"daggerdbl\",\n  \"periodcentered\",\n  \"paragraph\",\n  \"bullet\",\n  \"quotesinglbase\",\n  \"quotedblbase\",\n  \"quotedblright\",\n  \"guillemotright\",\n  \"ellipsis\",\n  \"perthousand\",\n  \"questiondown\",\n  \"grave\",\n  \"acute\",\n  \"circumflex\",\n  \"tilde\",\n  \"macron\",\n  \"breve\",\n  \"dotaccent\",\n  \"dieresis\",\n  \"ring\",\n  \"cedilla\",\n  \"hungarumlaut\",\n  \"ogonek\",\n  \"caron\",\n  \"emdash\",\n  \"AE\",\n  \"ordfeminine\",\n  \"Lslash\",\n  \"Oslash\",\n  \"OE\",\n  \"ordmasculine\",\n  \"ae\",\n  \"dotlessi\",\n  \"lslash\",\n  \"oslash\",\n  \"oe\",\n  \"germandbls\",\n  \"onesuperior\",\n  \"logicalnot\",\n  \"mu\",\n  \"trademark\",\n  \"Eth\",\n  \"onehalf\",\n  \"plusminus\",\n  \"Thorn\",\n  \"onequarter\",\n  \"divide\",\n  \"brokenbar\",\n  \"degree\",\n  \"thorn\",\n  \"threequarters\",\n  \"twosuperior\",\n  \"registered\",\n  \"minus\",\n  \"eth\",\n  \"multiply\",\n  \"threesuperior\",\n  \"copyright\",\n  \"Aacute\",\n  \"Acircumflex\",\n  \"Adieresis\",\n  \"Agrave\",\n  \"Aring\",\n  \"Atilde\",\n  \"Ccedilla\",\n  \"Eacute\",\n  \"Ecircumflex\",\n  \"Edieresis\",\n  \"Egrave\",\n  \"Iacute\",\n  \"Icircumflex\",\n  \"Idieresis\",\n  \"Igrave\",\n  \"Ntilde\",\n  \"Oacute\",\n  \"Ocircumflex\",\n  \"Odieresis\",\n  \"Ograve\",\n  \"Otilde\",\n  \"Scaron\",\n  \"Uacute\",\n  \"Ucircumflex\",\n  \"Udieresis\",\n  \"Ugrave\",\n  \"Yacute\",\n  \"Ydieresis\",\n  \"Zcaron\",\n  \"aacute\",\n  \"acircumflex\",\n  \"adieresis\",\n  \"agrave\",\n  \"aring\",\n  \"atilde\",\n  \"ccedilla\",\n  \"eacute\",\n  \"ecircumflex\",\n  \"edieresis\",\n  \"egrave\",\n  \"iacute\",\n  \"icircumflex\",\n  \"idieresis\",\n  \"igrave\",\n  \"ntilde\",\n  \"oacute\",\n  \"ocircumflex\",\n  \"odieresis\",\n  \"ograve\",\n  \"otilde\",\n  \"scaron\",\n  \"uacute\",\n  \"ucircumflex\",\n  \"udieresis\",\n  \"ugrave\",\n  \"yacute\",\n  \"ydieresis\",\n  \"zcaron\",\n  \"exclamsmall\",\n  \"Hungarumlautsmall\",\n  \"dollaroldstyle\",\n  \"dollarsuperior\",\n  \"ampersandsmall\",\n  \"Acutesmall\",\n  \"parenleftsuperior\",\n  \"parenrightsuperior\",\n  \"266 ff\",\n  \"onedotenleader\",\n  \"zerooldstyle\",\n  \"oneoldstyle\",\n  \"twooldstyle\",\n  \"threeoldstyle\",\n  \"fouroldstyle\",\n  \"fiveoldstyle\",\n  \"sixoldstyle\",\n  \"sevenoldstyle\",\n  \"eightoldstyle\",\n  \"nineoldstyle\",\n  \"commasuperior\",\n  \"threequartersemdash\",\n  \"periodsuperior\",\n  \"questionsmall\",\n  \"asuperior\",\n  \"bsuperior\",\n  \"centsuperior\",\n  \"dsuperior\",\n  \"esuperior\",\n  \"isuperior\",\n  \"lsuperior\",\n  \"msuperior\",\n  \"nsuperior\",\n  \"osuperior\",\n  \"rsuperior\",\n  \"ssuperior\",\n  \"tsuperior\",\n  \"ff\",\n  \"ffi\",\n  \"ffl\",\n  \"parenleftinferior\",\n  \"parenrightinferior\",\n  \"Circumflexsmall\",\n  \"hyphensuperior\",\n  \"Gravesmall\",\n  \"Asmall\",\n  \"Bsmall\",\n  \"Csmall\",\n  \"Dsmall\",\n  \"Esmall\",\n  \"Fsmall\",\n  \"Gsmall\",\n  \"Hsmall\",\n  \"Ismall\",\n  \"Jsmall\",\n  \"Ksmall\",\n  \"Lsmall\",\n  \"Msmall\",\n  \"Nsmall\",\n  \"Osmall\",\n  \"Psmall\",\n  \"Qsmall\",\n  \"Rsmall\",\n  \"Ssmall\",\n  \"Tsmall\",\n  \"Usmall\",\n  \"Vsmall\",\n  \"Wsmall\",\n  \"Xsmall\",\n  \"Ysmall\",\n  \"Zsmall\",\n  \"colonmonetary\",\n  \"onefitted\",\n  \"rupiah\",\n  \"Tildesmall\",\n  \"exclamdownsmall\",\n  \"centoldstyle\",\n  \"Lslashsmall\",\n  \"Scaronsmall\",\n  \"Zcaronsmall\",\n  \"Dieresissmall\",\n  \"Brevesmall\",\n  \"Caronsmall\",\n  \"Dotaccentsmall\",\n  \"Macronsmall\",\n  \"figuredash\",\n  \"hypheninferior\",\n  \"Ogoneksmall\",\n  \"Ringsmall\",\n  \"Cedillasmall\",\n  \"questiondownsmall\",\n  \"oneeighth\",\n  \"threeeighths\",\n  \"fiveeighths\",\n  \"seveneighths\",\n  \"onethird\",\n  \"twothirds\",\n  \"zerosuperior\",\n  \"foursuperior\",\n  \"fivesuperior\",\n  \"sixsuperior\",\n  \"sevensuperior\",\n  \"eightsuperior\",\n  \"ninesuperior\",\n  \"zeroinferior\",\n  \"oneinferior\",\n  \"twoinferior\",\n  \"threeinferior\",\n  \"fourinferior\",\n  \"fiveinferior\",\n  \"sixinferior\",\n  \"seveninferior\",\n  \"eightinferior\",\n  \"nineinferior\",\n  \"centinferior\",\n  \"dollarinferior\",\n  \"periodinferior\",\n  \"commainferior\",\n  \"Agravesmall\",\n  \"Aacutesmall\",\n  \"Acircumflexsmall\",\n  \"Atildesmall\",\n  \"Adieresissmall\",\n  \"Aringsmall\",\n  \"AEsmall\",\n  \"Ccedillasmall\",\n  \"Egravesmall\",\n  \"Eacutesmall\",\n  \"Ecircumflexsmall\",\n  \"Edieresissmall\",\n  \"Igravesmall\",\n  \"Iacutesmall\",\n  \"Icircumflexsmall\",\n  \"Idieresissmall\",\n  \"Ethsmall\",\n  \"Ntildesmall\",\n  \"Ogravesmall\",\n  \"Oacutesmall\",\n  \"Ocircumflexsmall\",\n  \"Otildesmall\",\n  \"Odieresissmall\",\n  \"OEsmall\",\n  \"Oslashsmall\",\n  \"Ugravesmall\",\n  \"Uacutesmall\",\n  \"Ucircumflexsmall\",\n  \"Udieresissmall\",\n  \"Yacutesmall\",\n  \"Thornsmall\",\n  \"Ydieresissmall\",\n  \"001.000\",\n  \"001.001\",\n  \"001.002\",\n  \"001.003\",\n  \"Black\",\n  \"Bold\",\n  \"Book\",\n  \"Light\",\n  \"Medium\",\n  \"Regular\",\n  \"Roman\",\n  \"Semibold\"\n];\nvar cffStandardEncoding = [\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"space\",\n  \"exclam\",\n  \"quotedbl\",\n  \"numbersign\",\n  \"dollar\",\n  \"percent\",\n  \"ampersand\",\n  \"quoteright\",\n  \"parenleft\",\n  \"parenright\",\n  \"asterisk\",\n  \"plus\",\n  \"comma\",\n  \"hyphen\",\n  \"period\",\n  \"slash\",\n  \"zero\",\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n  \"seven\",\n  \"eight\",\n  \"nine\",\n  \"colon\",\n  \"semicolon\",\n  \"less\",\n  \"equal\",\n  \"greater\",\n  \"question\",\n  \"at\",\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n  \"bracketleft\",\n  \"backslash\",\n  \"bracketright\",\n  \"asciicircum\",\n  \"underscore\",\n  \"quoteleft\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n  \"braceleft\",\n  \"bar\",\n  \"braceright\",\n  \"asciitilde\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"exclamdown\",\n  \"cent\",\n  \"sterling\",\n  \"fraction\",\n  \"yen\",\n  \"florin\",\n  \"section\",\n  \"currency\",\n  \"quotesingle\",\n  \"quotedblleft\",\n  \"guillemotleft\",\n  \"guilsinglleft\",\n  \"guilsinglright\",\n  \"fi\",\n  \"fl\",\n  \"\",\n  \"endash\",\n  \"dagger\",\n  \"daggerdbl\",\n  \"periodcentered\",\n  \"\",\n  \"paragraph\",\n  \"bullet\",\n  \"quotesinglbase\",\n  \"quotedblbase\",\n  \"quotedblright\",\n  \"guillemotright\",\n  \"ellipsis\",\n  \"perthousand\",\n  \"\",\n  \"questiondown\",\n  \"\",\n  \"grave\",\n  \"acute\",\n  \"circumflex\",\n  \"tilde\",\n  \"macron\",\n  \"breve\",\n  \"dotaccent\",\n  \"dieresis\",\n  \"\",\n  \"ring\",\n  \"cedilla\",\n  \"\",\n  \"hungarumlaut\",\n  \"ogonek\",\n  \"caron\",\n  \"emdash\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"AE\",\n  \"\",\n  \"ordfeminine\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"Lslash\",\n  \"Oslash\",\n  \"OE\",\n  \"ordmasculine\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"ae\",\n  \"\",\n  \"\",\n  \"\",\n  \"dotlessi\",\n  \"\",\n  \"\",\n  \"lslash\",\n  \"oslash\",\n  \"oe\",\n  \"germandbls\"\n];\nvar cffExpertEncoding = [\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"space\",\n  \"exclamsmall\",\n  \"Hungarumlautsmall\",\n  \"\",\n  \"dollaroldstyle\",\n  \"dollarsuperior\",\n  \"ampersandsmall\",\n  \"Acutesmall\",\n  \"parenleftsuperior\",\n  \"parenrightsuperior\",\n  \"twodotenleader\",\n  \"onedotenleader\",\n  \"comma\",\n  \"hyphen\",\n  \"period\",\n  \"fraction\",\n  \"zerooldstyle\",\n  \"oneoldstyle\",\n  \"twooldstyle\",\n  \"threeoldstyle\",\n  \"fouroldstyle\",\n  \"fiveoldstyle\",\n  \"sixoldstyle\",\n  \"sevenoldstyle\",\n  \"eightoldstyle\",\n  \"nineoldstyle\",\n  \"colon\",\n  \"semicolon\",\n  \"commasuperior\",\n  \"threequartersemdash\",\n  \"periodsuperior\",\n  \"questionsmall\",\n  \"\",\n  \"asuperior\",\n  \"bsuperior\",\n  \"centsuperior\",\n  \"dsuperior\",\n  \"esuperior\",\n  \"\",\n  \"\",\n  \"isuperior\",\n  \"\",\n  \"\",\n  \"lsuperior\",\n  \"msuperior\",\n  \"nsuperior\",\n  \"osuperior\",\n  \"\",\n  \"\",\n  \"rsuperior\",\n  \"ssuperior\",\n  \"tsuperior\",\n  \"\",\n  \"ff\",\n  \"fi\",\n  \"fl\",\n  \"ffi\",\n  \"ffl\",\n  \"parenleftinferior\",\n  \"\",\n  \"parenrightinferior\",\n  \"Circumflexsmall\",\n  \"hyphensuperior\",\n  \"Gravesmall\",\n  \"Asmall\",\n  \"Bsmall\",\n  \"Csmall\",\n  \"Dsmall\",\n  \"Esmall\",\n  \"Fsmall\",\n  \"Gsmall\",\n  \"Hsmall\",\n  \"Ismall\",\n  \"Jsmall\",\n  \"Ksmall\",\n  \"Lsmall\",\n  \"Msmall\",\n  \"Nsmall\",\n  \"Osmall\",\n  \"Psmall\",\n  \"Qsmall\",\n  \"Rsmall\",\n  \"Ssmall\",\n  \"Tsmall\",\n  \"Usmall\",\n  \"Vsmall\",\n  \"Wsmall\",\n  \"Xsmall\",\n  \"Ysmall\",\n  \"Zsmall\",\n  \"colonmonetary\",\n  \"onefitted\",\n  \"rupiah\",\n  \"Tildesmall\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"\",\n  \"exclamdownsmall\",\n  \"centoldstyle\",\n  \"Lslashsmall\",\n  \"\",\n  \"\",\n  \"Scaronsmall\",\n  \"Zcaronsmall\",\n  \"Dieresissmall\",\n  \"Brevesmall\",\n  \"Caronsmall\",\n  \"\",\n  \"Dotaccentsmall\",\n  \"\",\n  \"\",\n  \"Macronsmall\",\n  \"\",\n  \"\",\n  \"figuredash\",\n  \"hypheninferior\",\n  \"\",\n  \"\",\n  \"Ogoneksmall\",\n  \"Ringsmall\",\n  \"Cedillasmall\",\n  \"\",\n  \"\",\n  \"\",\n  \"onequarter\",\n  \"onehalf\",\n  \"threequarters\",\n  \"questiondownsmall\",\n  \"oneeighth\",\n  \"threeeighths\",\n  \"fiveeighths\",\n  \"seveneighths\",\n  \"onethird\",\n  \"twothirds\",\n  \"\",\n  \"\",\n  \"zerosuperior\",\n  \"onesuperior\",\n  \"twosuperior\",\n  \"threesuperior\",\n  \"foursuperior\",\n  \"fivesuperior\",\n  \"sixsuperior\",\n  \"sevensuperior\",\n  \"eightsuperior\",\n  \"ninesuperior\",\n  \"zeroinferior\",\n  \"oneinferior\",\n  \"twoinferior\",\n  \"threeinferior\",\n  \"fourinferior\",\n  \"fiveinferior\",\n  \"sixinferior\",\n  \"seveninferior\",\n  \"eightinferior\",\n  \"nineinferior\",\n  \"centinferior\",\n  \"dollarinferior\",\n  \"periodinferior\",\n  \"commainferior\",\n  \"Agravesmall\",\n  \"Aacutesmall\",\n  \"Acircumflexsmall\",\n  \"Atildesmall\",\n  \"Adieresissmall\",\n  \"Aringsmall\",\n  \"AEsmall\",\n  \"Ccedillasmall\",\n  \"Egravesmall\",\n  \"Eacutesmall\",\n  \"Ecircumflexsmall\",\n  \"Edieresissmall\",\n  \"Igravesmall\",\n  \"Iacutesmall\",\n  \"Icircumflexsmall\",\n  \"Idieresissmall\",\n  \"Ethsmall\",\n  \"Ntildesmall\",\n  \"Ogravesmall\",\n  \"Oacutesmall\",\n  \"Ocircumflexsmall\",\n  \"Otildesmall\",\n  \"Odieresissmall\",\n  \"OEsmall\",\n  \"Oslashsmall\",\n  \"Ugravesmall\",\n  \"Uacutesmall\",\n  \"Ucircumflexsmall\",\n  \"Udieresissmall\",\n  \"Yacutesmall\",\n  \"Thornsmall\",\n  \"Ydieresissmall\"\n];\nfunction DefaultEncoding(font) {\n  this.font = font;\n}\nDefaultEncoding.prototype.charToGlyphIndex = function(c2) {\n  var code = c2.codePointAt(0);\n  var glyphs = this.font.glyphs;\n  if (glyphs) {\n    for (var i = 0; i < glyphs.length; i += 1) {\n      var glyph = glyphs.get(i);\n      for (var j = 0; j < glyph.unicodes.length; j += 1) {\n        if (glyph.unicodes[j] === code) {\n          return i;\n        }\n      }\n    }\n  }\n  return null;\n};\nfunction CmapEncoding(cmap2) {\n  this.cmap = cmap2;\n}\nCmapEncoding.prototype.charToGlyphIndex = function(c2) {\n  return this.cmap.glyphIndexMap[c2.codePointAt(0)] || 0;\n};\nfunction CffEncoding(encoding, charset) {\n  this.encoding = encoding;\n  this.charset = charset;\n}\nCffEncoding.prototype.charToGlyphIndex = function(s) {\n  var code = s.codePointAt(0);\n  var charName = this.encoding[code];\n  return this.charset.indexOf(charName);\n};\nfunction addGlyphNamesAll(font) {\n  var glyph;\n  var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n  var charCodes = Object.keys(glyphIndexMap);\n  for (var i = 0; i < charCodes.length; i += 1) {\n    var c2 = charCodes[i];\n    var glyphIndex = glyphIndexMap[c2];\n    glyph = font.glyphs.get(glyphIndex);\n    glyph.addUnicode(parseInt(c2));\n  }\n}\nfunction addGlyphNamesToUnicodeMap(font) {\n  font._IndexToUnicodeMap = {};\n  var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n  var charCodes = Object.keys(glyphIndexMap);\n  for (var i = 0; i < charCodes.length; i += 1) {\n    var c2 = charCodes[i];\n    var glyphIndex = glyphIndexMap[c2];\n    if (font._IndexToUnicodeMap[glyphIndex] === void 0) {\n      font._IndexToUnicodeMap[glyphIndex] = {\n        unicodes: [parseInt(c2)]\n      };\n    } else {\n      font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c2));\n    }\n  }\n}\nfunction addGlyphNames(font, opt) {\n  if (opt.lowMemory) {\n    addGlyphNamesToUnicodeMap(font);\n  } else {\n    addGlyphNamesAll(font);\n  }\n}\nfunction fail(message) {\n  throw new Error(message);\n}\nfunction argument(predicate, message) {\n  if (!predicate) {\n    fail(message);\n  }\n}\nvar check = { fail, argument, assert: argument };\nfunction getPathDefinition(glyph, path) {\n  var _path = path || new Path();\n  return {\n    configurable: true,\n    get: function() {\n      if (typeof _path === \"function\") {\n        _path = _path();\n      }\n      return _path;\n    },\n    set: function(p) {\n      _path = p;\n    }\n  };\n}\nfunction Glyph(options) {\n  this.bindConstructorValues(options);\n}\nGlyph.prototype.bindConstructorValues = function(options) {\n  this.index = options.index || 0;\n  this.name = options.name || null;\n  this.unicode = options.unicode || void 0;\n  this.unicodes = options.unicodes || options.unicode !== void 0 ? [options.unicode] : [];\n  if (\"xMin\" in options) {\n    this.xMin = options.xMin;\n  }\n  if (\"yMin\" in options) {\n    this.yMin = options.yMin;\n  }\n  if (\"xMax\" in options) {\n    this.xMax = options.xMax;\n  }\n  if (\"yMax\" in options) {\n    this.yMax = options.yMax;\n  }\n  if (\"advanceWidth\" in options) {\n    this.advanceWidth = options.advanceWidth;\n  }\n  Object.defineProperty(this, \"path\", getPathDefinition(this, options.path));\n};\nGlyph.prototype.addUnicode = function(unicode) {\n  if (this.unicodes.length === 0) {\n    this.unicode = unicode;\n  }\n  this.unicodes.push(unicode);\n};\nGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n  x = x !== void 0 ? x : 0;\n  y = y !== void 0 ? y : 0;\n  fontSize = fontSize !== void 0 ? fontSize : 72;\n  var commands;\n  var hPoints;\n  if (!options) {\n    options = {};\n  }\n  var xScale = options.xScale;\n  var yScale = options.yScale;\n  if (options.hinting && font && font.hinting) {\n    hPoints = this.path && font.hinting.exec(this, fontSize);\n  }\n  if (hPoints) {\n    commands = font.hinting.getCommands(hPoints);\n    x = Math.round(x);\n    y = Math.round(y);\n    xScale = yScale = 1;\n  } else {\n    commands = this.path.commands;\n    var scale = 1 / (this.path.unitsPerEm || 1e3) * fontSize;\n    if (xScale === void 0) {\n      xScale = scale;\n    }\n    if (yScale === void 0) {\n      yScale = scale;\n    }\n  }\n  var p = new Path();\n  for (var i = 0; i < commands.length; i += 1) {\n    var cmd = commands[i];\n    if (cmd.type === \"M\") {\n      p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === \"L\") {\n      p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === \"Q\") {\n      p.quadraticCurveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === \"C\") {\n      p.curveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x2 * xScale, y + -cmd.y2 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n    } else if (cmd.type === \"Z\") {\n      p.closePath();\n    }\n  }\n  return p;\n};\nGlyph.prototype.getContours = function() {\n  if (this.points === void 0) {\n    return [];\n  }\n  var contours = [];\n  var currentContour = [];\n  for (var i = 0; i < this.points.length; i += 1) {\n    var pt2 = this.points[i];\n    currentContour.push(pt2);\n    if (pt2.lastPointOfContour) {\n      contours.push(currentContour);\n      currentContour = [];\n    }\n  }\n  check.argument(currentContour.length === 0, \"There are still points left in the current contour.\");\n  return contours;\n};\nGlyph.prototype.getMetrics = function() {\n  var commands = this.path.commands;\n  var xCoords = [];\n  var yCoords = [];\n  for (var i = 0; i < commands.length; i += 1) {\n    var cmd = commands[i];\n    if (cmd.type !== \"Z\") {\n      xCoords.push(cmd.x);\n      yCoords.push(cmd.y);\n    }\n    if (cmd.type === \"Q\" || cmd.type === \"C\") {\n      xCoords.push(cmd.x1);\n      yCoords.push(cmd.y1);\n    }\n    if (cmd.type === \"C\") {\n      xCoords.push(cmd.x2);\n      yCoords.push(cmd.y2);\n    }\n  }\n  var metrics = {\n    xMin: Math.min.apply(null, xCoords),\n    yMin: Math.min.apply(null, yCoords),\n    xMax: Math.max.apply(null, xCoords),\n    yMax: Math.max.apply(null, yCoords),\n    leftSideBearing: this.leftSideBearing\n  };\n  if (!isFinite(metrics.xMin)) {\n    metrics.xMin = 0;\n  }\n  if (!isFinite(metrics.xMax)) {\n    metrics.xMax = this.advanceWidth;\n  }\n  if (!isFinite(metrics.yMin)) {\n    metrics.yMin = 0;\n  }\n  if (!isFinite(metrics.yMax)) {\n    metrics.yMax = 0;\n  }\n  metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n  return metrics;\n};\nfunction defineDependentProperty(glyph, externalName, internalName) {\n  Object.defineProperty(glyph, externalName, {\n    get: function() {\n      glyph.path;\n      return glyph[internalName];\n    },\n    set: function(newValue) {\n      glyph[internalName] = newValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\nfunction GlyphSet(font, glyphs) {\n  this.font = font;\n  this.glyphs = {};\n  if (Array.isArray(glyphs)) {\n    for (var i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      glyph.path.unitsPerEm = font.unitsPerEm;\n      this.glyphs[i] = glyph;\n    }\n  }\n  this.length = glyphs && glyphs.length || 0;\n}\nGlyphSet.prototype.get = function(index) {\n  if (this.glyphs[index] === void 0) {\n    this.font._push(index);\n    if (typeof this.glyphs[index] === \"function\") {\n      this.glyphs[index] = this.glyphs[index]();\n    }\n    var glyph = this.glyphs[index];\n    var unicodeObj = this.font._IndexToUnicodeMap[index];\n    if (unicodeObj) {\n      for (var j = 0; j < unicodeObj.unicodes.length; j++) {\n        glyph.addUnicode(unicodeObj.unicodes[j]);\n      }\n    }\n    this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;\n    this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;\n  } else {\n    if (typeof this.glyphs[index] === \"function\") {\n      this.glyphs[index] = this.glyphs[index]();\n    }\n  }\n  return this.glyphs[index];\n};\nGlyphSet.prototype.push = function(index, loader) {\n  this.glyphs[index] = loader;\n  this.length++;\n};\nfunction glyphLoader(font, index) {\n  return new Glyph({ index, font });\n}\nfunction ttfGlyphLoader(font, index, parseGlyph2, data, position, buildPath2) {\n  return function() {\n    var glyph = new Glyph({ index, font });\n    glyph.path = function() {\n      parseGlyph2(glyph, data, position);\n      var path = buildPath2(font.glyphs, glyph);\n      path.unitsPerEm = font.unitsPerEm;\n      return path;\n    };\n    defineDependentProperty(glyph, \"xMin\", \"_xMin\");\n    defineDependentProperty(glyph, \"xMax\", \"_xMax\");\n    defineDependentProperty(glyph, \"yMin\", \"_yMin\");\n    defineDependentProperty(glyph, \"yMax\", \"_yMax\");\n    return glyph;\n  };\n}\nfunction cffGlyphLoader(font, index, parseCFFCharstring2, charstring) {\n  return function() {\n    var glyph = new Glyph({ index, font });\n    glyph.path = function() {\n      var path = parseCFFCharstring2(font, glyph, charstring);\n      path.unitsPerEm = font.unitsPerEm;\n      return path;\n    };\n    return glyph;\n  };\n}\nvar glyphset = { GlyphSet, glyphLoader, ttfGlyphLoader, cffGlyphLoader };\nfunction searchTag(arr, tag) {\n  var imin = 0;\n  var imax = arr.length - 1;\n  while (imin <= imax) {\n    var imid = imin + imax >>> 1;\n    var val = arr[imid].tag;\n    if (val === tag) {\n      return imid;\n    } else if (val < tag) {\n      imin = imid + 1;\n    } else {\n      imax = imid - 1;\n    }\n  }\n  return -imin - 1;\n}\nfunction binSearch(arr, value) {\n  var imin = 0;\n  var imax = arr.length - 1;\n  while (imin <= imax) {\n    var imid = imin + imax >>> 1;\n    var val = arr[imid];\n    if (val === value) {\n      return imid;\n    } else if (val < value) {\n      imin = imid + 1;\n    } else {\n      imax = imid - 1;\n    }\n  }\n  return -imin - 1;\n}\nfunction searchRange(ranges, value) {\n  var range;\n  var imin = 0;\n  var imax = ranges.length - 1;\n  while (imin <= imax) {\n    var imid = imin + imax >>> 1;\n    range = ranges[imid];\n    var start = range.start;\n    if (start === value) {\n      return range;\n    } else if (start < value) {\n      imin = imid + 1;\n    } else {\n      imax = imid - 1;\n    }\n  }\n  if (imin > 0) {\n    range = ranges[imin - 1];\n    if (value > range.end) {\n      return 0;\n    }\n    return range;\n  }\n}\nfunction Layout(font, tableName) {\n  this.font = font;\n  this.tableName = tableName;\n}\nLayout.prototype = {\n  searchTag,\n  binSearch,\n  getTable: function(create) {\n    var layout = this.font.tables[this.tableName];\n    if (!layout && create) {\n      layout = this.font.tables[this.tableName] = this.createDefaultTable();\n    }\n    return layout;\n  },\n  getDefaultScriptName: function() {\n    var layout = this.getTable();\n    if (!layout) {\n      return;\n    }\n    var hasLatn = false;\n    for (var i = 0; i < layout.scripts.length; i++) {\n      var name = layout.scripts[i].tag;\n      if (name === \"DFLT\") {\n        return name;\n      }\n      if (name === \"latn\") {\n        hasLatn = true;\n      }\n    }\n    if (hasLatn) {\n      return \"latn\";\n    }\n  },\n  getScriptTable: function(script, create) {\n    var layout = this.getTable(create);\n    if (layout) {\n      script = script || \"DFLT\";\n      var scripts = layout.scripts;\n      var pos = searchTag(layout.scripts, script);\n      if (pos >= 0) {\n        return scripts[pos].script;\n      } else if (create) {\n        var scr = {\n          tag: script,\n          script: {\n            defaultLangSys: {\n              reserved: 0,\n              reqFeatureIndex: 65535,\n              featureIndexes: []\n            },\n            langSysRecords: []\n          }\n        };\n        scripts.splice(-1 - pos, 0, scr);\n        return scr.script;\n      }\n    }\n  },\n  getLangSysTable: function(script, language, create) {\n    var scriptTable = this.getScriptTable(script, create);\n    if (scriptTable) {\n      if (!language || language === \"dflt\" || language === \"DFLT\") {\n        return scriptTable.defaultLangSys;\n      }\n      var pos = searchTag(scriptTable.langSysRecords, language);\n      if (pos >= 0) {\n        return scriptTable.langSysRecords[pos].langSys;\n      } else if (create) {\n        var langSysRecord = {\n          tag: language,\n          langSys: {\n            reserved: 0,\n            reqFeatureIndex: 65535,\n            featureIndexes: []\n          }\n        };\n        scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n        return langSysRecord.langSys;\n      }\n    }\n  },\n  getFeatureTable: function(script, language, feature, create) {\n    var langSysTable2 = this.getLangSysTable(script, language, create);\n    if (langSysTable2) {\n      var featureRecord;\n      var featIndexes = langSysTable2.featureIndexes;\n      var allFeatures = this.font.tables[this.tableName].features;\n      for (var i = 0; i < featIndexes.length; i++) {\n        featureRecord = allFeatures[featIndexes[i]];\n        if (featureRecord.tag === feature) {\n          return featureRecord.feature;\n        }\n      }\n      if (create) {\n        var index = allFeatures.length;\n        check.assert(index === 0 || feature >= allFeatures[index - 1].tag, \"Features must be added in alphabetical order.\");\n        featureRecord = {\n          tag: feature,\n          feature: { params: 0, lookupListIndexes: [] }\n        };\n        allFeatures.push(featureRecord);\n        featIndexes.push(index);\n        return featureRecord.feature;\n      }\n    }\n  },\n  getLookupTables: function(script, language, feature, lookupType, create) {\n    var featureTable = this.getFeatureTable(script, language, feature, create);\n    var tables = [];\n    if (featureTable) {\n      var lookupTable;\n      var lookupListIndexes = featureTable.lookupListIndexes;\n      var allLookups = this.font.tables[this.tableName].lookups;\n      for (var i = 0; i < lookupListIndexes.length; i++) {\n        lookupTable = allLookups[lookupListIndexes[i]];\n        if (lookupTable.lookupType === lookupType) {\n          tables.push(lookupTable);\n        }\n      }\n      if (tables.length === 0 && create) {\n        lookupTable = {\n          lookupType,\n          lookupFlag: 0,\n          subtables: [],\n          markFilteringSet: void 0\n        };\n        var index = allLookups.length;\n        allLookups.push(lookupTable);\n        lookupListIndexes.push(index);\n        return [lookupTable];\n      }\n    }\n    return tables;\n  },\n  getGlyphClass: function(classDefTable, glyphIndex) {\n    switch (classDefTable.format) {\n      case 1:\n        if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n          return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n        }\n        return 0;\n      case 2:\n        var range = searchRange(classDefTable.ranges, glyphIndex);\n        return range ? range.classId : 0;\n    }\n  },\n  getCoverageIndex: function(coverageTable, glyphIndex) {\n    switch (coverageTable.format) {\n      case 1:\n        var index = binSearch(coverageTable.glyphs, glyphIndex);\n        return index >= 0 ? index : -1;\n      case 2:\n        var range = searchRange(coverageTable.ranges, glyphIndex);\n        return range ? range.index + glyphIndex - range.start : -1;\n    }\n  },\n  expandCoverage: function(coverageTable) {\n    if (coverageTable.format === 1) {\n      return coverageTable.glyphs;\n    } else {\n      var glyphs = [];\n      var ranges = coverageTable.ranges;\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        var start = range.start;\n        var end = range.end;\n        for (var j = start; j <= end; j++) {\n          glyphs.push(j);\n        }\n      }\n      return glyphs;\n    }\n  }\n};\nfunction Position(font) {\n  Layout.call(this, font, \"gpos\");\n}\nPosition.prototype = Layout.prototype;\nPosition.prototype.init = function() {\n  var script = this.getDefaultScriptName();\n  this.defaultKerningTables = this.getKerningTables(script);\n};\nPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n  for (var i = 0; i < kerningLookups.length; i++) {\n    var subtables = kerningLookups[i].subtables;\n    for (var j = 0; j < subtables.length; j++) {\n      var subtable = subtables[j];\n      var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n      if (covIndex < 0) {\n        continue;\n      }\n      switch (subtable.posFormat) {\n        case 1:\n          var pairSet = subtable.pairSets[covIndex];\n          for (var k2 = 0; k2 < pairSet.length; k2++) {\n            var pair = pairSet[k2];\n            if (pair.secondGlyph === rightIndex) {\n              return pair.value1 && pair.value1.xAdvance || 0;\n            }\n          }\n          break;\n        case 2:\n          var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n          var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n          var pair$1 = subtable.classRecords[class1][class2];\n          return pair$1.value1 && pair$1.value1.xAdvance || 0;\n      }\n    }\n  }\n  return 0;\n};\nPosition.prototype.getKerningTables = function(script, language) {\n  if (this.font.tables.gpos) {\n    return this.getLookupTables(script, language, \"kern\", 2);\n  }\n};\nfunction Substitution(font) {\n  Layout.call(this, font, \"gsub\");\n}\nfunction arraysEqual(ar1, ar2) {\n  var n = ar1.length;\n  if (n !== ar2.length) {\n    return false;\n  }\n  for (var i = 0; i < n; i++) {\n    if (ar1[i] !== ar2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n  var subtables = lookupTable.subtables;\n  for (var i = 0; i < subtables.length; i++) {\n    var subtable = subtables[i];\n    if (subtable.substFormat === format) {\n      return subtable;\n    }\n  }\n  if (defaultSubtable) {\n    subtables.push(defaultSubtable);\n    return defaultSubtable;\n  }\n  return void 0;\n}\nSubstitution.prototype = Layout.prototype;\nSubstitution.prototype.createDefaultTable = function() {\n  return {\n    version: 1,\n    scripts: [\n      {\n        tag: \"DFLT\",\n        script: {\n          defaultLangSys: {\n            reserved: 0,\n            reqFeatureIndex: 65535,\n            featureIndexes: []\n          },\n          langSysRecords: []\n        }\n      }\n    ],\n    features: [],\n    lookups: []\n  };\n};\nSubstitution.prototype.getSingle = function(feature, script, language) {\n  var substitutions = [];\n  var lookupTables = this.getLookupTables(script, language, feature, 1);\n  for (var idx = 0; idx < lookupTables.length; idx++) {\n    var subtables = lookupTables[idx].subtables;\n    for (var i = 0; i < subtables.length; i++) {\n      var subtable = subtables[i];\n      var glyphs = this.expandCoverage(subtable.coverage);\n      var j = void 0;\n      if (subtable.substFormat === 1) {\n        var delta = subtable.deltaGlyphId;\n        for (j = 0; j < glyphs.length; j++) {\n          var glyph = glyphs[j];\n          substitutions.push({ sub: glyph, by: glyph + delta });\n        }\n      } else {\n        var substitute = subtable.substitute;\n        for (j = 0; j < glyphs.length; j++) {\n          substitutions.push({ sub: glyphs[j], by: substitute[j] });\n        }\n      }\n    }\n  }\n  return substitutions;\n};\nSubstitution.prototype.getMultiple = function(feature, script, language) {\n  var substitutions = [];\n  var lookupTables = this.getLookupTables(script, language, feature, 2);\n  for (var idx = 0; idx < lookupTables.length; idx++) {\n    var subtables = lookupTables[idx].subtables;\n    for (var i = 0; i < subtables.length; i++) {\n      var subtable = subtables[i];\n      var glyphs = this.expandCoverage(subtable.coverage);\n      var j = void 0;\n      for (j = 0; j < glyphs.length; j++) {\n        var glyph = glyphs[j];\n        var replacements = subtable.sequences[j];\n        substitutions.push({ sub: glyph, by: replacements });\n      }\n    }\n  }\n  return substitutions;\n};\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n  var alternates = [];\n  var lookupTables = this.getLookupTables(script, language, feature, 3);\n  for (var idx = 0; idx < lookupTables.length; idx++) {\n    var subtables = lookupTables[idx].subtables;\n    for (var i = 0; i < subtables.length; i++) {\n      var subtable = subtables[i];\n      var glyphs = this.expandCoverage(subtable.coverage);\n      var alternateSets = subtable.alternateSets;\n      for (var j = 0; j < glyphs.length; j++) {\n        alternates.push({ sub: glyphs[j], by: alternateSets[j] });\n      }\n    }\n  }\n  return alternates;\n};\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n  var ligatures = [];\n  var lookupTables = this.getLookupTables(script, language, feature, 4);\n  for (var idx = 0; idx < lookupTables.length; idx++) {\n    var subtables = lookupTables[idx].subtables;\n    for (var i = 0; i < subtables.length; i++) {\n      var subtable = subtables[i];\n      var glyphs = this.expandCoverage(subtable.coverage);\n      var ligatureSets = subtable.ligatureSets;\n      for (var j = 0; j < glyphs.length; j++) {\n        var startGlyph = glyphs[j];\n        var ligSet = ligatureSets[j];\n        for (var k2 = 0; k2 < ligSet.length; k2++) {\n          var lig = ligSet[k2];\n          ligatures.push({\n            sub: [startGlyph].concat(lig.components),\n            by: lig.ligGlyph\n          });\n        }\n      }\n    }\n  }\n  return ligatures;\n};\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n  var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n  var subtable = getSubstFormat(lookupTable, 2, {\n    substFormat: 2,\n    coverage: { format: 1, glyphs: [] },\n    substitute: []\n  });\n  check.assert(subtable.coverage.format === 1, \"Single: unable to modify coverage table format \" + subtable.coverage.format);\n  var coverageGlyph = substitution.sub;\n  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n  if (pos < 0) {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.substitute.splice(pos, 0, 0);\n  }\n  subtable.substitute[pos] = substitution.by;\n};\nSubstitution.prototype.addMultiple = function(feature, substitution, script, language) {\n  check.assert(substitution.by instanceof Array && substitution.by.length > 1, 'Multiple: \"by\" must be an array of two or more ids');\n  var lookupTable = this.getLookupTables(script, language, feature, 2, true)[0];\n  var subtable = getSubstFormat(lookupTable, 1, {\n    substFormat: 1,\n    coverage: { format: 1, glyphs: [] },\n    sequences: []\n  });\n  check.assert(subtable.coverage.format === 1, \"Multiple: unable to modify coverage table format \" + subtable.coverage.format);\n  var coverageGlyph = substitution.sub;\n  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n  if (pos < 0) {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.sequences.splice(pos, 0, 0);\n  }\n  subtable.sequences[pos] = substitution.by;\n};\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n  var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n  var subtable = getSubstFormat(lookupTable, 1, {\n    substFormat: 1,\n    coverage: { format: 1, glyphs: [] },\n    alternateSets: []\n  });\n  check.assert(subtable.coverage.format === 1, \"Alternate: unable to modify coverage table format \" + subtable.coverage.format);\n  var coverageGlyph = substitution.sub;\n  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n  if (pos < 0) {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.alternateSets.splice(pos, 0, 0);\n  }\n  subtable.alternateSets[pos] = substitution.by;\n};\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n  var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n  var subtable = lookupTable.subtables[0];\n  if (!subtable) {\n    subtable = {\n      substFormat: 1,\n      coverage: { format: 1, glyphs: [] },\n      ligatureSets: []\n    };\n    lookupTable.subtables[0] = subtable;\n  }\n  check.assert(subtable.coverage.format === 1, \"Ligature: unable to modify coverage table format \" + subtable.coverage.format);\n  var coverageGlyph = ligature.sub[0];\n  var ligComponents = ligature.sub.slice(1);\n  var ligatureTable = {\n    ligGlyph: ligature.by,\n    components: ligComponents\n  };\n  var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n  if (pos >= 0) {\n    var ligatureSet = subtable.ligatureSets[pos];\n    for (var i = 0; i < ligatureSet.length; i++) {\n      if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n        return;\n      }\n    }\n    ligatureSet.push(ligatureTable);\n  } else {\n    pos = -1 - pos;\n    subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n    subtable.ligatureSets.splice(pos, 0, [ligatureTable]);\n  }\n};\nSubstitution.prototype.getFeature = function(feature, script, language) {\n  if (/ss\\d\\d/.test(feature)) {\n    return this.getSingle(feature, script, language);\n  }\n  switch (feature) {\n    case \"aalt\":\n    case \"salt\":\n      return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));\n    case \"dlig\":\n    case \"liga\":\n    case \"rlig\":\n      return this.getLigatures(feature, script, language);\n    case \"ccmp\":\n      return this.getMultiple(feature, script, language).concat(this.getLigatures(feature, script, language));\n    case \"stch\":\n      return this.getMultiple(feature, script, language);\n  }\n  return void 0;\n};\nSubstitution.prototype.add = function(feature, sub, script, language) {\n  if (/ss\\d\\d/.test(feature)) {\n    return this.addSingle(feature, sub, script, language);\n  }\n  switch (feature) {\n    case \"aalt\":\n    case \"salt\":\n      if (typeof sub.by === \"number\") {\n        return this.addSingle(feature, sub, script, language);\n      }\n      return this.addAlternate(feature, sub, script, language);\n    case \"dlig\":\n    case \"liga\":\n    case \"rlig\":\n      return this.addLigature(feature, sub, script, language);\n    case \"ccmp\":\n      if (sub.by instanceof Array) {\n        return this.addMultiple(feature, sub, script, language);\n      }\n      return this.addLigature(feature, sub, script, language);\n  }\n  return void 0;\n};\nfunction checkArgument(expression, message) {\n  if (!expression) {\n    throw message;\n  }\n}\nfunction getByte(dataView, offset) {\n  return dataView.getUint8(offset);\n}\nfunction getUShort(dataView, offset) {\n  return dataView.getUint16(offset, false);\n}\nfunction getShort(dataView, offset) {\n  return dataView.getInt16(offset, false);\n}\nfunction getULong(dataView, offset) {\n  return dataView.getUint32(offset, false);\n}\nfunction getFixed(dataView, offset) {\n  var decimal = dataView.getInt16(offset, false);\n  var fraction = dataView.getUint16(offset + 2, false);\n  return decimal + fraction / 65535;\n}\nfunction getTag(dataView, offset) {\n  var tag = \"\";\n  for (var i = offset; i < offset + 4; i += 1) {\n    tag += String.fromCharCode(dataView.getInt8(i));\n  }\n  return tag;\n}\nfunction getOffset(dataView, offset, offSize) {\n  var v = 0;\n  for (var i = 0; i < offSize; i += 1) {\n    v <<= 8;\n    v += dataView.getUint8(offset + i);\n  }\n  return v;\n}\nfunction getBytes(dataView, startOffset, endOffset) {\n  var bytes = [];\n  for (var i = startOffset; i < endOffset; i += 1) {\n    bytes.push(dataView.getUint8(i));\n  }\n  return bytes;\n}\nfunction bytesToString(bytes) {\n  var s = \"\";\n  for (var i = 0; i < bytes.length; i += 1) {\n    s += String.fromCharCode(bytes[i]);\n  }\n  return s;\n}\nvar typeOffsets = {\n  byte: 1,\n  uShort: 2,\n  short: 2,\n  uLong: 4,\n  fixed: 4,\n  longDateTime: 8,\n  tag: 4\n};\nfunction Parser(data, offset) {\n  this.data = data;\n  this.offset = offset;\n  this.relativeOffset = 0;\n}\nParser.prototype.parseByte = function() {\n  var v = this.data.getUint8(this.offset + this.relativeOffset);\n  this.relativeOffset += 1;\n  return v;\n};\nParser.prototype.parseChar = function() {\n  var v = this.data.getInt8(this.offset + this.relativeOffset);\n  this.relativeOffset += 1;\n  return v;\n};\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\nParser.prototype.parseUShort = function() {\n  var v = this.data.getUint16(this.offset + this.relativeOffset);\n  this.relativeOffset += 2;\n  return v;\n};\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\nParser.prototype.parseShort = function() {\n  var v = this.data.getInt16(this.offset + this.relativeOffset);\n  this.relativeOffset += 2;\n  return v;\n};\nParser.prototype.parseF2Dot14 = function() {\n  var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n  this.relativeOffset += 2;\n  return v;\n};\nParser.prototype.parseULong = function() {\n  var v = getULong(this.data, this.offset + this.relativeOffset);\n  this.relativeOffset += 4;\n  return v;\n};\nParser.prototype.parseOffset32 = Parser.prototype.parseULong;\nParser.prototype.parseFixed = function() {\n  var v = getFixed(this.data, this.offset + this.relativeOffset);\n  this.relativeOffset += 4;\n  return v;\n};\nParser.prototype.parseString = function(length) {\n  var dataView = this.data;\n  var offset = this.offset + this.relativeOffset;\n  var string = \"\";\n  this.relativeOffset += length;\n  for (var i = 0; i < length; i++) {\n    string += String.fromCharCode(dataView.getUint8(offset + i));\n  }\n  return string;\n};\nParser.prototype.parseTag = function() {\n  return this.parseString(4);\n};\nParser.prototype.parseLongDateTime = function() {\n  var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n  v -= 2082844800;\n  this.relativeOffset += 8;\n  return v;\n};\nParser.prototype.parseVersion = function(minorBase) {\n  var major = getUShort(this.data, this.offset + this.relativeOffset);\n  var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n  this.relativeOffset += 4;\n  if (minorBase === void 0) {\n    minorBase = 4096;\n  }\n  return major + minor / minorBase / 10;\n};\nParser.prototype.skip = function(type, amount) {\n  if (amount === void 0) {\n    amount = 1;\n  }\n  this.relativeOffset += typeOffsets[type] * amount;\n};\nParser.prototype.parseULongList = function(count) {\n  if (count === void 0) {\n    count = this.parseULong();\n  }\n  var offsets = new Array(count);\n  var dataView = this.data;\n  var offset = this.offset + this.relativeOffset;\n  for (var i = 0; i < count; i++) {\n    offsets[i] = dataView.getUint32(offset);\n    offset += 4;\n  }\n  this.relativeOffset += count * 4;\n  return offsets;\n};\nParser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function(count) {\n  if (count === void 0) {\n    count = this.parseUShort();\n  }\n  var offsets = new Array(count);\n  var dataView = this.data;\n  var offset = this.offset + this.relativeOffset;\n  for (var i = 0; i < count; i++) {\n    offsets[i] = dataView.getUint16(offset);\n    offset += 2;\n  }\n  this.relativeOffset += count * 2;\n  return offsets;\n};\nParser.prototype.parseShortList = function(count) {\n  var list = new Array(count);\n  var dataView = this.data;\n  var offset = this.offset + this.relativeOffset;\n  for (var i = 0; i < count; i++) {\n    list[i] = dataView.getInt16(offset);\n    offset += 2;\n  }\n  this.relativeOffset += count * 2;\n  return list;\n};\nParser.prototype.parseByteList = function(count) {\n  var list = new Array(count);\n  var dataView = this.data;\n  var offset = this.offset + this.relativeOffset;\n  for (var i = 0; i < count; i++) {\n    list[i] = dataView.getUint8(offset++);\n  }\n  this.relativeOffset += count;\n  return list;\n};\nParser.prototype.parseList = function(count, itemCallback) {\n  if (!itemCallback) {\n    itemCallback = count;\n    count = this.parseUShort();\n  }\n  var list = new Array(count);\n  for (var i = 0; i < count; i++) {\n    list[i] = itemCallback.call(this);\n  }\n  return list;\n};\nParser.prototype.parseList32 = function(count, itemCallback) {\n  if (!itemCallback) {\n    itemCallback = count;\n    count = this.parseULong();\n  }\n  var list = new Array(count);\n  for (var i = 0; i < count; i++) {\n    list[i] = itemCallback.call(this);\n  }\n  return list;\n};\nParser.prototype.parseRecordList = function(count, recordDescription) {\n  if (!recordDescription) {\n    recordDescription = count;\n    count = this.parseUShort();\n  }\n  var records = new Array(count);\n  var fields = Object.keys(recordDescription);\n  for (var i = 0; i < count; i++) {\n    var rec = {};\n    for (var j = 0; j < fields.length; j++) {\n      var fieldName = fields[j];\n      var fieldType = recordDescription[fieldName];\n      rec[fieldName] = fieldType.call(this);\n    }\n    records[i] = rec;\n  }\n  return records;\n};\nParser.prototype.parseRecordList32 = function(count, recordDescription) {\n  if (!recordDescription) {\n    recordDescription = count;\n    count = this.parseULong();\n  }\n  var records = new Array(count);\n  var fields = Object.keys(recordDescription);\n  for (var i = 0; i < count; i++) {\n    var rec = {};\n    for (var j = 0; j < fields.length; j++) {\n      var fieldName = fields[j];\n      var fieldType = recordDescription[fieldName];\n      rec[fieldName] = fieldType.call(this);\n    }\n    records[i] = rec;\n  }\n  return records;\n};\nParser.prototype.parseStruct = function(description) {\n  if (typeof description === \"function\") {\n    return description.call(this);\n  } else {\n    var fields = Object.keys(description);\n    var struct = {};\n    for (var j = 0; j < fields.length; j++) {\n      var fieldName = fields[j];\n      var fieldType = description[fieldName];\n      struct[fieldName] = fieldType.call(this);\n    }\n    return struct;\n  }\n};\nParser.prototype.parseValueRecord = function(valueFormat) {\n  if (valueFormat === void 0) {\n    valueFormat = this.parseUShort();\n  }\n  if (valueFormat === 0) {\n    return;\n  }\n  var valueRecord = {};\n  if (valueFormat & 1) {\n    valueRecord.xPlacement = this.parseShort();\n  }\n  if (valueFormat & 2) {\n    valueRecord.yPlacement = this.parseShort();\n  }\n  if (valueFormat & 4) {\n    valueRecord.xAdvance = this.parseShort();\n  }\n  if (valueFormat & 8) {\n    valueRecord.yAdvance = this.parseShort();\n  }\n  if (valueFormat & 16) {\n    valueRecord.xPlaDevice = void 0;\n    this.parseShort();\n  }\n  if (valueFormat & 32) {\n    valueRecord.yPlaDevice = void 0;\n    this.parseShort();\n  }\n  if (valueFormat & 64) {\n    valueRecord.xAdvDevice = void 0;\n    this.parseShort();\n  }\n  if (valueFormat & 128) {\n    valueRecord.yAdvDevice = void 0;\n    this.parseShort();\n  }\n  return valueRecord;\n};\nParser.prototype.parseValueRecordList = function() {\n  var valueFormat = this.parseUShort();\n  var valueCount = this.parseUShort();\n  var values = new Array(valueCount);\n  for (var i = 0; i < valueCount; i++) {\n    values[i] = this.parseValueRecord(valueFormat);\n  }\n  return values;\n};\nParser.prototype.parsePointer = function(description) {\n  var structOffset = this.parseOffset16();\n  if (structOffset > 0) {\n    return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n  }\n  return void 0;\n};\nParser.prototype.parsePointer32 = function(description) {\n  var structOffset = this.parseOffset32();\n  if (structOffset > 0) {\n    return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n  }\n  return void 0;\n};\nParser.prototype.parseListOfLists = function(itemCallback) {\n  var offsets = this.parseOffset16List();\n  var count = offsets.length;\n  var relativeOffset = this.relativeOffset;\n  var list = new Array(count);\n  for (var i = 0; i < count; i++) {\n    var start = offsets[i];\n    if (start === 0) {\n      list[i] = void 0;\n      continue;\n    }\n    this.relativeOffset = start;\n    if (itemCallback) {\n      var subOffsets = this.parseOffset16List();\n      var subList = new Array(subOffsets.length);\n      for (var j = 0; j < subOffsets.length; j++) {\n        this.relativeOffset = start + subOffsets[j];\n        subList[j] = itemCallback.call(this);\n      }\n      list[i] = subList;\n    } else {\n      list[i] = this.parseUShortList();\n    }\n  }\n  this.relativeOffset = relativeOffset;\n  return list;\n};\nParser.prototype.parseCoverage = function() {\n  var startOffset = this.offset + this.relativeOffset;\n  var format = this.parseUShort();\n  var count = this.parseUShort();\n  if (format === 1) {\n    return {\n      format: 1,\n      glyphs: this.parseUShortList(count)\n    };\n  } else if (format === 2) {\n    var ranges = new Array(count);\n    for (var i = 0; i < count; i++) {\n      ranges[i] = {\n        start: this.parseUShort(),\n        end: this.parseUShort(),\n        index: this.parseUShort()\n      };\n    }\n    return {\n      format: 2,\n      ranges\n    };\n  }\n  throw new Error(\"0x\" + startOffset.toString(16) + \": Coverage format must be 1 or 2.\");\n};\nParser.prototype.parseClassDef = function() {\n  var startOffset = this.offset + this.relativeOffset;\n  var format = this.parseUShort();\n  if (format === 1) {\n    return {\n      format: 1,\n      startGlyph: this.parseUShort(),\n      classes: this.parseUShortList()\n    };\n  } else if (format === 2) {\n    return {\n      format: 2,\n      ranges: this.parseRecordList({\n        start: Parser.uShort,\n        end: Parser.uShort,\n        classId: Parser.uShort\n      })\n    };\n  }\n  throw new Error(\"0x\" + startOffset.toString(16) + \": ClassDef format must be 1 or 2.\");\n};\nParser.list = function(count, itemCallback) {\n  return function() {\n    return this.parseList(count, itemCallback);\n  };\n};\nParser.list32 = function(count, itemCallback) {\n  return function() {\n    return this.parseList32(count, itemCallback);\n  };\n};\nParser.recordList = function(count, recordDescription) {\n  return function() {\n    return this.parseRecordList(count, recordDescription);\n  };\n};\nParser.recordList32 = function(count, recordDescription) {\n  return function() {\n    return this.parseRecordList32(count, recordDescription);\n  };\n};\nParser.pointer = function(description) {\n  return function() {\n    return this.parsePointer(description);\n  };\n};\nParser.pointer32 = function(description) {\n  return function() {\n    return this.parsePointer32(description);\n  };\n};\nParser.tag = Parser.prototype.parseTag;\nParser.byte = Parser.prototype.parseByte;\nParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\nParser.uShortList = Parser.prototype.parseUShortList;\nParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\nParser.uLongList = Parser.prototype.parseULongList;\nParser.struct = Parser.prototype.parseStruct;\nParser.coverage = Parser.prototype.parseCoverage;\nParser.classDef = Parser.prototype.parseClassDef;\nvar langSysTable = {\n  reserved: Parser.uShort,\n  reqFeatureIndex: Parser.uShort,\n  featureIndexes: Parser.uShortList\n};\nParser.prototype.parseScriptList = function() {\n  return this.parsePointer(Parser.recordList({\n    tag: Parser.tag,\n    script: Parser.pointer({\n      defaultLangSys: Parser.pointer(langSysTable),\n      langSysRecords: Parser.recordList({\n        tag: Parser.tag,\n        langSys: Parser.pointer(langSysTable)\n      })\n    })\n  })) || [];\n};\nParser.prototype.parseFeatureList = function() {\n  return this.parsePointer(Parser.recordList({\n    tag: Parser.tag,\n    feature: Parser.pointer({\n      featureParams: Parser.offset16,\n      lookupListIndexes: Parser.uShortList\n    })\n  })) || [];\n};\nParser.prototype.parseLookupList = function(lookupTableParsers) {\n  return this.parsePointer(Parser.list(Parser.pointer(function() {\n    var lookupType = this.parseUShort();\n    check.argument(1 <= lookupType && lookupType <= 9, \"GPOS/GSUB lookup type \" + lookupType + \" unknown.\");\n    var lookupFlag = this.parseUShort();\n    var useMarkFilteringSet = lookupFlag & 16;\n    return {\n      lookupType,\n      lookupFlag,\n      subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n      markFilteringSet: useMarkFilteringSet ? this.parseUShort() : void 0\n    };\n  }))) || [];\n};\nParser.prototype.parseFeatureVariationsList = function() {\n  return this.parsePointer32(function() {\n    var majorVersion = this.parseUShort();\n    var minorVersion = this.parseUShort();\n    check.argument(majorVersion === 1 && minorVersion < 1, \"GPOS/GSUB feature variations table unknown.\");\n    var featureVariations = this.parseRecordList32({\n      conditionSetOffset: Parser.offset32,\n      featureTableSubstitutionOffset: Parser.offset32\n    });\n    return featureVariations;\n  }) || [];\n};\nvar parse = {\n  getByte,\n  getCard8: getByte,\n  getUShort,\n  getCard16: getUShort,\n  getShort,\n  getULong,\n  getFixed,\n  getTag,\n  getOffset,\n  getBytes,\n  bytesToString,\n  Parser\n};\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n  var v;\n  if ((flag & shortVectorBitMask) > 0) {\n    v = p.parseByte();\n    if ((flag & sameBitMask) === 0) {\n      v = -v;\n    }\n    v = previousValue + v;\n  } else {\n    if ((flag & sameBitMask) > 0) {\n      v = previousValue;\n    } else {\n      v = previousValue + p.parseShort();\n    }\n  }\n  return v;\n}\nfunction parseGlyph(glyph, data, start) {\n  var p = new parse.Parser(data, start);\n  glyph.numberOfContours = p.parseShort();\n  glyph._xMin = p.parseShort();\n  glyph._yMin = p.parseShort();\n  glyph._xMax = p.parseShort();\n  glyph._yMax = p.parseShort();\n  var flags;\n  var flag;\n  if (glyph.numberOfContours > 0) {\n    var endPointIndices = glyph.endPointIndices = [];\n    for (var i = 0; i < glyph.numberOfContours; i += 1) {\n      endPointIndices.push(p.parseUShort());\n    }\n    glyph.instructionLength = p.parseUShort();\n    glyph.instructions = [];\n    for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {\n      glyph.instructions.push(p.parseByte());\n    }\n    var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n    flags = [];\n    for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {\n      flag = p.parseByte();\n      flags.push(flag);\n      if ((flag & 8) > 0) {\n        var repeatCount = p.parseByte();\n        for (var j = 0; j < repeatCount; j += 1) {\n          flags.push(flag);\n          i$2 += 1;\n        }\n      }\n    }\n    check.argument(flags.length === numberOfCoordinates, \"Bad flags.\");\n    if (endPointIndices.length > 0) {\n      var points = [];\n      var point;\n      if (numberOfCoordinates > 0) {\n        for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {\n          flag = flags[i$3];\n          point = {};\n          point.onCurve = !!(flag & 1);\n          point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n          points.push(point);\n        }\n        var px = 0;\n        for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {\n          flag = flags[i$4];\n          point = points[i$4];\n          point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n          px = point.x;\n        }\n        var py = 0;\n        for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {\n          flag = flags[i$5];\n          point = points[i$5];\n          point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n          py = point.y;\n        }\n      }\n      glyph.points = points;\n    } else {\n      glyph.points = [];\n    }\n  } else if (glyph.numberOfContours === 0) {\n    glyph.points = [];\n  } else {\n    glyph.isComposite = true;\n    glyph.points = [];\n    glyph.components = [];\n    var moreComponents = true;\n    while (moreComponents) {\n      flags = p.parseUShort();\n      var component = {\n        glyphIndex: p.parseUShort(),\n        xScale: 1,\n        scale01: 0,\n        scale10: 0,\n        yScale: 1,\n        dx: 0,\n        dy: 0\n      };\n      if ((flags & 1) > 0) {\n        if ((flags & 2) > 0) {\n          component.dx = p.parseShort();\n          component.dy = p.parseShort();\n        } else {\n          component.matchedPoints = [p.parseUShort(), p.parseUShort()];\n        }\n      } else {\n        if ((flags & 2) > 0) {\n          component.dx = p.parseChar();\n          component.dy = p.parseChar();\n        } else {\n          component.matchedPoints = [p.parseByte(), p.parseByte()];\n        }\n      }\n      if ((flags & 8) > 0) {\n        component.xScale = component.yScale = p.parseF2Dot14();\n      } else if ((flags & 64) > 0) {\n        component.xScale = p.parseF2Dot14();\n        component.yScale = p.parseF2Dot14();\n      } else if ((flags & 128) > 0) {\n        component.xScale = p.parseF2Dot14();\n        component.scale01 = p.parseF2Dot14();\n        component.scale10 = p.parseF2Dot14();\n        component.yScale = p.parseF2Dot14();\n      }\n      glyph.components.push(component);\n      moreComponents = !!(flags & 32);\n    }\n    if (flags & 256) {\n      glyph.instructionLength = p.parseUShort();\n      glyph.instructions = [];\n      for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {\n        glyph.instructions.push(p.parseByte());\n      }\n    }\n  }\n}\nfunction transformPoints(points, transform) {\n  var newPoints = [];\n  for (var i = 0; i < points.length; i += 1) {\n    var pt2 = points[i];\n    var newPt = {\n      x: transform.xScale * pt2.x + transform.scale01 * pt2.y + transform.dx,\n      y: transform.scale10 * pt2.x + transform.yScale * pt2.y + transform.dy,\n      onCurve: pt2.onCurve,\n      lastPointOfContour: pt2.lastPointOfContour\n    };\n    newPoints.push(newPt);\n  }\n  return newPoints;\n}\nfunction getContours(points) {\n  var contours = [];\n  var currentContour = [];\n  for (var i = 0; i < points.length; i += 1) {\n    var pt2 = points[i];\n    currentContour.push(pt2);\n    if (pt2.lastPointOfContour) {\n      contours.push(currentContour);\n      currentContour = [];\n    }\n  }\n  check.argument(currentContour.length === 0, \"There are still points left in the current contour.\");\n  return contours;\n}\nfunction getPath(points) {\n  var p = new Path();\n  if (!points) {\n    return p;\n  }\n  var contours = getContours(points);\n  for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {\n    var contour = contours[contourIndex];\n    var prev = null;\n    var curr = contour[contour.length - 1];\n    var next = contour[0];\n    if (curr.onCurve) {\n      p.moveTo(curr.x, curr.y);\n    } else {\n      if (next.onCurve) {\n        p.moveTo(next.x, next.y);\n      } else {\n        var start = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n        p.moveTo(start.x, start.y);\n      }\n    }\n    for (var i = 0; i < contour.length; ++i) {\n      prev = curr;\n      curr = next;\n      next = contour[(i + 1) % contour.length];\n      if (curr.onCurve) {\n        p.lineTo(curr.x, curr.y);\n      } else {\n        var prev2 = prev;\n        var next2 = next;\n        if (!prev.onCurve) {\n          prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };\n        }\n        if (!next.onCurve) {\n          next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };\n        }\n        p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n      }\n    }\n    p.closePath();\n  }\n  return p;\n}\nfunction buildPath(glyphs, glyph) {\n  if (glyph.isComposite) {\n    for (var j = 0; j < glyph.components.length; j += 1) {\n      var component = glyph.components[j];\n      var componentGlyph = glyphs.get(component.glyphIndex);\n      componentGlyph.getPath();\n      if (componentGlyph.points) {\n        var transformedPoints = void 0;\n        if (component.matchedPoints === void 0) {\n          transformedPoints = transformPoints(componentGlyph.points, component);\n        } else {\n          if (component.matchedPoints[0] > glyph.points.length - 1 || component.matchedPoints[1] > componentGlyph.points.length - 1) {\n            throw Error(\"Matched points out of range in \" + glyph.name);\n          }\n          var firstPt = glyph.points[component.matchedPoints[0]];\n          var secondPt = componentGlyph.points[component.matchedPoints[1]];\n          var transform = {\n            xScale: component.xScale,\n            scale01: component.scale01,\n            scale10: component.scale10,\n            yScale: component.yScale,\n            dx: 0,\n            dy: 0\n          };\n          secondPt = transformPoints([secondPt], transform)[0];\n          transform.dx = firstPt.x - secondPt.x;\n          transform.dy = firstPt.y - secondPt.y;\n          transformedPoints = transformPoints(componentGlyph.points, transform);\n        }\n        glyph.points = glyph.points.concat(transformedPoints);\n      }\n    }\n  }\n  return getPath(glyph.points);\n}\nfunction parseGlyfTableAll(data, start, loca2, font) {\n  var glyphs = new glyphset.GlyphSet(font);\n  for (var i = 0; i < loca2.length - 1; i += 1) {\n    var offset = loca2[i];\n    var nextOffset = loca2[i + 1];\n    if (offset !== nextOffset) {\n      glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n    } else {\n      glyphs.push(i, glyphset.glyphLoader(font, i));\n    }\n  }\n  return glyphs;\n}\nfunction parseGlyfTableOnLowMemory(data, start, loca2, font) {\n  var glyphs = new glyphset.GlyphSet(font);\n  font._push = function(i) {\n    var offset = loca2[i];\n    var nextOffset = loca2[i + 1];\n    if (offset !== nextOffset) {\n      glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n    } else {\n      glyphs.push(i, glyphset.glyphLoader(font, i));\n    }\n  };\n  return glyphs;\n}\nfunction parseGlyfTable(data, start, loca2, font, opt) {\n  if (opt.lowMemory) {\n    return parseGlyfTableOnLowMemory(data, start, loca2, font);\n  } else {\n    return parseGlyfTableAll(data, start, loca2, font);\n  }\n}\nvar glyf = { getPath, parse: parseGlyfTable };\nvar instructionTable;\nvar exec;\nvar execGlyph;\nvar execComponent;\nfunction Hinting(font) {\n  this.font = font;\n  this.getCommands = function(hPoints) {\n    return glyf.getPath(hPoints).commands;\n  };\n  this._fpgmState = this._prepState = void 0;\n  this._errorState = 0;\n}\nfunction roundOff(v) {\n  return v;\n}\nfunction roundToGrid(v) {\n  return Math.sign(v) * Math.round(Math.abs(v));\n}\nfunction roundToDoubleGrid(v) {\n  return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n}\nfunction roundToHalfGrid(v) {\n  return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n}\nfunction roundUpToGrid(v) {\n  return Math.sign(v) * Math.ceil(Math.abs(v));\n}\nfunction roundDownToGrid(v) {\n  return Math.sign(v) * Math.floor(Math.abs(v));\n}\nvar roundSuper = function(v) {\n  var period = this.srPeriod;\n  var phase = this.srPhase;\n  var threshold = this.srThreshold;\n  var sign = 1;\n  if (v < 0) {\n    v = -v;\n    sign = -1;\n  }\n  v += threshold - phase;\n  v = Math.trunc(v / period) * period;\n  v += phase;\n  if (v < 0) {\n    return phase * sign;\n  }\n  return v * sign;\n};\nvar xUnitVector = {\n  x: 1,\n  y: 0,\n  axis: \"x\",\n  distance: function(p1, p2, o1, o2) {\n    return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n  },\n  interpolate: function(p, rp1, rp2, pv) {\n    var do1;\n    var do2;\n    var doa1;\n    var doa2;\n    var dm1;\n    var dm2;\n    var dt2;\n    if (!pv || pv === this) {\n      do1 = p.xo - rp1.xo;\n      do2 = p.xo - rp2.xo;\n      dm1 = rp1.x - rp1.xo;\n      dm2 = rp2.x - rp2.xo;\n      doa1 = Math.abs(do1);\n      doa2 = Math.abs(do2);\n      dt2 = doa1 + doa2;\n      if (dt2 === 0) {\n        p.x = p.xo + (dm1 + dm2) / 2;\n        return;\n      }\n      p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt2;\n      return;\n    }\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt2 = doa1 + doa2;\n    if (dt2 === 0) {\n      xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n      return;\n    }\n    xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt2, pv, true);\n  },\n  normalSlope: Number.NEGATIVE_INFINITY,\n  setRelative: function(p, rp, d, pv, org) {\n    if (!pv || pv === this) {\n      p.x = (org ? rp.xo : rp.x) + d;\n      return;\n    }\n    var rpx = org ? rp.xo : rp.x;\n    var rpy = org ? rp.yo : rp.y;\n    var rpdx = rpx + d * pv.x;\n    var rpdy = rpy + d * pv.y;\n    p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n  },\n  slope: 0,\n  touch: function(p) {\n    p.xTouched = true;\n  },\n  touched: function(p) {\n    return p.xTouched;\n  },\n  untouch: function(p) {\n    p.xTouched = false;\n  }\n};\nvar yUnitVector = {\n  x: 0,\n  y: 1,\n  axis: \"y\",\n  distance: function(p1, p2, o1, o2) {\n    return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n  },\n  interpolate: function(p, rp1, rp2, pv) {\n    var do1;\n    var do2;\n    var doa1;\n    var doa2;\n    var dm1;\n    var dm2;\n    var dt2;\n    if (!pv || pv === this) {\n      do1 = p.yo - rp1.yo;\n      do2 = p.yo - rp2.yo;\n      dm1 = rp1.y - rp1.yo;\n      dm2 = rp2.y - rp2.yo;\n      doa1 = Math.abs(do1);\n      doa2 = Math.abs(do2);\n      dt2 = doa1 + doa2;\n      if (dt2 === 0) {\n        p.y = p.yo + (dm1 + dm2) / 2;\n        return;\n      }\n      p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt2;\n      return;\n    }\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt2 = doa1 + doa2;\n    if (dt2 === 0) {\n      yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n      return;\n    }\n    yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt2, pv, true);\n  },\n  normalSlope: 0,\n  setRelative: function(p, rp, d, pv, org) {\n    if (!pv || pv === this) {\n      p.y = (org ? rp.yo : rp.y) + d;\n      return;\n    }\n    var rpx = org ? rp.xo : rp.x;\n    var rpy = org ? rp.yo : rp.y;\n    var rpdx = rpx + d * pv.x;\n    var rpdy = rpy + d * pv.y;\n    p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n  },\n  slope: Number.POSITIVE_INFINITY,\n  touch: function(p) {\n    p.yTouched = true;\n  },\n  touched: function(p) {\n    return p.yTouched;\n  },\n  untouch: function(p) {\n    p.yTouched = false;\n  }\n};\nObject.freeze(xUnitVector);\nObject.freeze(yUnitVector);\nfunction UnitVector(x, y) {\n  this.x = x;\n  this.y = y;\n  this.axis = void 0;\n  this.slope = y / x;\n  this.normalSlope = -x / y;\n  Object.freeze(this);\n}\nUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n  return this.x * xUnitVector.distance(p1, p2, o1, o2) + this.y * yUnitVector.distance(p1, p2, o1, o2);\n};\nUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n  var dm1;\n  var dm2;\n  var do1;\n  var do2;\n  var doa1;\n  var doa2;\n  var dt2;\n  do1 = pv.distance(p, rp1, true, true);\n  do2 = pv.distance(p, rp2, true, true);\n  dm1 = pv.distance(rp1, rp1, false, true);\n  dm2 = pv.distance(rp2, rp2, false, true);\n  doa1 = Math.abs(do1);\n  doa2 = Math.abs(do2);\n  dt2 = doa1 + doa2;\n  if (dt2 === 0) {\n    this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n    return;\n  }\n  this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt2, pv, true);\n};\nUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n  pv = pv || this;\n  var rpx = org ? rp.xo : rp.x;\n  var rpy = org ? rp.yo : rp.y;\n  var rpdx = rpx + d * pv.x;\n  var rpdy = rpy + d * pv.y;\n  var pvns = pv.normalSlope;\n  var fvs = this.slope;\n  var px = p.x;\n  var py = p.y;\n  p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n  p.y = fvs * (p.x - px) + py;\n};\nUnitVector.prototype.touch = function(p) {\n  p.xTouched = true;\n  p.yTouched = true;\n};\nfunction getUnitVector(x, y) {\n  var d = Math.sqrt(x * x + y * y);\n  x /= d;\n  y /= d;\n  if (x === 1 && y === 0) {\n    return xUnitVector;\n  } else if (x === 0 && y === 1) {\n    return yUnitVector;\n  } else {\n    return new UnitVector(x, y);\n  }\n}\nfunction HPoint(x, y, lastPointOfContour, onCurve) {\n  this.x = this.xo = Math.round(x * 64) / 64;\n  this.y = this.yo = Math.round(y * 64) / 64;\n  this.lastPointOfContour = lastPointOfContour;\n  this.onCurve = onCurve;\n  this.prevPointOnContour = void 0;\n  this.nextPointOnContour = void 0;\n  this.xTouched = false;\n  this.yTouched = false;\n  Object.preventExtensions(this);\n}\nHPoint.prototype.nextTouched = function(v) {\n  var p = this.nextPointOnContour;\n  while (!v.touched(p) && p !== this) {\n    p = p.nextPointOnContour;\n  }\n  return p;\n};\nHPoint.prototype.prevTouched = function(v) {\n  var p = this.prevPointOnContour;\n  while (!v.touched(p) && p !== this) {\n    p = p.prevPointOnContour;\n  }\n  return p;\n};\nvar HPZero = Object.freeze(new HPoint(0, 0));\nvar defaultState = {\n  cvCutIn: 17 / 16,\n  deltaBase: 9,\n  deltaShift: 0.125,\n  loop: 1,\n  minDis: 1,\n  autoFlip: true\n};\nfunction State(env, prog) {\n  this.env = env;\n  this.stack = [];\n  this.prog = prog;\n  switch (env) {\n    case \"glyf\":\n      this.zp0 = this.zp1 = this.zp2 = 1;\n      this.rp0 = this.rp1 = this.rp2 = 0;\n    case \"prep\":\n      this.fv = this.pv = this.dpv = xUnitVector;\n      this.round = roundToGrid;\n  }\n}\nHinting.prototype.exec = function(glyph, ppem) {\n  if (typeof ppem !== \"number\") {\n    throw new Error(\"Point size is not a number!\");\n  }\n  if (this._errorState > 2) {\n    return;\n  }\n  var font = this.font;\n  var prepState = this._prepState;\n  if (!prepState || prepState.ppem !== ppem) {\n    var fpgmState = this._fpgmState;\n    if (!fpgmState) {\n      State.prototype = defaultState;\n      fpgmState = this._fpgmState = new State(\"fpgm\", font.tables.fpgm);\n      fpgmState.funcs = [];\n      fpgmState.font = font;\n      if (exports.DEBUG) {\n        console.log(\"---EXEC FPGM---\");\n        fpgmState.step = -1;\n      }\n      try {\n        exec(fpgmState);\n      } catch (e) {\n        console.log(\"Hinting error in FPGM:\" + e);\n        this._errorState = 3;\n        return;\n      }\n    }\n    State.prototype = fpgmState;\n    prepState = this._prepState = new State(\"prep\", font.tables.prep);\n    prepState.ppem = ppem;\n    var oCvt = font.tables.cvt;\n    if (oCvt) {\n      var cvt = prepState.cvt = new Array(oCvt.length);\n      var scale = ppem / font.unitsPerEm;\n      for (var c2 = 0; c2 < oCvt.length; c2++) {\n        cvt[c2] = oCvt[c2] * scale;\n      }\n    } else {\n      prepState.cvt = [];\n    }\n    if (exports.DEBUG) {\n      console.log(\"---EXEC PREP---\");\n      prepState.step = -1;\n    }\n    try {\n      exec(prepState);\n    } catch (e) {\n      if (this._errorState < 2) {\n        console.log(\"Hinting error in PREP:\" + e);\n      }\n      this._errorState = 2;\n    }\n  }\n  if (this._errorState > 1) {\n    return;\n  }\n  try {\n    return execGlyph(glyph, prepState);\n  } catch (e) {\n    if (this._errorState < 1) {\n      console.log(\"Hinting error:\" + e);\n      console.log(\"Note: further hinting errors are silenced\");\n    }\n    this._errorState = 1;\n    return void 0;\n  }\n};\nexecGlyph = function(glyph, prepState) {\n  var xScale = prepState.ppem / prepState.font.unitsPerEm;\n  var yScale = xScale;\n  var components = glyph.components;\n  var contours;\n  var gZone;\n  var state;\n  State.prototype = prepState;\n  if (!components) {\n    state = new State(\"glyf\", glyph.instructions);\n    if (exports.DEBUG) {\n      console.log(\"---EXEC GLYPH---\");\n      state.step = -1;\n    }\n    execComponent(glyph, state, xScale, yScale);\n    gZone = state.gZone;\n  } else {\n    var font = prepState.font;\n    gZone = [];\n    contours = [];\n    for (var i = 0; i < components.length; i++) {\n      var c2 = components[i];\n      var cg = font.glyphs.get(c2.glyphIndex);\n      state = new State(\"glyf\", cg.instructions);\n      if (exports.DEBUG) {\n        console.log(\"---EXEC COMP \" + i + \"---\");\n        state.step = -1;\n      }\n      execComponent(cg, state, xScale, yScale);\n      var dx = Math.round(c2.dx * xScale);\n      var dy = Math.round(c2.dy * yScale);\n      var gz = state.gZone;\n      var cc = state.contours;\n      for (var pi2 = 0; pi2 < gz.length; pi2++) {\n        var p = gz[pi2];\n        p.xTouched = p.yTouched = false;\n        p.xo = p.x = p.x + dx;\n        p.yo = p.y = p.y + dy;\n      }\n      var gLen = gZone.length;\n      gZone.push.apply(gZone, gz);\n      for (var j = 0; j < cc.length; j++) {\n        contours.push(cc[j] + gLen);\n      }\n    }\n    if (glyph.instructions && !state.inhibitGridFit) {\n      state = new State(\"glyf\", glyph.instructions);\n      state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n      state.contours = contours;\n      gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n      if (exports.DEBUG) {\n        console.log(\"---EXEC COMPOSITE---\");\n        state.step = -1;\n      }\n      exec(state);\n      gZone.length -= 2;\n    }\n  }\n  return gZone;\n};\nexecComponent = function(glyph, state, xScale, yScale) {\n  var points = glyph.points || [];\n  var pLen = points.length;\n  var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n  var contours = state.contours = [];\n  var cp;\n  for (var i = 0; i < pLen; i++) {\n    cp = points[i];\n    gZone[i] = new HPoint(cp.x * xScale, cp.y * yScale, cp.lastPointOfContour, cp.onCurve);\n  }\n  var sp;\n  var np;\n  for (var i$1 = 0; i$1 < pLen; i$1++) {\n    cp = gZone[i$1];\n    if (!sp) {\n      sp = cp;\n      contours.push(i$1);\n    }\n    if (cp.lastPointOfContour) {\n      cp.nextPointOnContour = sp;\n      sp.prevPointOnContour = cp;\n      sp = void 0;\n    } else {\n      np = gZone[i$1 + 1];\n      cp.nextPointOnContour = np;\n      np.prevPointOnContour = cp;\n    }\n  }\n  if (state.inhibitGridFit) {\n    return;\n  }\n  if (exports.DEBUG) {\n    console.log(\"PROCESSING GLYPH\", state.stack);\n    for (var i$2 = 0; i$2 < pLen; i$2++) {\n      console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n    }\n  }\n  gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n  exec(state);\n  gZone.length -= 2;\n  if (exports.DEBUG) {\n    console.log(\"FINISHED GLYPH\", state.stack);\n    for (var i$3 = 0; i$3 < pLen; i$3++) {\n      console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n    }\n  }\n};\nexec = function(state) {\n  var prog = state.prog;\n  if (!prog) {\n    return;\n  }\n  var pLen = prog.length;\n  var ins;\n  for (state.ip = 0; state.ip < pLen; state.ip++) {\n    if (exports.DEBUG) {\n      state.step++;\n    }\n    ins = instructionTable[prog[state.ip]];\n    if (!ins) {\n      throw new Error(\"unknown instruction: 0x\" + Number(prog[state.ip]).toString(16));\n    }\n    ins(state);\n  }\n};\nfunction initTZone(state) {\n  var tZone = state.tZone = new Array(state.gZone.length);\n  for (var i = 0; i < tZone.length; i++) {\n    tZone[i] = new HPoint(0, 0);\n  }\n}\nfunction skip(state, handleElse) {\n  var prog = state.prog;\n  var ip = state.ip;\n  var nesting = 1;\n  var ins;\n  do {\n    ins = prog[++ip];\n    if (ins === 88) {\n      nesting++;\n    } else if (ins === 89) {\n      nesting--;\n    } else if (ins === 64) {\n      ip += prog[ip + 1] + 1;\n    } else if (ins === 65) {\n      ip += 2 * prog[ip + 1] + 1;\n    } else if (ins >= 176 && ins <= 183) {\n      ip += ins - 176 + 1;\n    } else if (ins >= 184 && ins <= 191) {\n      ip += (ins - 184 + 1) * 2;\n    } else if (handleElse && nesting === 1 && ins === 27) {\n      break;\n    }\n  } while (nesting > 0);\n  state.ip = ip;\n}\nfunction SVTCA(v, state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"SVTCA[\" + v.axis + \"]\");\n  }\n  state.fv = state.pv = state.dpv = v;\n}\nfunction SPVTCA(v, state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"SPVTCA[\" + v.axis + \"]\");\n  }\n  state.pv = state.dpv = v;\n}\nfunction SFVTCA(v, state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"SFVTCA[\" + v.axis + \"]\");\n  }\n  state.fv = v;\n}\nfunction SPVTL(a, state) {\n  var stack = state.stack;\n  var p2i = stack.pop();\n  var p1i = stack.pop();\n  var p2 = state.z2[p2i];\n  var p1 = state.z1[p1i];\n  if (exports.DEBUG) {\n    console.log(\"SPVTL[\" + a + \"]\", p2i, p1i);\n  }\n  var dx;\n  var dy;\n  if (!a) {\n    dx = p1.x - p2.x;\n    dy = p1.y - p2.y;\n  } else {\n    dx = p2.y - p1.y;\n    dy = p1.x - p2.x;\n  }\n  state.pv = state.dpv = getUnitVector(dx, dy);\n}\nfunction SFVTL(a, state) {\n  var stack = state.stack;\n  var p2i = stack.pop();\n  var p1i = stack.pop();\n  var p2 = state.z2[p2i];\n  var p1 = state.z1[p1i];\n  if (exports.DEBUG) {\n    console.log(\"SFVTL[\" + a + \"]\", p2i, p1i);\n  }\n  var dx;\n  var dy;\n  if (!a) {\n    dx = p1.x - p2.x;\n    dy = p1.y - p2.y;\n  } else {\n    dx = p2.y - p1.y;\n    dy = p1.x - p2.x;\n  }\n  state.fv = getUnitVector(dx, dy);\n}\nfunction SPVFS(state) {\n  var stack = state.stack;\n  var y = stack.pop();\n  var x = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SPVFS[]\", y, x);\n  }\n  state.pv = state.dpv = getUnitVector(x, y);\n}\nfunction SFVFS(state) {\n  var stack = state.stack;\n  var y = stack.pop();\n  var x = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SPVFS[]\", y, x);\n  }\n  state.fv = getUnitVector(x, y);\n}\nfunction GPV(state) {\n  var stack = state.stack;\n  var pv = state.pv;\n  if (exports.DEBUG) {\n    console.log(state.step, \"GPV[]\");\n  }\n  stack.push(pv.x * 16384);\n  stack.push(pv.y * 16384);\n}\nfunction GFV(state) {\n  var stack = state.stack;\n  var fv = state.fv;\n  if (exports.DEBUG) {\n    console.log(state.step, \"GFV[]\");\n  }\n  stack.push(fv.x * 16384);\n  stack.push(fv.y * 16384);\n}\nfunction SFVTPV(state) {\n  state.fv = state.pv;\n  if (exports.DEBUG) {\n    console.log(state.step, \"SFVTPV[]\");\n  }\n}\nfunction ISECT(state) {\n  var stack = state.stack;\n  var pa0i = stack.pop();\n  var pa1i = stack.pop();\n  var pb0i = stack.pop();\n  var pb1i = stack.pop();\n  var pi2 = stack.pop();\n  var z0 = state.z0;\n  var z1 = state.z1;\n  var pa0 = z0[pa0i];\n  var pa1 = z0[pa1i];\n  var pb0 = z1[pb0i];\n  var pb1 = z1[pb1i];\n  var p = state.z2[pi2];\n  if (exports.DEBUG) {\n    console.log(\"ISECT[], \", pa0i, pa1i, pb0i, pb1i, pi2);\n  }\n  var x1 = pa0.x;\n  var y1 = pa0.y;\n  var x2 = pa1.x;\n  var y2 = pa1.y;\n  var x3 = pb0.x;\n  var y3 = pb0.y;\n  var x4 = pb1.x;\n  var y4 = pb1.y;\n  var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n  var f1 = x1 * y2 - y1 * x2;\n  var f2 = x3 * y4 - y3 * x4;\n  p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n  p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n}\nfunction SRP0(state) {\n  state.rp0 = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SRP0[]\", state.rp0);\n  }\n}\nfunction SRP1(state) {\n  state.rp1 = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SRP1[]\", state.rp1);\n  }\n}\nfunction SRP2(state) {\n  state.rp2 = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SRP2[]\", state.rp2);\n  }\n}\nfunction SZP0(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SZP0[]\", n);\n  }\n  state.zp0 = n;\n  switch (n) {\n    case 0:\n      if (!state.tZone) {\n        initTZone(state);\n      }\n      state.z0 = state.tZone;\n      break;\n    case 1:\n      state.z0 = state.gZone;\n      break;\n    default:\n      throw new Error(\"Invalid zone pointer\");\n  }\n}\nfunction SZP1(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SZP1[]\", n);\n  }\n  state.zp1 = n;\n  switch (n) {\n    case 0:\n      if (!state.tZone) {\n        initTZone(state);\n      }\n      state.z1 = state.tZone;\n      break;\n    case 1:\n      state.z1 = state.gZone;\n      break;\n    default:\n      throw new Error(\"Invalid zone pointer\");\n  }\n}\nfunction SZP2(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SZP2[]\", n);\n  }\n  state.zp2 = n;\n  switch (n) {\n    case 0:\n      if (!state.tZone) {\n        initTZone(state);\n      }\n      state.z2 = state.tZone;\n      break;\n    case 1:\n      state.z2 = state.gZone;\n      break;\n    default:\n      throw new Error(\"Invalid zone pointer\");\n  }\n}\nfunction SZPS(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SZPS[]\", n);\n  }\n  state.zp0 = state.zp1 = state.zp2 = n;\n  switch (n) {\n    case 0:\n      if (!state.tZone) {\n        initTZone(state);\n      }\n      state.z0 = state.z1 = state.z2 = state.tZone;\n      break;\n    case 1:\n      state.z0 = state.z1 = state.z2 = state.gZone;\n      break;\n    default:\n      throw new Error(\"Invalid zone pointer\");\n  }\n}\nfunction SLOOP(state) {\n  state.loop = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SLOOP[]\", state.loop);\n  }\n}\nfunction RTG(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"RTG[]\");\n  }\n  state.round = roundToGrid;\n}\nfunction RTHG(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"RTHG[]\");\n  }\n  state.round = roundToHalfGrid;\n}\nfunction SMD(state) {\n  var d = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SMD[]\", d);\n  }\n  state.minDis = d / 64;\n}\nfunction ELSE(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"ELSE[]\");\n  }\n  skip(state, false);\n}\nfunction JMPR(state) {\n  var o = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"JMPR[]\", o);\n  }\n  state.ip += o - 1;\n}\nfunction SCVTCI(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SCVTCI[]\", n);\n  }\n  state.cvCutIn = n / 64;\n}\nfunction DUP(state) {\n  var stack = state.stack;\n  if (exports.DEBUG) {\n    console.log(state.step, \"DUP[]\");\n  }\n  stack.push(stack[stack.length - 1]);\n}\nfunction POP(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"POP[]\");\n  }\n  state.stack.pop();\n}\nfunction CLEAR(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"CLEAR[]\");\n  }\n  state.stack.length = 0;\n}\nfunction SWAP(state) {\n  var stack = state.stack;\n  var a = stack.pop();\n  var b = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SWAP[]\");\n  }\n  stack.push(a);\n  stack.push(b);\n}\nfunction DEPTH(state) {\n  var stack = state.stack;\n  if (exports.DEBUG) {\n    console.log(state.step, \"DEPTH[]\");\n  }\n  stack.push(stack.length);\n}\nfunction LOOPCALL(state) {\n  var stack = state.stack;\n  var fn = stack.pop();\n  var c2 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"LOOPCALL[]\", fn, c2);\n  }\n  var cip = state.ip;\n  var cprog = state.prog;\n  state.prog = state.funcs[fn];\n  for (var i = 0; i < c2; i++) {\n    exec(state);\n    if (exports.DEBUG) {\n      console.log(++state.step, i + 1 < c2 ? \"next loopcall\" : \"done loopcall\", i);\n    }\n  }\n  state.ip = cip;\n  state.prog = cprog;\n}\nfunction CALL(state) {\n  var fn = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"CALL[]\", fn);\n  }\n  var cip = state.ip;\n  var cprog = state.prog;\n  state.prog = state.funcs[fn];\n  exec(state);\n  state.ip = cip;\n  state.prog = cprog;\n  if (exports.DEBUG) {\n    console.log(++state.step, \"returning from\", fn);\n  }\n}\nfunction CINDEX(state) {\n  var stack = state.stack;\n  var k2 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"CINDEX[]\", k2);\n  }\n  stack.push(stack[stack.length - k2]);\n}\nfunction MINDEX(state) {\n  var stack = state.stack;\n  var k2 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"MINDEX[]\", k2);\n  }\n  stack.push(stack.splice(stack.length - k2, 1)[0]);\n}\nfunction FDEF(state) {\n  if (state.env !== \"fpgm\") {\n    throw new Error(\"FDEF not allowed here\");\n  }\n  var stack = state.stack;\n  var prog = state.prog;\n  var ip = state.ip;\n  var fn = stack.pop();\n  var ipBegin = ip;\n  if (exports.DEBUG) {\n    console.log(state.step, \"FDEF[]\", fn);\n  }\n  while (prog[++ip] !== 45) {\n  }\n  state.ip = ip;\n  state.funcs[fn] = prog.slice(ipBegin + 1, ip);\n}\nfunction MDAP(round, state) {\n  var pi2 = state.stack.pop();\n  var p = state.z0[pi2];\n  var fv = state.fv;\n  var pv = state.pv;\n  if (exports.DEBUG) {\n    console.log(state.step, \"MDAP[\" + round + \"]\", pi2);\n  }\n  var d = pv.distance(p, HPZero);\n  if (round) {\n    d = state.round(d);\n  }\n  fv.setRelative(p, HPZero, d, pv);\n  fv.touch(p);\n  state.rp0 = state.rp1 = pi2;\n}\nfunction IUP(v, state) {\n  var z2 = state.z2;\n  var pLen = z2.length - 2;\n  var cp;\n  var pp;\n  var np;\n  if (exports.DEBUG) {\n    console.log(state.step, \"IUP[\" + v.axis + \"]\");\n  }\n  for (var i = 0; i < pLen; i++) {\n    cp = z2[i];\n    if (v.touched(cp)) {\n      continue;\n    }\n    pp = cp.prevTouched(v);\n    if (pp === cp) {\n      continue;\n    }\n    np = cp.nextTouched(v);\n    if (pp === np) {\n      v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n    }\n    v.interpolate(cp, pp, np, v);\n  }\n}\nfunction SHP(a, state) {\n  var stack = state.stack;\n  var rpi = a ? state.rp1 : state.rp2;\n  var rp = (a ? state.z0 : state.z1)[rpi];\n  var fv = state.fv;\n  var pv = state.pv;\n  var loop = state.loop;\n  var z2 = state.z2;\n  while (loop--) {\n    var pi2 = stack.pop();\n    var p = z2[pi2];\n    var d = pv.distance(rp, rp, false, true);\n    fv.setRelative(p, p, d, pv);\n    fv.touch(p);\n    if (exports.DEBUG) {\n      console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"SHP[\" + (a ? \"rp1\" : \"rp2\") + \"]\", pi2);\n    }\n  }\n  state.loop = 1;\n}\nfunction SHC(a, state) {\n  var stack = state.stack;\n  var rpi = a ? state.rp1 : state.rp2;\n  var rp = (a ? state.z0 : state.z1)[rpi];\n  var fv = state.fv;\n  var pv = state.pv;\n  var ci2 = stack.pop();\n  var sp = state.z2[state.contours[ci2]];\n  var p = sp;\n  if (exports.DEBUG) {\n    console.log(state.step, \"SHC[\" + a + \"]\", ci2);\n  }\n  var d = pv.distance(rp, rp, false, true);\n  do {\n    if (p !== rp) {\n      fv.setRelative(p, p, d, pv);\n    }\n    p = p.nextPointOnContour;\n  } while (p !== sp);\n}\nfunction SHZ(a, state) {\n  var stack = state.stack;\n  var rpi = a ? state.rp1 : state.rp2;\n  var rp = (a ? state.z0 : state.z1)[rpi];\n  var fv = state.fv;\n  var pv = state.pv;\n  var e = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SHZ[\" + a + \"]\", e);\n  }\n  var z;\n  switch (e) {\n    case 0:\n      z = state.tZone;\n      break;\n    case 1:\n      z = state.gZone;\n      break;\n    default:\n      throw new Error(\"Invalid zone\");\n  }\n  var p;\n  var d = pv.distance(rp, rp, false, true);\n  var pLen = z.length - 2;\n  for (var i = 0; i < pLen; i++) {\n    p = z[i];\n    fv.setRelative(p, p, d, pv);\n  }\n}\nfunction SHPIX(state) {\n  var stack = state.stack;\n  var loop = state.loop;\n  var fv = state.fv;\n  var d = stack.pop() / 64;\n  var z2 = state.z2;\n  while (loop--) {\n    var pi2 = stack.pop();\n    var p = z2[pi2];\n    if (exports.DEBUG) {\n      console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"SHPIX[]\", pi2, d);\n    }\n    fv.setRelative(p, p, d);\n    fv.touch(p);\n  }\n  state.loop = 1;\n}\nfunction IP(state) {\n  var stack = state.stack;\n  var rp1i = state.rp1;\n  var rp2i = state.rp2;\n  var loop = state.loop;\n  var rp1 = state.z0[rp1i];\n  var rp2 = state.z1[rp2i];\n  var fv = state.fv;\n  var pv = state.dpv;\n  var z2 = state.z2;\n  while (loop--) {\n    var pi2 = stack.pop();\n    var p = z2[pi2];\n    if (exports.DEBUG) {\n      console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"IP[]\", pi2, rp1i, \"<->\", rp2i);\n    }\n    fv.interpolate(p, rp1, rp2, pv);\n    fv.touch(p);\n  }\n  state.loop = 1;\n}\nfunction MSIRP(a, state) {\n  var stack = state.stack;\n  var d = stack.pop() / 64;\n  var pi2 = stack.pop();\n  var p = state.z1[pi2];\n  var rp0 = state.z0[state.rp0];\n  var fv = state.fv;\n  var pv = state.pv;\n  fv.setRelative(p, rp0, d, pv);\n  fv.touch(p);\n  if (exports.DEBUG) {\n    console.log(state.step, \"MSIRP[\" + a + \"]\", d, pi2);\n  }\n  state.rp1 = state.rp0;\n  state.rp2 = pi2;\n  if (a) {\n    state.rp0 = pi2;\n  }\n}\nfunction ALIGNRP(state) {\n  var stack = state.stack;\n  var rp0i = state.rp0;\n  var rp0 = state.z0[rp0i];\n  var loop = state.loop;\n  var fv = state.fv;\n  var pv = state.pv;\n  var z1 = state.z1;\n  while (loop--) {\n    var pi2 = stack.pop();\n    var p = z1[pi2];\n    if (exports.DEBUG) {\n      console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"ALIGNRP[]\", pi2);\n    }\n    fv.setRelative(p, rp0, 0, pv);\n    fv.touch(p);\n  }\n  state.loop = 1;\n}\nfunction RTDG(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"RTDG[]\");\n  }\n  state.round = roundToDoubleGrid;\n}\nfunction MIAP(round, state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  var pi2 = stack.pop();\n  var p = state.z0[pi2];\n  var fv = state.fv;\n  var pv = state.pv;\n  var cv = state.cvt[n];\n  if (exports.DEBUG) {\n    console.log(state.step, \"MIAP[\" + round + \"]\", n, \"(\", cv, \")\", pi2);\n  }\n  var d = pv.distance(p, HPZero);\n  if (round) {\n    if (Math.abs(d - cv) < state.cvCutIn) {\n      d = cv;\n    }\n    d = state.round(d);\n  }\n  fv.setRelative(p, HPZero, d, pv);\n  if (state.zp0 === 0) {\n    p.xo = p.x;\n    p.yo = p.y;\n  }\n  fv.touch(p);\n  state.rp0 = state.rp1 = pi2;\n}\nfunction NPUSHB(state) {\n  var prog = state.prog;\n  var ip = state.ip;\n  var stack = state.stack;\n  var n = prog[++ip];\n  if (exports.DEBUG) {\n    console.log(state.step, \"NPUSHB[]\", n);\n  }\n  for (var i = 0; i < n; i++) {\n    stack.push(prog[++ip]);\n  }\n  state.ip = ip;\n}\nfunction NPUSHW(state) {\n  var ip = state.ip;\n  var prog = state.prog;\n  var stack = state.stack;\n  var n = prog[++ip];\n  if (exports.DEBUG) {\n    console.log(state.step, \"NPUSHW[]\", n);\n  }\n  for (var i = 0; i < n; i++) {\n    var w = prog[++ip] << 8 | prog[++ip];\n    if (w & 32768) {\n      w = -((w ^ 65535) + 1);\n    }\n    stack.push(w);\n  }\n  state.ip = ip;\n}\nfunction WS(state) {\n  var stack = state.stack;\n  var store = state.store;\n  if (!store) {\n    store = state.store = [];\n  }\n  var v = stack.pop();\n  var l = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"WS\", v, l);\n  }\n  store[l] = v;\n}\nfunction RS(state) {\n  var stack = state.stack;\n  var store = state.store;\n  var l = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"RS\", l);\n  }\n  var v = store && store[l] || 0;\n  stack.push(v);\n}\nfunction WCVTP(state) {\n  var stack = state.stack;\n  var v = stack.pop();\n  var l = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"WCVTP\", v, l);\n  }\n  state.cvt[l] = v / 64;\n}\nfunction RCVT(state) {\n  var stack = state.stack;\n  var cvte = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"RCVT\", cvte);\n  }\n  stack.push(state.cvt[cvte] * 64);\n}\nfunction GC(a, state) {\n  var stack = state.stack;\n  var pi2 = stack.pop();\n  var p = state.z2[pi2];\n  if (exports.DEBUG) {\n    console.log(state.step, \"GC[\" + a + \"]\", pi2);\n  }\n  stack.push(state.dpv.distance(p, HPZero, a, false) * 64);\n}\nfunction MD(a, state) {\n  var stack = state.stack;\n  var pi2 = stack.pop();\n  var pi1 = stack.pop();\n  var p2 = state.z1[pi2];\n  var p1 = state.z0[pi1];\n  var d = state.dpv.distance(p1, p2, a, a);\n  if (exports.DEBUG) {\n    console.log(state.step, \"MD[\" + a + \"]\", pi2, pi1, \"->\", d);\n  }\n  state.stack.push(Math.round(d * 64));\n}\nfunction MPPEM(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"MPPEM[]\");\n  }\n  state.stack.push(state.ppem);\n}\nfunction FLIPON(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"FLIPON[]\");\n  }\n  state.autoFlip = true;\n}\nfunction LT(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"LT[]\", e2, e1);\n  }\n  stack.push(e1 < e2 ? 1 : 0);\n}\nfunction LTEQ(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"LTEQ[]\", e2, e1);\n  }\n  stack.push(e1 <= e2 ? 1 : 0);\n}\nfunction GT(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"GT[]\", e2, e1);\n  }\n  stack.push(e1 > e2 ? 1 : 0);\n}\nfunction GTEQ(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"GTEQ[]\", e2, e1);\n  }\n  stack.push(e1 >= e2 ? 1 : 0);\n}\nfunction EQ(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"EQ[]\", e2, e1);\n  }\n  stack.push(e2 === e1 ? 1 : 0);\n}\nfunction NEQ(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"NEQ[]\", e2, e1);\n  }\n  stack.push(e2 !== e1 ? 1 : 0);\n}\nfunction ODD(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"ODD[]\", n);\n  }\n  stack.push(Math.trunc(n) % 2 ? 1 : 0);\n}\nfunction EVEN(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"EVEN[]\", n);\n  }\n  stack.push(Math.trunc(n) % 2 ? 0 : 1);\n}\nfunction IF(state) {\n  var test = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"IF[]\", test);\n  }\n  if (!test) {\n    skip(state, true);\n    if (exports.DEBUG) {\n      console.log(state.step, \"EIF[]\");\n    }\n  }\n}\nfunction EIF(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"EIF[]\");\n  }\n}\nfunction AND(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"AND[]\", e2, e1);\n  }\n  stack.push(e2 && e1 ? 1 : 0);\n}\nfunction OR(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"OR[]\", e2, e1);\n  }\n  stack.push(e2 || e1 ? 1 : 0);\n}\nfunction NOT(state) {\n  var stack = state.stack;\n  var e = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"NOT[]\", e);\n  }\n  stack.push(e ? 0 : 1);\n}\nfunction DELTAP123(b, state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  var fv = state.fv;\n  var pv = state.pv;\n  var ppem = state.ppem;\n  var base = state.deltaBase + (b - 1) * 16;\n  var ds = state.deltaShift;\n  var z0 = state.z0;\n  if (exports.DEBUG) {\n    console.log(state.step, \"DELTAP[\" + b + \"]\", n, stack);\n  }\n  for (var i = 0; i < n; i++) {\n    var pi2 = stack.pop();\n    var arg = stack.pop();\n    var appem = base + ((arg & 240) >> 4);\n    if (appem !== ppem) {\n      continue;\n    }\n    var mag = (arg & 15) - 8;\n    if (mag >= 0) {\n      mag++;\n    }\n    if (exports.DEBUG) {\n      console.log(state.step, \"DELTAPFIX\", pi2, \"by\", mag * ds);\n    }\n    var p = z0[pi2];\n    fv.setRelative(p, p, mag * ds, pv);\n  }\n}\nfunction SDB(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SDB[]\", n);\n  }\n  state.deltaBase = n;\n}\nfunction SDS(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SDS[]\", n);\n  }\n  state.deltaShift = Math.pow(0.5, n);\n}\nfunction ADD(state) {\n  var stack = state.stack;\n  var n2 = stack.pop();\n  var n1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"ADD[]\", n2, n1);\n  }\n  stack.push(n1 + n2);\n}\nfunction SUB(state) {\n  var stack = state.stack;\n  var n2 = stack.pop();\n  var n1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SUB[]\", n2, n1);\n  }\n  stack.push(n1 - n2);\n}\nfunction DIV(state) {\n  var stack = state.stack;\n  var n2 = stack.pop();\n  var n1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"DIV[]\", n2, n1);\n  }\n  stack.push(n1 * 64 / n2);\n}\nfunction MUL(state) {\n  var stack = state.stack;\n  var n2 = stack.pop();\n  var n1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"MUL[]\", n2, n1);\n  }\n  stack.push(n1 * n2 / 64);\n}\nfunction ABS(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"ABS[]\", n);\n  }\n  stack.push(Math.abs(n));\n}\nfunction NEG(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"NEG[]\", n);\n  }\n  stack.push(-n);\n}\nfunction FLOOR(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"FLOOR[]\", n);\n  }\n  stack.push(Math.floor(n / 64) * 64);\n}\nfunction CEILING(state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"CEILING[]\", n);\n  }\n  stack.push(Math.ceil(n / 64) * 64);\n}\nfunction ROUND(dt2, state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"ROUND[]\");\n  }\n  stack.push(state.round(n / 64) * 64);\n}\nfunction WCVTF(state) {\n  var stack = state.stack;\n  var v = stack.pop();\n  var l = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"WCVTF[]\", v, l);\n  }\n  state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n}\nfunction DELTAC123(b, state) {\n  var stack = state.stack;\n  var n = stack.pop();\n  var ppem = state.ppem;\n  var base = state.deltaBase + (b - 1) * 16;\n  var ds = state.deltaShift;\n  if (exports.DEBUG) {\n    console.log(state.step, \"DELTAC[\" + b + \"]\", n, stack);\n  }\n  for (var i = 0; i < n; i++) {\n    var c2 = stack.pop();\n    var arg = stack.pop();\n    var appem = base + ((arg & 240) >> 4);\n    if (appem !== ppem) {\n      continue;\n    }\n    var mag = (arg & 15) - 8;\n    if (mag >= 0) {\n      mag++;\n    }\n    var delta = mag * ds;\n    if (exports.DEBUG) {\n      console.log(state.step, \"DELTACFIX\", c2, \"by\", delta);\n    }\n    state.cvt[c2] += delta;\n  }\n}\nfunction SROUND(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SROUND[]\", n);\n  }\n  state.round = roundSuper;\n  var period;\n  switch (n & 192) {\n    case 0:\n      period = 0.5;\n      break;\n    case 64:\n      period = 1;\n      break;\n    case 128:\n      period = 2;\n      break;\n    default:\n      throw new Error(\"invalid SROUND value\");\n  }\n  state.srPeriod = period;\n  switch (n & 48) {\n    case 0:\n      state.srPhase = 0;\n      break;\n    case 16:\n      state.srPhase = 0.25 * period;\n      break;\n    case 32:\n      state.srPhase = 0.5 * period;\n      break;\n    case 48:\n      state.srPhase = 0.75 * period;\n      break;\n    default:\n      throw new Error(\"invalid SROUND value\");\n  }\n  n &= 15;\n  if (n === 0) {\n    state.srThreshold = 0;\n  } else {\n    state.srThreshold = (n / 8 - 0.5) * period;\n  }\n}\nfunction S45ROUND(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"S45ROUND[]\", n);\n  }\n  state.round = roundSuper;\n  var period;\n  switch (n & 192) {\n    case 0:\n      period = Math.sqrt(2) / 2;\n      break;\n    case 64:\n      period = Math.sqrt(2);\n      break;\n    case 128:\n      period = 2 * Math.sqrt(2);\n      break;\n    default:\n      throw new Error(\"invalid S45ROUND value\");\n  }\n  state.srPeriod = period;\n  switch (n & 48) {\n    case 0:\n      state.srPhase = 0;\n      break;\n    case 16:\n      state.srPhase = 0.25 * period;\n      break;\n    case 32:\n      state.srPhase = 0.5 * period;\n      break;\n    case 48:\n      state.srPhase = 0.75 * period;\n      break;\n    default:\n      throw new Error(\"invalid S45ROUND value\");\n  }\n  n &= 15;\n  if (n === 0) {\n    state.srThreshold = 0;\n  } else {\n    state.srThreshold = (n / 8 - 0.5) * period;\n  }\n}\nfunction ROFF(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"ROFF[]\");\n  }\n  state.round = roundOff;\n}\nfunction RUTG(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"RUTG[]\");\n  }\n  state.round = roundUpToGrid;\n}\nfunction RDTG(state) {\n  if (exports.DEBUG) {\n    console.log(state.step, \"RDTG[]\");\n  }\n  state.round = roundDownToGrid;\n}\nfunction SCANCTRL(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SCANCTRL[]\", n);\n  }\n}\nfunction SDPVTL(a, state) {\n  var stack = state.stack;\n  var p2i = stack.pop();\n  var p1i = stack.pop();\n  var p2 = state.z2[p2i];\n  var p1 = state.z1[p1i];\n  if (exports.DEBUG) {\n    console.log(state.step, \"SDPVTL[\" + a + \"]\", p2i, p1i);\n  }\n  var dx;\n  var dy;\n  if (!a) {\n    dx = p1.x - p2.x;\n    dy = p1.y - p2.y;\n  } else {\n    dx = p2.y - p1.y;\n    dy = p1.x - p2.x;\n  }\n  state.dpv = getUnitVector(dx, dy);\n}\nfunction GETINFO(state) {\n  var stack = state.stack;\n  var sel = stack.pop();\n  var r = 0;\n  if (exports.DEBUG) {\n    console.log(state.step, \"GETINFO[]\", sel);\n  }\n  if (sel & 1) {\n    r = 35;\n  }\n  if (sel & 32) {\n    r |= 4096;\n  }\n  stack.push(r);\n}\nfunction ROLL(state) {\n  var stack = state.stack;\n  var a = stack.pop();\n  var b = stack.pop();\n  var c2 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"ROLL[]\");\n  }\n  stack.push(b);\n  stack.push(a);\n  stack.push(c2);\n}\nfunction MAX(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"MAX[]\", e2, e1);\n  }\n  stack.push(Math.max(e1, e2));\n}\nfunction MIN(state) {\n  var stack = state.stack;\n  var e2 = stack.pop();\n  var e1 = stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"MIN[]\", e2, e1);\n  }\n  stack.push(Math.min(e1, e2));\n}\nfunction SCANTYPE(state) {\n  var n = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"SCANTYPE[]\", n);\n  }\n}\nfunction INSTCTRL(state) {\n  var s = state.stack.pop();\n  var v = state.stack.pop();\n  if (exports.DEBUG) {\n    console.log(state.step, \"INSTCTRL[]\", s, v);\n  }\n  switch (s) {\n    case 1:\n      state.inhibitGridFit = !!v;\n      return;\n    case 2:\n      state.ignoreCvt = !!v;\n      return;\n    default:\n      throw new Error(\"invalid INSTCTRL[] selector\");\n  }\n}\nfunction PUSHB(n, state) {\n  var stack = state.stack;\n  var prog = state.prog;\n  var ip = state.ip;\n  if (exports.DEBUG) {\n    console.log(state.step, \"PUSHB[\" + n + \"]\");\n  }\n  for (var i = 0; i < n; i++) {\n    stack.push(prog[++ip]);\n  }\n  state.ip = ip;\n}\nfunction PUSHW(n, state) {\n  var ip = state.ip;\n  var prog = state.prog;\n  var stack = state.stack;\n  if (exports.DEBUG) {\n    console.log(state.ip, \"PUSHW[\" + n + \"]\");\n  }\n  for (var i = 0; i < n; i++) {\n    var w = prog[++ip] << 8 | prog[++ip];\n    if (w & 32768) {\n      w = -((w ^ 65535) + 1);\n    }\n    stack.push(w);\n  }\n  state.ip = ip;\n}\nfunction MDRP_MIRP(indirect, setRp0, keepD, ro, dt2, state) {\n  var stack = state.stack;\n  var cvte = indirect && stack.pop();\n  var pi2 = stack.pop();\n  var rp0i = state.rp0;\n  var rp = state.z0[rp0i];\n  var p = state.z1[pi2];\n  var md = state.minDis;\n  var fv = state.fv;\n  var pv = state.dpv;\n  var od;\n  var d;\n  var sign;\n  var cv;\n  d = od = pv.distance(p, rp, true, true);\n  sign = d >= 0 ? 1 : -1;\n  d = Math.abs(d);\n  if (indirect) {\n    cv = state.cvt[cvte];\n    if (ro && Math.abs(d - cv) < state.cvCutIn) {\n      d = cv;\n    }\n  }\n  if (keepD && d < md) {\n    d = md;\n  }\n  if (ro) {\n    d = state.round(d);\n  }\n  fv.setRelative(p, rp, sign * d, pv);\n  fv.touch(p);\n  if (exports.DEBUG) {\n    console.log(state.step, (indirect ? \"MIRP[\" : \"MDRP[\") + (setRp0 ? \"M\" : \"m\") + (keepD ? \">\" : \"_\") + (ro ? \"R\" : \"_\") + (dt2 === 0 ? \"Gr\" : dt2 === 1 ? \"Bl\" : dt2 === 2 ? \"Wh\" : \"\") + \"]\", indirect ? cvte + \"(\" + state.cvt[cvte] + \",\" + cv + \")\" : \"\", pi2, \"(d =\", od, \"->\", sign * d, \")\");\n  }\n  state.rp1 = state.rp0;\n  state.rp2 = pi2;\n  if (setRp0) {\n    state.rp0 = pi2;\n  }\n}\ninstructionTable = [\n  SVTCA.bind(void 0, yUnitVector),\n  SVTCA.bind(void 0, xUnitVector),\n  SPVTCA.bind(void 0, yUnitVector),\n  SPVTCA.bind(void 0, xUnitVector),\n  SFVTCA.bind(void 0, yUnitVector),\n  SFVTCA.bind(void 0, xUnitVector),\n  SPVTL.bind(void 0, 0),\n  SPVTL.bind(void 0, 1),\n  SFVTL.bind(void 0, 0),\n  SFVTL.bind(void 0, 1),\n  SPVFS,\n  SFVFS,\n  GPV,\n  GFV,\n  SFVTPV,\n  ISECT,\n  SRP0,\n  SRP1,\n  SRP2,\n  SZP0,\n  SZP1,\n  SZP2,\n  SZPS,\n  SLOOP,\n  RTG,\n  RTHG,\n  SMD,\n  ELSE,\n  JMPR,\n  SCVTCI,\n  void 0,\n  void 0,\n  DUP,\n  POP,\n  CLEAR,\n  SWAP,\n  DEPTH,\n  CINDEX,\n  MINDEX,\n  void 0,\n  void 0,\n  void 0,\n  LOOPCALL,\n  CALL,\n  FDEF,\n  void 0,\n  MDAP.bind(void 0, 0),\n  MDAP.bind(void 0, 1),\n  IUP.bind(void 0, yUnitVector),\n  IUP.bind(void 0, xUnitVector),\n  SHP.bind(void 0, 0),\n  SHP.bind(void 0, 1),\n  SHC.bind(void 0, 0),\n  SHC.bind(void 0, 1),\n  SHZ.bind(void 0, 0),\n  SHZ.bind(void 0, 1),\n  SHPIX,\n  IP,\n  MSIRP.bind(void 0, 0),\n  MSIRP.bind(void 0, 1),\n  ALIGNRP,\n  RTDG,\n  MIAP.bind(void 0, 0),\n  MIAP.bind(void 0, 1),\n  NPUSHB,\n  NPUSHW,\n  WS,\n  RS,\n  WCVTP,\n  RCVT,\n  GC.bind(void 0, 0),\n  GC.bind(void 0, 1),\n  void 0,\n  MD.bind(void 0, 0),\n  MD.bind(void 0, 1),\n  MPPEM,\n  void 0,\n  FLIPON,\n  void 0,\n  void 0,\n  LT,\n  LTEQ,\n  GT,\n  GTEQ,\n  EQ,\n  NEQ,\n  ODD,\n  EVEN,\n  IF,\n  EIF,\n  AND,\n  OR,\n  NOT,\n  DELTAP123.bind(void 0, 1),\n  SDB,\n  SDS,\n  ADD,\n  SUB,\n  DIV,\n  MUL,\n  ABS,\n  NEG,\n  FLOOR,\n  CEILING,\n  ROUND.bind(void 0, 0),\n  ROUND.bind(void 0, 1),\n  ROUND.bind(void 0, 2),\n  ROUND.bind(void 0, 3),\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  WCVTF,\n  DELTAP123.bind(void 0, 2),\n  DELTAP123.bind(void 0, 3),\n  DELTAC123.bind(void 0, 1),\n  DELTAC123.bind(void 0, 2),\n  DELTAC123.bind(void 0, 3),\n  SROUND,\n  S45ROUND,\n  void 0,\n  void 0,\n  ROFF,\n  void 0,\n  RUTG,\n  RDTG,\n  POP,\n  POP,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  SCANCTRL,\n  SDPVTL.bind(void 0, 0),\n  SDPVTL.bind(void 0, 1),\n  GETINFO,\n  void 0,\n  ROLL,\n  MAX,\n  MIN,\n  SCANTYPE,\n  INSTCTRL,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  void 0,\n  PUSHB.bind(void 0, 1),\n  PUSHB.bind(void 0, 2),\n  PUSHB.bind(void 0, 3),\n  PUSHB.bind(void 0, 4),\n  PUSHB.bind(void 0, 5),\n  PUSHB.bind(void 0, 6),\n  PUSHB.bind(void 0, 7),\n  PUSHB.bind(void 0, 8),\n  PUSHW.bind(void 0, 1),\n  PUSHW.bind(void 0, 2),\n  PUSHW.bind(void 0, 3),\n  PUSHW.bind(void 0, 4),\n  PUSHW.bind(void 0, 5),\n  PUSHW.bind(void 0, 6),\n  PUSHW.bind(void 0, 7),\n  PUSHW.bind(void 0, 8),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 0),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 1),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 2),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 3),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 0),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 1),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 2),\n  MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 3),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 0),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 1),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 2),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 3),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 0),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 1),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 2),\n  MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 3),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 0),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 1),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 2),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 3),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 0),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 1),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 2),\n  MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 3),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 0),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 1),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 2),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 3),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 0),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 1),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 2),\n  MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 3),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 0),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 1),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 2),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 3),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 0),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 1),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 2),\n  MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 3),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 0),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 1),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 2),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 3),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 0),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 1),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 2),\n  MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 3),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 0),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 1),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 2),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 3),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 0),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 1),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 2),\n  MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 3),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 0),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 1),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 2),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 3),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 0),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 1),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 2),\n  MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 3)\n];\nfunction Token(char) {\n  this.char = char;\n  this.state = {};\n  this.activeState = null;\n}\nfunction ContextRange(startIndex, endOffset, contextName) {\n  this.contextName = contextName;\n  this.startIndex = startIndex;\n  this.endOffset = endOffset;\n}\nfunction ContextChecker(contextName, checkStart, checkEnd) {\n  this.contextName = contextName;\n  this.openRange = null;\n  this.ranges = [];\n  this.checkStart = checkStart;\n  this.checkEnd = checkEnd;\n}\nfunction ContextParams(context, currentIndex) {\n  this.context = context;\n  this.index = currentIndex;\n  this.length = context.length;\n  this.current = context[currentIndex];\n  this.backtrack = context.slice(0, currentIndex);\n  this.lookahead = context.slice(currentIndex + 1);\n}\nfunction Event(eventId) {\n  this.eventId = eventId;\n  this.subscribers = [];\n}\nfunction initializeCoreEvents(events) {\n  var this$1 = this;\n  var coreEvents = [\n    \"start\",\n    \"end\",\n    \"next\",\n    \"newToken\",\n    \"contextStart\",\n    \"contextEnd\",\n    \"insertToken\",\n    \"removeToken\",\n    \"removeRange\",\n    \"replaceToken\",\n    \"replaceRange\",\n    \"composeRUD\",\n    \"updateContextsRanges\"\n  ];\n  coreEvents.forEach(function(eventId) {\n    Object.defineProperty(this$1.events, eventId, {\n      value: new Event(eventId)\n    });\n  });\n  if (!!events) {\n    coreEvents.forEach(function(eventId) {\n      var event = events[eventId];\n      if (typeof event === \"function\") {\n        this$1.events[eventId].subscribe(event);\n      }\n    });\n  }\n  var requiresContextUpdate = [\n    \"insertToken\",\n    \"removeToken\",\n    \"removeRange\",\n    \"replaceToken\",\n    \"replaceRange\",\n    \"composeRUD\"\n  ];\n  requiresContextUpdate.forEach(function(eventId) {\n    this$1.events[eventId].subscribe(this$1.updateContextsRanges);\n  });\n}\nfunction Tokenizer(events) {\n  this.tokens = [];\n  this.registeredContexts = {};\n  this.contextCheckers = [];\n  this.events = {};\n  this.registeredModifiers = [];\n  initializeCoreEvents.call(this, events);\n}\nToken.prototype.setState = function(key, value) {\n  this.state[key] = value;\n  this.activeState = { key, value: this.state[key] };\n  return this.activeState;\n};\nToken.prototype.getState = function(stateId) {\n  return this.state[stateId] || null;\n};\nTokenizer.prototype.inboundIndex = function(index) {\n  return index >= 0 && index < this.tokens.length;\n};\nTokenizer.prototype.composeRUD = function(RUDs) {\n  var this$1 = this;\n  var silent = true;\n  var state = RUDs.map(function(RUD) {\n    return this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent));\n  });\n  var hasFAILObject = function(obj) {\n    return typeof obj === \"object\" && obj.hasOwnProperty(\"FAIL\");\n  };\n  if (state.every(hasFAILObject)) {\n    return {\n      FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n      report: state.filter(hasFAILObject)\n    };\n  }\n  this.dispatch(\"composeRUD\", [state.filter(function(op) {\n    return !hasFAILObject(op);\n  })]);\n};\nTokenizer.prototype.replaceRange = function(startIndex, offset, tokens, silent) {\n  offset = offset !== null ? offset : this.tokens.length;\n  var isTokenType = tokens.every(function(token) {\n    return token instanceof Token;\n  });\n  if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n    var replaced = this.tokens.splice.apply(this.tokens, [startIndex, offset].concat(tokens));\n    if (!silent) {\n      this.dispatch(\"replaceToken\", [startIndex, offset, tokens]);\n    }\n    return [replaced, tokens];\n  } else {\n    return { FAIL: \"replaceRange: invalid tokens or startIndex.\" };\n  }\n};\nTokenizer.prototype.replaceToken = function(index, token, silent) {\n  if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n    var replaced = this.tokens.splice(index, 1, token);\n    if (!silent) {\n      this.dispatch(\"replaceToken\", [index, token]);\n    }\n    return [replaced[0], token];\n  } else {\n    return { FAIL: \"replaceToken: invalid token or index.\" };\n  }\n};\nTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n  offset = !isNaN(offset) ? offset : this.tokens.length;\n  var tokens = this.tokens.splice(startIndex, offset);\n  if (!silent) {\n    this.dispatch(\"removeRange\", [tokens, startIndex, offset]);\n  }\n  return tokens;\n};\nTokenizer.prototype.removeToken = function(index, silent) {\n  if (!isNaN(index) && this.inboundIndex(index)) {\n    var token = this.tokens.splice(index, 1);\n    if (!silent) {\n      this.dispatch(\"removeToken\", [token, index]);\n    }\n    return token;\n  } else {\n    return { FAIL: \"removeToken: invalid token index.\" };\n  }\n};\nTokenizer.prototype.insertToken = function(tokens, index, silent) {\n  var tokenType = tokens.every(function(token) {\n    return token instanceof Token;\n  });\n  if (tokenType) {\n    this.tokens.splice.apply(this.tokens, [index, 0].concat(tokens));\n    if (!silent) {\n      this.dispatch(\"insertToken\", [tokens, index]);\n    }\n    return tokens;\n  } else {\n    return { FAIL: \"insertToken: invalid token(s).\" };\n  }\n};\nTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n  this.events.newToken.subscribe(function(token, contextParams) {\n    var conditionParams = [token, contextParams];\n    var canApplyModifier = condition === null || condition.apply(this, conditionParams) === true;\n    var modifierParams = [token, contextParams];\n    if (canApplyModifier) {\n      var newStateValue = modifier.apply(this, modifierParams);\n      token.setState(modifierId, newStateValue);\n    }\n  });\n  this.registeredModifiers.push(modifierId);\n};\nEvent.prototype.subscribe = function(eventHandler) {\n  if (typeof eventHandler === \"function\") {\n    return this.subscribers.push(eventHandler) - 1;\n  } else {\n    return { FAIL: \"invalid '\" + this.eventId + \"' event handler\" };\n  }\n};\nEvent.prototype.unsubscribe = function(subsId) {\n  this.subscribers.splice(subsId, 1);\n};\nContextParams.prototype.setCurrentIndex = function(index) {\n  this.index = index;\n  this.current = this.context[index];\n  this.backtrack = this.context.slice(0, index);\n  this.lookahead = this.context.slice(index + 1);\n};\nContextParams.prototype.get = function(offset) {\n  switch (true) {\n    case offset === 0:\n      return this.current;\n    case (offset < 0 && Math.abs(offset) <= this.backtrack.length):\n      return this.backtrack.slice(offset)[0];\n    case (offset > 0 && offset <= this.lookahead.length):\n      return this.lookahead[offset - 1];\n    default:\n      return null;\n  }\n};\nTokenizer.prototype.rangeToText = function(range) {\n  if (range instanceof ContextRange) {\n    return this.getRangeTokens(range).map(function(token) {\n      return token.char;\n    }).join(\"\");\n  }\n};\nTokenizer.prototype.getText = function() {\n  return this.tokens.map(function(token) {\n    return token.char;\n  }).join(\"\");\n};\nTokenizer.prototype.getContext = function(contextName) {\n  var context = this.registeredContexts[contextName];\n  return !!context ? context : null;\n};\nTokenizer.prototype.on = function(eventName, eventHandler) {\n  var event = this.events[eventName];\n  if (!!event) {\n    return event.subscribe(eventHandler);\n  } else {\n    return null;\n  }\n};\nTokenizer.prototype.dispatch = function(eventName, args) {\n  var this$1 = this;\n  var event = this.events[eventName];\n  if (event instanceof Event) {\n    event.subscribers.forEach(function(subscriber) {\n      subscriber.apply(this$1, args || []);\n    });\n  }\n};\nTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n  if (!!this.getContext(contextName)) {\n    return {\n      FAIL: \"context name '\" + contextName + \"' is already registered.\"\n    };\n  }\n  if (typeof contextStartCheck !== \"function\") {\n    return {\n      FAIL: \"missing context start check.\"\n    };\n  }\n  if (typeof contextEndCheck !== \"function\") {\n    return {\n      FAIL: \"missing context end check.\"\n    };\n  }\n  var contextCheckers = new ContextChecker(contextName, contextStartCheck, contextEndCheck);\n  this.registeredContexts[contextName] = contextCheckers;\n  this.contextCheckers.push(contextCheckers);\n  return contextCheckers;\n};\nTokenizer.prototype.getRangeTokens = function(range) {\n  var endIndex = range.startIndex + range.endOffset;\n  return [].concat(this.tokens.slice(range.startIndex, endIndex));\n};\nTokenizer.prototype.getContextRanges = function(contextName) {\n  var context = this.getContext(contextName);\n  if (!!context) {\n    return context.ranges;\n  } else {\n    return { FAIL: \"context checker '\" + contextName + \"' is not registered.\" };\n  }\n};\nTokenizer.prototype.resetContextsRanges = function() {\n  var registeredContexts = this.registeredContexts;\n  for (var contextName in registeredContexts) {\n    if (registeredContexts.hasOwnProperty(contextName)) {\n      var context = registeredContexts[contextName];\n      context.ranges = [];\n    }\n  }\n};\nTokenizer.prototype.updateContextsRanges = function() {\n  this.resetContextsRanges();\n  var chars = this.tokens.map(function(token) {\n    return token.char;\n  });\n  for (var i = 0; i < chars.length; i++) {\n    var contextParams = new ContextParams(chars, i);\n    this.runContextCheck(contextParams);\n  }\n  this.dispatch(\"updateContextsRanges\", [this.registeredContexts]);\n};\nTokenizer.prototype.setEndOffset = function(offset, contextName) {\n  var startIndex = this.getContext(contextName).openRange.startIndex;\n  var range = new ContextRange(startIndex, offset, contextName);\n  var ranges = this.getContext(contextName).ranges;\n  range.rangeId = contextName + \".\" + ranges.length;\n  ranges.push(range);\n  this.getContext(contextName).openRange = null;\n  return range;\n};\nTokenizer.prototype.runContextCheck = function(contextParams) {\n  var this$1 = this;\n  var index = contextParams.index;\n  this.contextCheckers.forEach(function(contextChecker) {\n    var contextName = contextChecker.contextName;\n    var openRange = this$1.getContext(contextName).openRange;\n    if (!openRange && contextChecker.checkStart(contextParams)) {\n      openRange = new ContextRange(index, null, contextName);\n      this$1.getContext(contextName).openRange = openRange;\n      this$1.dispatch(\"contextStart\", [contextName, index]);\n    }\n    if (!!openRange && contextChecker.checkEnd(contextParams)) {\n      var offset = index - openRange.startIndex + 1;\n      var range = this$1.setEndOffset(offset, contextName);\n      this$1.dispatch(\"contextEnd\", [contextName, range]);\n    }\n  });\n};\nTokenizer.prototype.tokenize = function(text) {\n  this.tokens = [];\n  this.resetContextsRanges();\n  var chars = Array.from(text);\n  this.dispatch(\"start\");\n  for (var i = 0; i < chars.length; i++) {\n    var char = chars[i];\n    var contextParams = new ContextParams(chars, i);\n    this.dispatch(\"next\", [contextParams]);\n    this.runContextCheck(contextParams);\n    var token = new Token(char);\n    this.tokens.push(token);\n    this.dispatch(\"newToken\", [token, contextParams]);\n  }\n  this.dispatch(\"end\", [this.tokens]);\n  return this.tokens;\n};\nfunction isArabicChar(c2) {\n  return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c2);\n}\nfunction isIsolatedArabicChar(char) {\n  return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n}\nfunction isTashkeelArabicChar(char) {\n  return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n}\nfunction isLatinChar(c2) {\n  return /[A-z]/.test(c2);\n}\nfunction isWhiteSpace(c2) {\n  return /\\s/.test(c2);\n}\nfunction FeatureQuery(font) {\n  this.font = font;\n  this.features = {};\n}\nfunction SubstitutionAction(action) {\n  this.id = action.id;\n  this.tag = action.tag;\n  this.substitution = action.substitution;\n}\nfunction lookupCoverage(glyphIndex, coverage) {\n  if (!glyphIndex) {\n    return -1;\n  }\n  switch (coverage.format) {\n    case 1:\n      return coverage.glyphs.indexOf(glyphIndex);\n    case 2:\n      var ranges = coverage.ranges;\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (glyphIndex >= range.start && glyphIndex <= range.end) {\n          var offset = glyphIndex - range.start;\n          return range.index + offset;\n        }\n      }\n      break;\n    default:\n      return -1;\n  }\n  return -1;\n}\nfunction singleSubstitutionFormat1(glyphIndex, subtable) {\n  var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n  if (substituteIndex === -1) {\n    return null;\n  }\n  return glyphIndex + subtable.deltaGlyphId;\n}\nfunction singleSubstitutionFormat2(glyphIndex, subtable) {\n  var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n  if (substituteIndex === -1) {\n    return null;\n  }\n  return subtable.substitute[substituteIndex];\n}\nfunction lookupCoverageList(coverageList, contextParams) {\n  var lookupList = [];\n  for (var i = 0; i < coverageList.length; i++) {\n    var coverage = coverageList[i];\n    var glyphIndex = contextParams.current;\n    glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n    var lookupIndex = lookupCoverage(glyphIndex, coverage);\n    if (lookupIndex !== -1) {\n      lookupList.push(lookupIndex);\n    }\n  }\n  if (lookupList.length !== coverageList.length) {\n    return -1;\n  }\n  return lookupList;\n}\nfunction chainingSubstitutionFormat3(contextParams, subtable) {\n  var lookupsCount = subtable.inputCoverage.length + subtable.lookaheadCoverage.length + subtable.backtrackCoverage.length;\n  if (contextParams.context.length < lookupsCount) {\n    return [];\n  }\n  var inputLookups = lookupCoverageList(subtable.inputCoverage, contextParams);\n  if (inputLookups === -1) {\n    return [];\n  }\n  var lookaheadOffset = subtable.inputCoverage.length - 1;\n  if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) {\n    return [];\n  }\n  var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n  while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {\n    lookaheadContext.shift();\n  }\n  var lookaheadParams = new ContextParams(lookaheadContext, 0);\n  var lookaheadLookups = lookupCoverageList(subtable.lookaheadCoverage, lookaheadParams);\n  var backtrackContext = [].concat(contextParams.backtrack);\n  backtrackContext.reverse();\n  while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {\n    backtrackContext.shift();\n  }\n  if (backtrackContext.length < subtable.backtrackCoverage.length) {\n    return [];\n  }\n  var backtrackParams = new ContextParams(backtrackContext, 0);\n  var backtrackLookups = lookupCoverageList(subtable.backtrackCoverage, backtrackParams);\n  var contextRulesMatch = inputLookups.length === subtable.inputCoverage.length && lookaheadLookups.length === subtable.lookaheadCoverage.length && backtrackLookups.length === subtable.backtrackCoverage.length;\n  var substitutions = [];\n  if (contextRulesMatch) {\n    for (var i = 0; i < subtable.lookupRecords.length; i++) {\n      var lookupRecord = subtable.lookupRecords[i];\n      var lookupListIndex = lookupRecord.lookupListIndex;\n      var lookupTable = this.getLookupByIndex(lookupListIndex);\n      for (var s = 0; s < lookupTable.subtables.length; s++) {\n        var subtable$1 = lookupTable.subtables[s];\n        var lookup = this.getLookupMethod(lookupTable, subtable$1);\n        var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);\n        if (substitutionType === \"12\") {\n          for (var n = 0; n < inputLookups.length; n++) {\n            var glyphIndex = contextParams.get(n);\n            var substitution = lookup(glyphIndex);\n            if (substitution) {\n              substitutions.push(substitution);\n            }\n          }\n        }\n      }\n    }\n  }\n  return substitutions;\n}\nfunction ligatureSubstitutionFormat1(contextParams, subtable) {\n  var glyphIndex = contextParams.current;\n  var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);\n  if (ligSetIndex === -1) {\n    return null;\n  }\n  var ligature;\n  var ligatureSet = subtable.ligatureSets[ligSetIndex];\n  for (var s = 0; s < ligatureSet.length; s++) {\n    ligature = ligatureSet[s];\n    for (var l = 0; l < ligature.components.length; l++) {\n      var lookaheadItem = contextParams.lookahead[l];\n      var component = ligature.components[l];\n      if (lookaheadItem !== component) {\n        break;\n      }\n      if (l === ligature.components.length - 1) {\n        return ligature;\n      }\n    }\n  }\n  return null;\n}\nfunction decompositionSubstitutionFormat1(glyphIndex, subtable) {\n  var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n  if (substituteIndex === -1) {\n    return null;\n  }\n  return subtable.sequences[substituteIndex];\n}\nFeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function() {\n  var scripts = this.font.tables.gsub.scripts;\n  for (var s = 0; s < scripts.length; s++) {\n    var script = scripts[s];\n    if (script.tag === \"DFLT\") {\n      return script.script.defaultLangSys.featureIndexes;\n    }\n  }\n  return [];\n};\nFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n  var tables = this.font.tables;\n  if (!tables.gsub) {\n    return [];\n  }\n  if (!scriptTag) {\n    return this.getDefaultScriptFeaturesIndexes();\n  }\n  var scripts = this.font.tables.gsub.scripts;\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n    if (script.tag === scriptTag && script.script.defaultLangSys) {\n      return script.script.defaultLangSys.featureIndexes;\n    } else {\n      var langSysRecords = script.langSysRecords;\n      if (!!langSysRecords) {\n        for (var j = 0; j < langSysRecords.length; j++) {\n          var langSysRecord = langSysRecords[j];\n          if (langSysRecord.tag === scriptTag) {\n            var langSys = langSysRecord.langSys;\n            return langSys.featureIndexes;\n          }\n        }\n      }\n    }\n  }\n  return this.getDefaultScriptFeaturesIndexes();\n};\nFeatureQuery.prototype.mapTagsToFeatures = function(features, scriptTag) {\n  var tags = {};\n  for (var i = 0; i < features.length; i++) {\n    var tag = features[i].tag;\n    var feature = features[i].feature;\n    tags[tag] = feature;\n  }\n  this.features[scriptTag].tags = tags;\n};\nFeatureQuery.prototype.getScriptFeatures = function(scriptTag) {\n  var features = this.features[scriptTag];\n  if (this.features.hasOwnProperty(scriptTag)) {\n    return features;\n  }\n  var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n  if (!featuresIndexes) {\n    return null;\n  }\n  var gsub2 = this.font.tables.gsub;\n  features = featuresIndexes.map(function(index) {\n    return gsub2.features[index];\n  });\n  this.features[scriptTag] = features;\n  this.mapTagsToFeatures(features, scriptTag);\n  return features;\n};\nFeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {\n  var lookupType = lookupTable.lookupType.toString();\n  var substFormat = subtable.substFormat.toString();\n  return lookupType + substFormat;\n};\nFeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {\n  var this$1 = this;\n  var substitutionType = this.getSubstitutionType(lookupTable, subtable);\n  switch (substitutionType) {\n    case \"11\":\n      return function(glyphIndex) {\n        return singleSubstitutionFormat1.apply(this$1, [glyphIndex, subtable]);\n      };\n    case \"12\":\n      return function(glyphIndex) {\n        return singleSubstitutionFormat2.apply(this$1, [glyphIndex, subtable]);\n      };\n    case \"63\":\n      return function(contextParams) {\n        return chainingSubstitutionFormat3.apply(this$1, [contextParams, subtable]);\n      };\n    case \"41\":\n      return function(contextParams) {\n        return ligatureSubstitutionFormat1.apply(this$1, [contextParams, subtable]);\n      };\n    case \"21\":\n      return function(glyphIndex) {\n        return decompositionSubstitutionFormat1.apply(this$1, [glyphIndex, subtable]);\n      };\n    default:\n      throw new Error(\"lookupType: \" + lookupTable.lookupType + \" - substFormat: \" + subtable.substFormat + \" is not yet supported\");\n  }\n};\nFeatureQuery.prototype.lookupFeature = function(query) {\n  var contextParams = query.contextParams;\n  var currentIndex = contextParams.index;\n  var feature = this.getFeature({\n    tag: query.tag,\n    script: query.script\n  });\n  if (!feature) {\n    return new Error(\"font '\" + this.font.names.fullName.en + \"' doesn't support feature '\" + query.tag + \"' for script '\" + query.script + \"'.\");\n  }\n  var lookups = this.getFeatureLookups(feature);\n  var substitutions = [].concat(contextParams.context);\n  for (var l = 0; l < lookups.length; l++) {\n    var lookupTable = lookups[l];\n    var subtables = this.getLookupSubtables(lookupTable);\n    for (var s = 0; s < subtables.length; s++) {\n      var subtable = subtables[s];\n      var substType = this.getSubstitutionType(lookupTable, subtable);\n      var lookup = this.getLookupMethod(lookupTable, subtable);\n      var substitution = void 0;\n      switch (substType) {\n        case \"11\":\n          substitution = lookup(contextParams.current);\n          if (substitution) {\n            substitutions.splice(currentIndex, 1, new SubstitutionAction({\n              id: 11,\n              tag: query.tag,\n              substitution\n            }));\n          }\n          break;\n        case \"12\":\n          substitution = lookup(contextParams.current);\n          if (substitution) {\n            substitutions.splice(currentIndex, 1, new SubstitutionAction({\n              id: 12,\n              tag: query.tag,\n              substitution\n            }));\n          }\n          break;\n        case \"63\":\n          substitution = lookup(contextParams);\n          if (Array.isArray(substitution) && substitution.length) {\n            substitutions.splice(currentIndex, 1, new SubstitutionAction({\n              id: 63,\n              tag: query.tag,\n              substitution\n            }));\n          }\n          break;\n        case \"41\":\n          substitution = lookup(contextParams);\n          if (substitution) {\n            substitutions.splice(currentIndex, 1, new SubstitutionAction({\n              id: 41,\n              tag: query.tag,\n              substitution\n            }));\n          }\n          break;\n        case \"21\":\n          substitution = lookup(contextParams.current);\n          if (substitution) {\n            substitutions.splice(currentIndex, 1, new SubstitutionAction({\n              id: 21,\n              tag: query.tag,\n              substitution\n            }));\n          }\n          break;\n      }\n      contextParams = new ContextParams(substitutions, currentIndex);\n      if (Array.isArray(substitution) && !substitution.length) {\n        continue;\n      }\n      substitution = null;\n    }\n  }\n  return substitutions.length ? substitutions : null;\n};\nFeatureQuery.prototype.supports = function(query) {\n  if (!query.script) {\n    return false;\n  }\n  this.getScriptFeatures(query.script);\n  var supportedScript = this.features.hasOwnProperty(query.script);\n  if (!query.tag) {\n    return supportedScript;\n  }\n  var supportedFeature = this.features[query.script].some(function(feature) {\n    return feature.tag === query.tag;\n  });\n  return supportedScript && supportedFeature;\n};\nFeatureQuery.prototype.getLookupSubtables = function(lookupTable) {\n  return lookupTable.subtables || null;\n};\nFeatureQuery.prototype.getLookupByIndex = function(index) {\n  var lookups = this.font.tables.gsub.lookups;\n  return lookups[index] || null;\n};\nFeatureQuery.prototype.getFeatureLookups = function(feature) {\n  return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n};\nFeatureQuery.prototype.getFeature = function getFeature(query) {\n  if (!this.font) {\n    return { FAIL: \"No font was found\" };\n  }\n  if (!this.features.hasOwnProperty(query.script)) {\n    this.getScriptFeatures(query.script);\n  }\n  var scriptFeatures = this.features[query.script];\n  if (!scriptFeatures) {\n    return { FAIL: \"No feature for script \" + query.script };\n  }\n  if (!scriptFeatures.tags[query.tag]) {\n    return null;\n  }\n  return this.features[query.script].tags[query.tag];\n};\nfunction arabicWordStartCheck(contextParams) {\n  var char = contextParams.current;\n  var prevChar = contextParams.get(-1);\n  return prevChar === null && isArabicChar(char) || !isArabicChar(prevChar) && isArabicChar(char);\n}\nfunction arabicWordEndCheck(contextParams) {\n  var nextChar = contextParams.get(1);\n  return nextChar === null || !isArabicChar(nextChar);\n}\nvar arabicWordCheck = {\n  startCheck: arabicWordStartCheck,\n  endCheck: arabicWordEndCheck\n};\nfunction arabicSentenceStartCheck(contextParams) {\n  var char = contextParams.current;\n  var prevChar = contextParams.get(-1);\n  return (isArabicChar(char) || isTashkeelArabicChar(char)) && !isArabicChar(prevChar);\n}\nfunction arabicSentenceEndCheck(contextParams) {\n  var nextChar = contextParams.get(1);\n  switch (true) {\n    case nextChar === null:\n      return true;\n    case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):\n      var nextIsWhitespace = isWhiteSpace(nextChar);\n      if (!nextIsWhitespace) {\n        return true;\n      }\n      if (nextIsWhitespace) {\n        var arabicCharAhead = false;\n        arabicCharAhead = contextParams.lookahead.some(function(c2) {\n          return isArabicChar(c2) || isTashkeelArabicChar(c2);\n        });\n        if (!arabicCharAhead) {\n          return true;\n        }\n      }\n      break;\n    default:\n      return false;\n  }\n}\nvar arabicSentenceCheck = {\n  startCheck: arabicSentenceStartCheck,\n  endCheck: arabicSentenceEndCheck\n};\nfunction singleSubstitutionFormat1$1(action, tokens, index) {\n  tokens[index].setState(action.tag, action.substitution);\n}\nfunction singleSubstitutionFormat2$1(action, tokens, index) {\n  tokens[index].setState(action.tag, action.substitution);\n}\nfunction chainingSubstitutionFormat3$1(action, tokens, index) {\n  action.substitution.forEach(function(subst, offset) {\n    var token = tokens[index + offset];\n    token.setState(action.tag, subst);\n  });\n}\nfunction ligatureSubstitutionFormat1$1(action, tokens, index) {\n  var token = tokens[index];\n  token.setState(action.tag, action.substitution.ligGlyph);\n  var compsCount = action.substitution.components.length;\n  for (var i = 0; i < compsCount; i++) {\n    token = tokens[index + i + 1];\n    token.setState(\"deleted\", true);\n  }\n}\nvar SUBSTITUTIONS = {\n  11: singleSubstitutionFormat1$1,\n  12: singleSubstitutionFormat2$1,\n  63: chainingSubstitutionFormat3$1,\n  41: ligatureSubstitutionFormat1$1\n};\nfunction applySubstitution(action, tokens, index) {\n  if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {\n    SUBSTITUTIONS[action.id](action, tokens, index);\n  }\n}\nfunction willConnectPrev(charContextParams) {\n  var backtrack = [].concat(charContextParams.backtrack);\n  for (var i = backtrack.length - 1; i >= 0; i--) {\n    var prevChar = backtrack[i];\n    var isolated = isIsolatedArabicChar(prevChar);\n    var tashkeel = isTashkeelArabicChar(prevChar);\n    if (!isolated && !tashkeel) {\n      return true;\n    }\n    if (isolated) {\n      return false;\n    }\n  }\n  return false;\n}\nfunction willConnectNext(charContextParams) {\n  if (isIsolatedArabicChar(charContextParams.current)) {\n    return false;\n  }\n  for (var i = 0; i < charContextParams.lookahead.length; i++) {\n    var nextChar = charContextParams.lookahead[i];\n    var tashkeel = isTashkeelArabicChar(nextChar);\n    if (!tashkeel) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction arabicPresentationForms(range) {\n  var this$1 = this;\n  var script = \"arab\";\n  var tags = this.featuresTags[script];\n  var tokens = this.tokenizer.getRangeTokens(range);\n  if (tokens.length === 1) {\n    return;\n  }\n  var contextParams = new ContextParams(tokens.map(function(token) {\n    return token.getState(\"glyphIndex\");\n  }), 0);\n  var charContextParams = new ContextParams(tokens.map(function(token) {\n    return token.char;\n  }), 0);\n  tokens.forEach(function(token, index) {\n    if (isTashkeelArabicChar(token.char)) {\n      return;\n    }\n    contextParams.setCurrentIndex(index);\n    charContextParams.setCurrentIndex(index);\n    var CONNECT = 0;\n    if (willConnectPrev(charContextParams)) {\n      CONNECT |= 1;\n    }\n    if (willConnectNext(charContextParams)) {\n      CONNECT |= 2;\n    }\n    var tag;\n    switch (CONNECT) {\n      case 1:\n        tag = \"fina\";\n        break;\n      case 2:\n        tag = \"init\";\n        break;\n      case 3:\n        tag = \"medi\";\n        break;\n    }\n    if (tags.indexOf(tag) === -1) {\n      return;\n    }\n    var substitutions = this$1.query.lookupFeature({\n      tag,\n      script,\n      contextParams\n    });\n    if (substitutions instanceof Error) {\n      return console.info(substitutions.message);\n    }\n    substitutions.forEach(function(action, index2) {\n      if (action instanceof SubstitutionAction) {\n        applySubstitution(action, tokens, index2);\n        contextParams.context[index2] = action.substitution;\n      }\n    });\n  });\n}\nfunction getContextParams(tokens, index) {\n  var context = tokens.map(function(token) {\n    return token.activeState.value;\n  });\n  return new ContextParams(context, index || 0);\n}\nfunction arabicRequiredLigatures(range) {\n  var this$1 = this;\n  var script = \"arab\";\n  var tokens = this.tokenizer.getRangeTokens(range);\n  var contextParams = getContextParams(tokens);\n  contextParams.context.forEach(function(glyphIndex, index) {\n    contextParams.setCurrentIndex(index);\n    var substitutions = this$1.query.lookupFeature({\n      tag: \"rlig\",\n      script,\n      contextParams\n    });\n    if (substitutions.length) {\n      substitutions.forEach(function(action) {\n        return applySubstitution(action, tokens, index);\n      });\n      contextParams = getContextParams(tokens);\n    }\n  });\n}\nfunction latinWordStartCheck(contextParams) {\n  var char = contextParams.current;\n  var prevChar = contextParams.get(-1);\n  return prevChar === null && isLatinChar(char) || !isLatinChar(prevChar) && isLatinChar(char);\n}\nfunction latinWordEndCheck(contextParams) {\n  var nextChar = contextParams.get(1);\n  return nextChar === null || !isLatinChar(nextChar);\n}\nvar latinWordCheck = {\n  startCheck: latinWordStartCheck,\n  endCheck: latinWordEndCheck\n};\nfunction getContextParams$1(tokens, index) {\n  var context = tokens.map(function(token) {\n    return token.activeState.value;\n  });\n  return new ContextParams(context, index || 0);\n}\nfunction latinLigature(range) {\n  var this$1 = this;\n  var script = \"latn\";\n  var tokens = this.tokenizer.getRangeTokens(range);\n  var contextParams = getContextParams$1(tokens);\n  contextParams.context.forEach(function(glyphIndex, index) {\n    contextParams.setCurrentIndex(index);\n    var substitutions = this$1.query.lookupFeature({\n      tag: \"liga\",\n      script,\n      contextParams\n    });\n    if (substitutions.length) {\n      substitutions.forEach(function(action) {\n        return applySubstitution(action, tokens, index);\n      });\n      contextParams = getContextParams$1(tokens);\n    }\n  });\n}\nfunction Bidi(baseDir) {\n  this.baseDir = baseDir || \"ltr\";\n  this.tokenizer = new Tokenizer();\n  this.featuresTags = {};\n}\nBidi.prototype.setText = function(text) {\n  this.text = text;\n};\nBidi.prototype.contextChecks = {\n  latinWordCheck,\n  arabicWordCheck,\n  arabicSentenceCheck\n};\nfunction registerContextChecker(checkId) {\n  var check2 = this.contextChecks[checkId + \"Check\"];\n  return this.tokenizer.registerContextChecker(checkId, check2.startCheck, check2.endCheck);\n}\nfunction tokenizeText() {\n  registerContextChecker.call(this, \"latinWord\");\n  registerContextChecker.call(this, \"arabicWord\");\n  registerContextChecker.call(this, \"arabicSentence\");\n  return this.tokenizer.tokenize(this.text);\n}\nfunction reverseArabicSentences() {\n  var this$1 = this;\n  var ranges = this.tokenizer.getContextRanges(\"arabicSentence\");\n  ranges.forEach(function(range) {\n    var rangeTokens = this$1.tokenizer.getRangeTokens(range);\n    this$1.tokenizer.replaceRange(range.startIndex, range.endOffset, rangeTokens.reverse());\n  });\n}\nBidi.prototype.registerFeatures = function(script, tags) {\n  var this$1 = this;\n  var supportedTags = tags.filter(function(tag) {\n    return this$1.query.supports({ script, tag });\n  });\n  if (!this.featuresTags.hasOwnProperty(script)) {\n    this.featuresTags[script] = supportedTags;\n  } else {\n    this.featuresTags[script] = this.featuresTags[script].concat(supportedTags);\n  }\n};\nBidi.prototype.applyFeatures = function(font, features) {\n  if (!font) {\n    throw new Error(\"No valid font was provided to apply features\");\n  }\n  if (!this.query) {\n    this.query = new FeatureQuery(font);\n  }\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    if (!this.query.supports({ script: feature.script })) {\n      continue;\n    }\n    this.registerFeatures(feature.script, feature.tags);\n  }\n};\nBidi.prototype.registerModifier = function(modifierId, condition, modifier) {\n  this.tokenizer.registerModifier(modifierId, condition, modifier);\n};\nfunction checkGlyphIndexStatus() {\n  if (this.tokenizer.registeredModifiers.indexOf(\"glyphIndex\") === -1) {\n    throw new Error(\"glyphIndex modifier is required to apply arabic presentation features.\");\n  }\n}\nfunction applyArabicPresentationForms() {\n  var this$1 = this;\n  var script = \"arab\";\n  if (!this.featuresTags.hasOwnProperty(script)) {\n    return;\n  }\n  checkGlyphIndexStatus.call(this);\n  var ranges = this.tokenizer.getContextRanges(\"arabicWord\");\n  ranges.forEach(function(range) {\n    arabicPresentationForms.call(this$1, range);\n  });\n}\nfunction applyArabicRequireLigatures() {\n  var this$1 = this;\n  var script = \"arab\";\n  if (!this.featuresTags.hasOwnProperty(script)) {\n    return;\n  }\n  var tags = this.featuresTags[script];\n  if (tags.indexOf(\"rlig\") === -1) {\n    return;\n  }\n  checkGlyphIndexStatus.call(this);\n  var ranges = this.tokenizer.getContextRanges(\"arabicWord\");\n  ranges.forEach(function(range) {\n    arabicRequiredLigatures.call(this$1, range);\n  });\n}\nfunction applyLatinLigatures() {\n  var this$1 = this;\n  var script = \"latn\";\n  if (!this.featuresTags.hasOwnProperty(script)) {\n    return;\n  }\n  var tags = this.featuresTags[script];\n  if (tags.indexOf(\"liga\") === -1) {\n    return;\n  }\n  checkGlyphIndexStatus.call(this);\n  var ranges = this.tokenizer.getContextRanges(\"latinWord\");\n  ranges.forEach(function(range) {\n    latinLigature.call(this$1, range);\n  });\n}\nBidi.prototype.checkContextReady = function(contextId) {\n  return !!this.tokenizer.getContext(contextId);\n};\nBidi.prototype.applyFeaturesToContexts = function() {\n  if (this.checkContextReady(\"arabicWord\")) {\n    applyArabicPresentationForms.call(this);\n    applyArabicRequireLigatures.call(this);\n  }\n  if (this.checkContextReady(\"latinWord\")) {\n    applyLatinLigatures.call(this);\n  }\n  if (this.checkContextReady(\"arabicSentence\")) {\n    reverseArabicSentences.call(this);\n  }\n};\nBidi.prototype.processText = function(text) {\n  if (!this.text || this.text !== text) {\n    this.setText(text);\n    tokenizeText.call(this);\n    this.applyFeaturesToContexts();\n  }\n};\nBidi.prototype.getBidiText = function(text) {\n  this.processText(text);\n  return this.tokenizer.getText();\n};\nBidi.prototype.getTextGlyphs = function(text) {\n  this.processText(text);\n  var indexes = [];\n  for (var i = 0; i < this.tokenizer.tokens.length; i++) {\n    var token = this.tokenizer.tokens[i];\n    if (token.state.deleted) {\n      continue;\n    }\n    var index = token.activeState.value;\n    indexes.push(Array.isArray(index) ? index[0] : index);\n  }\n  return indexes;\n};\nfunction Font(options) {\n  options = options || {};\n  options.tables = options.tables || {};\n  if (!options.empty) {\n    checkArgument(options.familyName, \"When creating a new Font object, familyName is required.\");\n    checkArgument(options.styleName, \"When creating a new Font object, styleName is required.\");\n    checkArgument(options.unitsPerEm, \"When creating a new Font object, unitsPerEm is required.\");\n    checkArgument(options.ascender, \"When creating a new Font object, ascender is required.\");\n    checkArgument(options.descender <= 0, \"When creating a new Font object, negative descender value is required.\");\n    this.unitsPerEm = options.unitsPerEm || 1e3;\n    this.ascender = options.ascender;\n    this.descender = options.descender;\n    this.createdTimestamp = options.createdTimestamp;\n    this.tables = Object.assign(options.tables, {\n      os2: Object.assign({\n        usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n        usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n        fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n      }, options.tables.os2)\n    });\n  }\n  this.supported = true;\n  this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n  this.encoding = new DefaultEncoding(this);\n  this.position = new Position(this);\n  this.substitution = new Substitution(this);\n  this.tables = this.tables || {};\n  this._push = null;\n  this._hmtxTableData = {};\n  Object.defineProperty(this, \"hinting\", {\n    get: function() {\n      if (this._hinting) {\n        return this._hinting;\n      }\n      if (this.outlinesFormat === \"truetype\") {\n        return this._hinting = new Hinting(this);\n      }\n    }\n  });\n}\nFont.prototype.hasChar = function(c2) {\n  return this.encoding.charToGlyphIndex(c2) !== null;\n};\nFont.prototype.charToGlyphIndex = function(s) {\n  return this.encoding.charToGlyphIndex(s);\n};\nFont.prototype.charToGlyph = function(c2) {\n  var glyphIndex = this.charToGlyphIndex(c2);\n  var glyph = this.glyphs.get(glyphIndex);\n  if (!glyph) {\n    glyph = this.glyphs.get(0);\n  }\n  return glyph;\n};\nFont.prototype.updateFeatures = function(options) {\n  return this.defaultRenderOptions.features.map(function(feature) {\n    if (feature.script === \"latn\") {\n      return {\n        script: \"latn\",\n        tags: feature.tags.filter(function(tag) {\n          return options[tag];\n        })\n      };\n    } else {\n      return feature;\n    }\n  });\n};\nFont.prototype.stringToGlyphs = function(s, options) {\n  var this$1 = this;\n  var bidi = new Bidi();\n  var charToGlyphIndexMod = function(token) {\n    return this$1.charToGlyphIndex(token.char);\n  };\n  bidi.registerModifier(\"glyphIndex\", null, charToGlyphIndexMod);\n  var features = options ? this.updateFeatures(options.features) : this.defaultRenderOptions.features;\n  bidi.applyFeatures(this, features);\n  var indexes = bidi.getTextGlyphs(s);\n  var length = indexes.length;\n  var glyphs = new Array(length);\n  var notdef = this.glyphs.get(0);\n  for (var i = 0; i < length; i += 1) {\n    glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n  }\n  return glyphs;\n};\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n  leftGlyph = leftGlyph.index || leftGlyph;\n  rightGlyph = rightGlyph.index || rightGlyph;\n  var gposKerning = this.position.defaultKerningTables;\n  if (gposKerning) {\n    return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n  }\n  return this.kerningPairs[leftGlyph + \",\" + rightGlyph] || 0;\n};\nFont.prototype.defaultRenderOptions = {\n  kerning: true,\n  features: [\n    { script: \"arab\", tags: [\"init\", \"medi\", \"fina\", \"rlig\"] },\n    { script: \"latn\", tags: [\"liga\", \"rlig\"] }\n  ]\n};\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n  x = x !== void 0 ? x : 0;\n  y = y !== void 0 ? y : 0;\n  fontSize = fontSize !== void 0 ? fontSize : 72;\n  options = Object.assign({}, this.defaultRenderOptions, options);\n  var fontScale = 1 / this.unitsPerEm * fontSize;\n  var glyphs = this.stringToGlyphs(text, options);\n  var kerningLookups;\n  if (options.kerning) {\n    var script = options.script || this.position.getDefaultScriptName();\n    kerningLookups = this.position.getKerningTables(script, options.language);\n  }\n  for (var i = 0; i < glyphs.length; i += 1) {\n    var glyph = glyphs[i];\n    callback.call(this, glyph, x, y, fontSize, options);\n    if (glyph.advanceWidth) {\n      x += glyph.advanceWidth * fontScale;\n    }\n    if (options.kerning && i < glyphs.length - 1) {\n      var kerningValue = kerningLookups ? this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) : this.getKerningValue(glyph, glyphs[i + 1]);\n      x += kerningValue * fontScale;\n    }\n    if (options.letterSpacing) {\n      x += options.letterSpacing * fontSize;\n    } else if (options.tracking) {\n      x += options.tracking / 1e3 * fontSize;\n    }\n  }\n  return x;\n};\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n  var fullPath = new Path();\n  this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n    var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n    fullPath.extend(glyphPath);\n  });\n  return fullPath;\n};\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n  var glyphPaths = [];\n  this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n    var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n    glyphPaths.push(glyphPath);\n  });\n  return glyphPaths;\n};\nFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n  return this.forEachGlyph(text, 0, 0, fontSize, options, function() {\n  });\n};\nFont.prototype.fsSelectionValues = {\n  ITALIC: 1,\n  UNDERSCORE: 2,\n  NEGATIVE: 4,\n  OUTLINED: 8,\n  STRIKEOUT: 16,\n  BOLD: 32,\n  REGULAR: 64,\n  USER_TYPO_METRICS: 128,\n  WWS: 256,\n  OBLIQUE: 512\n};\nFont.prototype.usWidthClasses = {\n  ULTRA_CONDENSED: 1,\n  EXTRA_CONDENSED: 2,\n  CONDENSED: 3,\n  SEMI_CONDENSED: 4,\n  MEDIUM: 5,\n  SEMI_EXPANDED: 6,\n  EXPANDED: 7,\n  EXTRA_EXPANDED: 8,\n  ULTRA_EXPANDED: 9\n};\nFont.prototype.usWeightClasses = {\n  THIN: 100,\n  EXTRA_LIGHT: 200,\n  LIGHT: 300,\n  NORMAL: 400,\n  MEDIUM: 500,\n  SEMI_BOLD: 600,\n  BOLD: 700,\n  EXTRA_BOLD: 800,\n  BLACK: 900\n};\nfunction parseCmapTableFormat12(cmap2, p) {\n  p.parseUShort();\n  cmap2.length = p.parseULong();\n  cmap2.language = p.parseULong();\n  var groupCount;\n  cmap2.groupCount = groupCount = p.parseULong();\n  cmap2.glyphIndexMap = {};\n  for (var i = 0; i < groupCount; i += 1) {\n    var startCharCode = p.parseULong();\n    var endCharCode = p.parseULong();\n    var startGlyphId = p.parseULong();\n    for (var c2 = startCharCode; c2 <= endCharCode; c2 += 1) {\n      cmap2.glyphIndexMap[c2] = startGlyphId;\n      startGlyphId++;\n    }\n  }\n}\nfunction parseCmapTableFormat4(cmap2, p, data, start, offset) {\n  cmap2.length = p.parseUShort();\n  cmap2.language = p.parseUShort();\n  var segCount;\n  cmap2.segCount = segCount = p.parseUShort() >> 1;\n  p.skip(\"uShort\", 3);\n  cmap2.glyphIndexMap = {};\n  var endCountParser = new parse.Parser(data, start + offset + 14);\n  var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n  var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n  var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n  var glyphIndexOffset = start + offset + 16 + segCount * 8;\n  for (var i = 0; i < segCount - 1; i += 1) {\n    var glyphIndex = void 0;\n    var endCount = endCountParser.parseUShort();\n    var startCount = startCountParser.parseUShort();\n    var idDelta = idDeltaParser.parseShort();\n    var idRangeOffset = idRangeOffsetParser.parseUShort();\n    for (var c2 = startCount; c2 <= endCount; c2 += 1) {\n      if (idRangeOffset !== 0) {\n        glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;\n        glyphIndexOffset += idRangeOffset;\n        glyphIndexOffset += (c2 - startCount) * 2;\n        glyphIndex = parse.getUShort(data, glyphIndexOffset);\n        if (glyphIndex !== 0) {\n          glyphIndex = glyphIndex + idDelta & 65535;\n        }\n      } else {\n        glyphIndex = c2 + idDelta & 65535;\n      }\n      cmap2.glyphIndexMap[c2] = glyphIndex;\n    }\n  }\n}\nfunction parseCmapTable(data, start) {\n  var cmap2 = {};\n  cmap2.version = parse.getUShort(data, start);\n  check.argument(cmap2.version === 0, \"cmap table version should be 0.\");\n  cmap2.numTables = parse.getUShort(data, start + 2);\n  var offset = -1;\n  for (var i = cmap2.numTables - 1; i >= 0; i -= 1) {\n    var platformId = parse.getUShort(data, start + 4 + i * 8);\n    var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n    if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10) || platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4)) {\n      offset = parse.getULong(data, start + 4 + i * 8 + 4);\n      break;\n    }\n  }\n  if (offset === -1) {\n    throw new Error(\"No valid cmap sub-tables found.\");\n  }\n  var p = new parse.Parser(data, start + offset);\n  cmap2.format = p.parseUShort();\n  if (cmap2.format === 12) {\n    parseCmapTableFormat12(cmap2, p);\n  } else if (cmap2.format === 4) {\n    parseCmapTableFormat4(cmap2, p, data, start, offset);\n  } else {\n    throw new Error(\"Only format 4 and 12 cmap tables are supported (found format \" + cmap2.format + \").\");\n  }\n  return cmap2;\n}\nvar cmap = { parse: parseCmapTable };\nfunction calcCFFSubroutineBias(subrs) {\n  var bias;\n  if (subrs.length < 1240) {\n    bias = 107;\n  } else if (subrs.length < 33900) {\n    bias = 1131;\n  } else {\n    bias = 32768;\n  }\n  return bias;\n}\nfunction parseCFFIndex(data, start, conversionFn) {\n  var offsets = [];\n  var objects = [];\n  var count = parse.getCard16(data, start);\n  var objectOffset;\n  var endOffset;\n  if (count !== 0) {\n    var offsetSize = parse.getByte(data, start + 2);\n    objectOffset = start + (count + 1) * offsetSize + 2;\n    var pos = start + 3;\n    for (var i = 0; i < count + 1; i += 1) {\n      offsets.push(parse.getOffset(data, pos, offsetSize));\n      pos += offsetSize;\n    }\n    endOffset = objectOffset + offsets[count];\n  } else {\n    endOffset = start + 2;\n  }\n  for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {\n    var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);\n    if (conversionFn) {\n      value = conversionFn(value);\n    }\n    objects.push(value);\n  }\n  return { objects, startOffset: start, endOffset };\n}\nfunction parseCFFIndexLowMemory(data, start) {\n  var offsets = [];\n  var count = parse.getCard16(data, start);\n  var objectOffset;\n  var endOffset;\n  if (count !== 0) {\n    var offsetSize = parse.getByte(data, start + 2);\n    objectOffset = start + (count + 1) * offsetSize + 2;\n    var pos = start + 3;\n    for (var i = 0; i < count + 1; i += 1) {\n      offsets.push(parse.getOffset(data, pos, offsetSize));\n      pos += offsetSize;\n    }\n    endOffset = objectOffset + offsets[count];\n  } else {\n    endOffset = start + 2;\n  }\n  return { offsets, startOffset: start, endOffset };\n}\nfunction getCffIndexObject(i, offsets, data, start, conversionFn) {\n  var count = parse.getCard16(data, start);\n  var objectOffset = 0;\n  if (count !== 0) {\n    var offsetSize = parse.getByte(data, start + 2);\n    objectOffset = start + (count + 1) * offsetSize + 2;\n  }\n  var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n  if (conversionFn) {\n    value = conversionFn(value);\n  }\n  return value;\n}\nfunction parseFloatOperand(parser) {\n  var s = \"\";\n  var eof = 15;\n  var lookup = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \".\",\n    \"E\",\n    \"E-\",\n    null,\n    \"-\"\n  ];\n  while (true) {\n    var b = parser.parseByte();\n    var n1 = b >> 4;\n    var n2 = b & 15;\n    if (n1 === eof) {\n      break;\n    }\n    s += lookup[n1];\n    if (n2 === eof) {\n      break;\n    }\n    s += lookup[n2];\n  }\n  return parseFloat(s);\n}\nfunction parseOperand(parser, b0) {\n  var b1;\n  var b2;\n  var b3;\n  var b4;\n  if (b0 === 28) {\n    b1 = parser.parseByte();\n    b2 = parser.parseByte();\n    return b1 << 8 | b2;\n  }\n  if (b0 === 29) {\n    b1 = parser.parseByte();\n    b2 = parser.parseByte();\n    b3 = parser.parseByte();\n    b4 = parser.parseByte();\n    return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n  }\n  if (b0 === 30) {\n    return parseFloatOperand(parser);\n  }\n  if (b0 >= 32 && b0 <= 246) {\n    return b0 - 139;\n  }\n  if (b0 >= 247 && b0 <= 250) {\n    b1 = parser.parseByte();\n    return (b0 - 247) * 256 + b1 + 108;\n  }\n  if (b0 >= 251 && b0 <= 254) {\n    b1 = parser.parseByte();\n    return -(b0 - 251) * 256 - b1 - 108;\n  }\n  throw new Error(\"Invalid b0 \" + b0);\n}\nfunction entriesToObject(entries) {\n  var o = {};\n  for (var i = 0; i < entries.length; i += 1) {\n    var key = entries[i][0];\n    var values = entries[i][1];\n    var value = void 0;\n    if (values.length === 1) {\n      value = values[0];\n    } else {\n      value = values;\n    }\n    if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n      throw new Error(\"Object \" + o + \" already has key \" + key);\n    }\n    o[key] = value;\n  }\n  return o;\n}\nfunction parseCFFDict(data, start, size) {\n  start = start !== void 0 ? start : 0;\n  var parser = new parse.Parser(data, start);\n  var entries = [];\n  var operands = [];\n  size = size !== void 0 ? size : data.length;\n  while (parser.relativeOffset < size) {\n    var op = parser.parseByte();\n    if (op <= 21) {\n      if (op === 12) {\n        op = 1200 + parser.parseByte();\n      }\n      entries.push([op, operands]);\n      operands = [];\n    } else {\n      operands.push(parseOperand(parser, op));\n    }\n  }\n  return entriesToObject(entries);\n}\nfunction getCFFString(strings, index) {\n  if (index <= 390) {\n    index = cffStandardStrings[index];\n  } else {\n    index = strings[index - 391];\n  }\n  return index;\n}\nfunction interpretDict(dict, meta2, strings) {\n  var newDict = {};\n  var value;\n  for (var i = 0; i < meta2.length; i += 1) {\n    var m = meta2[i];\n    if (Array.isArray(m.type)) {\n      var values = [];\n      values.length = m.type.length;\n      for (var j = 0; j < m.type.length; j++) {\n        value = dict[m.op] !== void 0 ? dict[m.op][j] : void 0;\n        if (value === void 0) {\n          value = m.value !== void 0 && m.value[j] !== void 0 ? m.value[j] : null;\n        }\n        if (m.type[j] === \"SID\") {\n          value = getCFFString(strings, value);\n        }\n        values[j] = value;\n      }\n      newDict[m.name] = values;\n    } else {\n      value = dict[m.op];\n      if (value === void 0) {\n        value = m.value !== void 0 ? m.value : null;\n      }\n      if (m.type === \"SID\") {\n        value = getCFFString(strings, value);\n      }\n      newDict[m.name] = value;\n    }\n  }\n  return newDict;\n}\nfunction parseCFFHeader(data, start) {\n  var header = {};\n  header.formatMajor = parse.getCard8(data, start);\n  header.formatMinor = parse.getCard8(data, start + 1);\n  header.size = parse.getCard8(data, start + 2);\n  header.offsetSize = parse.getCard8(data, start + 3);\n  header.startOffset = start;\n  header.endOffset = start + 4;\n  return header;\n}\nvar TOP_DICT_META = [\n  { name: \"version\", op: 0, type: \"SID\" },\n  { name: \"notice\", op: 1, type: \"SID\" },\n  { name: \"copyright\", op: 1200, type: \"SID\" },\n  { name: \"fullName\", op: 2, type: \"SID\" },\n  { name: \"familyName\", op: 3, type: \"SID\" },\n  { name: \"weight\", op: 4, type: \"SID\" },\n  { name: \"isFixedPitch\", op: 1201, type: \"number\", value: 0 },\n  { name: \"italicAngle\", op: 1202, type: \"number\", value: 0 },\n  { name: \"underlinePosition\", op: 1203, type: \"number\", value: -100 },\n  { name: \"underlineThickness\", op: 1204, type: \"number\", value: 50 },\n  { name: \"paintType\", op: 1205, type: \"number\", value: 0 },\n  { name: \"charstringType\", op: 1206, type: \"number\", value: 2 },\n  {\n    name: \"fontMatrix\",\n    op: 1207,\n    type: [\"real\", \"real\", \"real\", \"real\", \"real\", \"real\"],\n    value: [1e-3, 0, 0, 1e-3, 0, 0]\n  },\n  { name: \"uniqueId\", op: 13, type: \"number\" },\n  {\n    name: \"fontBBox\",\n    op: 5,\n    type: [\"number\", \"number\", \"number\", \"number\"],\n    value: [0, 0, 0, 0]\n  },\n  { name: \"strokeWidth\", op: 1208, type: \"number\", value: 0 },\n  { name: \"xuid\", op: 14, type: [], value: null },\n  { name: \"charset\", op: 15, type: \"offset\", value: 0 },\n  { name: \"encoding\", op: 16, type: \"offset\", value: 0 },\n  { name: \"charStrings\", op: 17, type: \"offset\", value: 0 },\n  { name: \"private\", op: 18, type: [\"number\", \"offset\"], value: [0, 0] },\n  { name: \"ros\", op: 1230, type: [\"SID\", \"SID\", \"number\"] },\n  { name: \"cidFontVersion\", op: 1231, type: \"number\", value: 0 },\n  { name: \"cidFontRevision\", op: 1232, type: \"number\", value: 0 },\n  { name: \"cidFontType\", op: 1233, type: \"number\", value: 0 },\n  { name: \"cidCount\", op: 1234, type: \"number\", value: 8720 },\n  { name: \"uidBase\", op: 1235, type: \"number\" },\n  { name: \"fdArray\", op: 1236, type: \"offset\" },\n  { name: \"fdSelect\", op: 1237, type: \"offset\" },\n  { name: \"fontName\", op: 1238, type: \"SID\" }\n];\nvar PRIVATE_DICT_META = [\n  { name: \"subrs\", op: 19, type: \"offset\", value: 0 },\n  { name: \"defaultWidthX\", op: 20, type: \"number\", value: 0 },\n  { name: \"nominalWidthX\", op: 21, type: \"number\", value: 0 }\n];\nfunction parseCFFTopDict(data, strings) {\n  var dict = parseCFFDict(data, 0, data.byteLength);\n  return interpretDict(dict, TOP_DICT_META, strings);\n}\nfunction parseCFFPrivateDict(data, start, size, strings) {\n  var dict = parseCFFDict(data, start, size);\n  return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\nfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n  var topDictArray = [];\n  for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {\n    var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n    var topDict = parseCFFTopDict(topDictData, strings);\n    topDict._subrs = [];\n    topDict._subrsBias = 0;\n    topDict._defaultWidthX = 0;\n    topDict._nominalWidthX = 0;\n    var privateSize = topDict.private[0];\n    var privateOffset = topDict.private[1];\n    if (privateSize !== 0 && privateOffset !== 0) {\n      var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n      topDict._defaultWidthX = privateDict.defaultWidthX;\n      topDict._nominalWidthX = privateDict.nominalWidthX;\n      if (privateDict.subrs !== 0) {\n        var subrOffset = privateOffset + privateDict.subrs;\n        var subrIndex = parseCFFIndex(data, subrOffset + start);\n        topDict._subrs = subrIndex.objects;\n        topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n      }\n      topDict._privateDict = privateDict;\n    }\n    topDictArray.push(topDict);\n  }\n  return topDictArray;\n}\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n  var sid;\n  var count;\n  var parser = new parse.Parser(data, start);\n  nGlyphs -= 1;\n  var charset = [\".notdef\"];\n  var format = parser.parseCard8();\n  if (format === 0) {\n    for (var i = 0; i < nGlyphs; i += 1) {\n      sid = parser.parseSID();\n      charset.push(getCFFString(strings, sid));\n    }\n  } else if (format === 1) {\n    while (charset.length <= nGlyphs) {\n      sid = parser.parseSID();\n      count = parser.parseCard8();\n      for (var i$1 = 0; i$1 <= count; i$1 += 1) {\n        charset.push(getCFFString(strings, sid));\n        sid += 1;\n      }\n    }\n  } else if (format === 2) {\n    while (charset.length <= nGlyphs) {\n      sid = parser.parseSID();\n      count = parser.parseCard16();\n      for (var i$2 = 0; i$2 <= count; i$2 += 1) {\n        charset.push(getCFFString(strings, sid));\n        sid += 1;\n      }\n    }\n  } else {\n    throw new Error(\"Unknown charset format \" + format);\n  }\n  return charset;\n}\nfunction parseCFFEncoding(data, start, charset) {\n  var code;\n  var enc = {};\n  var parser = new parse.Parser(data, start);\n  var format = parser.parseCard8();\n  if (format === 0) {\n    var nCodes = parser.parseCard8();\n    for (var i = 0; i < nCodes; i += 1) {\n      code = parser.parseCard8();\n      enc[code] = i;\n    }\n  } else if (format === 1) {\n    var nRanges = parser.parseCard8();\n    code = 1;\n    for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {\n      var first = parser.parseCard8();\n      var nLeft = parser.parseCard8();\n      for (var j = first; j <= first + nLeft; j += 1) {\n        enc[j] = code;\n        code += 1;\n      }\n    }\n  } else {\n    throw new Error(\"Unknown encoding format \" + format);\n  }\n  return new CffEncoding(enc, charset);\n}\nfunction parseCFFCharstring(font, glyph, code) {\n  var c1x;\n  var c1y;\n  var c2x;\n  var c2y;\n  var p = new Path();\n  var stack = [];\n  var nStems = 0;\n  var haveWidth = false;\n  var open = false;\n  var x = 0;\n  var y = 0;\n  var subrs;\n  var subrsBias;\n  var defaultWidthX;\n  var nominalWidthX;\n  if (font.isCIDFont) {\n    var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n    var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n    subrs = fdDict._subrs;\n    subrsBias = fdDict._subrsBias;\n    defaultWidthX = fdDict._defaultWidthX;\n    nominalWidthX = fdDict._nominalWidthX;\n  } else {\n    subrs = font.tables.cff.topDict._subrs;\n    subrsBias = font.tables.cff.topDict._subrsBias;\n    defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n    nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n  }\n  var width = defaultWidthX;\n  function newContour(x2, y2) {\n    if (open) {\n      p.closePath();\n    }\n    p.moveTo(x2, y2);\n    open = true;\n  }\n  function parseStems() {\n    var hasWidthArg;\n    hasWidthArg = stack.length % 2 !== 0;\n    if (hasWidthArg && !haveWidth) {\n      width = stack.shift() + nominalWidthX;\n    }\n    nStems += stack.length >> 1;\n    stack.length = 0;\n    haveWidth = true;\n  }\n  function parse2(code2) {\n    var b1;\n    var b2;\n    var b3;\n    var b4;\n    var codeIndex;\n    var subrCode;\n    var jpx;\n    var jpy;\n    var c3x;\n    var c3y;\n    var c4x;\n    var c4y;\n    var i = 0;\n    while (i < code2.length) {\n      var v = code2[i];\n      i += 1;\n      switch (v) {\n        case 1:\n          parseStems();\n          break;\n        case 3:\n          parseStems();\n          break;\n        case 4:\n          if (stack.length > 1 && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n            haveWidth = true;\n          }\n          y += stack.pop();\n          newContour(x, y);\n          break;\n        case 5:\n          while (stack.length > 0) {\n            x += stack.shift();\n            y += stack.shift();\n            p.lineTo(x, y);\n          }\n          break;\n        case 6:\n          while (stack.length > 0) {\n            x += stack.shift();\n            p.lineTo(x, y);\n            if (stack.length === 0) {\n              break;\n            }\n            y += stack.shift();\n            p.lineTo(x, y);\n          }\n          break;\n        case 7:\n          while (stack.length > 0) {\n            y += stack.shift();\n            p.lineTo(x, y);\n            if (stack.length === 0) {\n              break;\n            }\n            x += stack.shift();\n            p.lineTo(x, y);\n          }\n          break;\n        case 8:\n          while (stack.length > 0) {\n            c1x = x + stack.shift();\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y + stack.shift();\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n          }\n          break;\n        case 10:\n          codeIndex = stack.pop() + subrsBias;\n          subrCode = subrs[codeIndex];\n          if (subrCode) {\n            parse2(subrCode);\n          }\n          break;\n        case 11:\n          return;\n        case 12:\n          v = code2[i];\n          i += 1;\n          switch (v) {\n            case 35:\n              c1x = x + stack.shift();\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              jpx = c2x + stack.shift();\n              jpy = c2y + stack.shift();\n              c3x = jpx + stack.shift();\n              c3y = jpy + stack.shift();\n              c4x = c3x + stack.shift();\n              c4y = c3y + stack.shift();\n              x = c4x + stack.shift();\n              y = c4y + stack.shift();\n              stack.shift();\n              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n              p.curveTo(c3x, c3y, c4x, c4y, x, y);\n              break;\n            case 34:\n              c1x = x + stack.shift();\n              c1y = y;\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              jpx = c2x + stack.shift();\n              jpy = c2y;\n              c3x = jpx + stack.shift();\n              c3y = c2y;\n              c4x = c3x + stack.shift();\n              c4y = y;\n              x = c4x + stack.shift();\n              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n              p.curveTo(c3x, c3y, c4x, c4y, x, y);\n              break;\n            case 36:\n              c1x = x + stack.shift();\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              jpx = c2x + stack.shift();\n              jpy = c2y;\n              c3x = jpx + stack.shift();\n              c3y = c2y;\n              c4x = c3x + stack.shift();\n              c4y = c3y + stack.shift();\n              x = c4x + stack.shift();\n              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n              p.curveTo(c3x, c3y, c4x, c4y, x, y);\n              break;\n            case 37:\n              c1x = x + stack.shift();\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              jpx = c2x + stack.shift();\n              jpy = c2y + stack.shift();\n              c3x = jpx + stack.shift();\n              c3y = jpy + stack.shift();\n              c4x = c3x + stack.shift();\n              c4y = c3y + stack.shift();\n              if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                x = c4x + stack.shift();\n              } else {\n                y = c4y + stack.shift();\n              }\n              p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n              p.curveTo(c3x, c3y, c4x, c4y, x, y);\n              break;\n            default:\n              console.log(\"Glyph \" + glyph.index + \": unknown operator \" + 1200 + v);\n              stack.length = 0;\n          }\n          break;\n        case 14:\n          if (stack.length > 0 && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n            haveWidth = true;\n          }\n          if (open) {\n            p.closePath();\n            open = false;\n          }\n          break;\n        case 18:\n          parseStems();\n          break;\n        case 19:\n        case 20:\n          parseStems();\n          i += nStems + 7 >> 3;\n          break;\n        case 21:\n          if (stack.length > 2 && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n            haveWidth = true;\n          }\n          y += stack.pop();\n          x += stack.pop();\n          newContour(x, y);\n          break;\n        case 22:\n          if (stack.length > 1 && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n            haveWidth = true;\n          }\n          x += stack.pop();\n          newContour(x, y);\n          break;\n        case 23:\n          parseStems();\n          break;\n        case 24:\n          while (stack.length > 2) {\n            c1x = x + stack.shift();\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y + stack.shift();\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n          }\n          x += stack.shift();\n          y += stack.shift();\n          p.lineTo(x, y);\n          break;\n        case 25:\n          while (stack.length > 6) {\n            x += stack.shift();\n            y += stack.shift();\n            p.lineTo(x, y);\n          }\n          c1x = x + stack.shift();\n          c1y = y + stack.shift();\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x + stack.shift();\n          y = c2y + stack.shift();\n          p.curveTo(c1x, c1y, c2x, c2y, x, y);\n          break;\n        case 26:\n          if (stack.length % 2) {\n            x += stack.shift();\n          }\n          while (stack.length > 0) {\n            c1x = x;\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x;\n            y = c2y + stack.shift();\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n          }\n          break;\n        case 27:\n          if (stack.length % 2) {\n            y += stack.shift();\n          }\n          while (stack.length > 0) {\n            c1x = x + stack.shift();\n            c1y = y;\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y;\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n          }\n          break;\n        case 28:\n          b1 = code2[i];\n          b2 = code2[i + 1];\n          stack.push((b1 << 24 | b2 << 16) >> 16);\n          i += 2;\n          break;\n        case 29:\n          codeIndex = stack.pop() + font.gsubrsBias;\n          subrCode = font.gsubrs[codeIndex];\n          if (subrCode) {\n            parse2(subrCode);\n          }\n          break;\n        case 30:\n          while (stack.length > 0) {\n            c1x = x;\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y + (stack.length === 1 ? stack.shift() : 0);\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n            if (stack.length === 0) {\n              break;\n            }\n            c1x = x + stack.shift();\n            c1y = y;\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            y = c2y + stack.shift();\n            x = c2x + (stack.length === 1 ? stack.shift() : 0);\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n          }\n          break;\n        case 31:\n          while (stack.length > 0) {\n            c1x = x + stack.shift();\n            c1y = y;\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            y = c2y + stack.shift();\n            x = c2x + (stack.length === 1 ? stack.shift() : 0);\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n            if (stack.length === 0) {\n              break;\n            }\n            c1x = x;\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y + (stack.length === 1 ? stack.shift() : 0);\n            p.curveTo(c1x, c1y, c2x, c2y, x, y);\n          }\n          break;\n        default:\n          if (v < 32) {\n            console.log(\"Glyph \" + glyph.index + \": unknown operator \" + v);\n          } else if (v < 247) {\n            stack.push(v - 139);\n          } else if (v < 251) {\n            b1 = code2[i];\n            i += 1;\n            stack.push((v - 247) * 256 + b1 + 108);\n          } else if (v < 255) {\n            b1 = code2[i];\n            i += 1;\n            stack.push(-(v - 251) * 256 - b1 - 108);\n          } else {\n            b1 = code2[i];\n            b2 = code2[i + 1];\n            b3 = code2[i + 2];\n            b4 = code2[i + 3];\n            i += 4;\n            stack.push((b1 << 24 | b2 << 16 | b3 << 8 | b4) / 65536);\n          }\n      }\n    }\n  }\n  parse2(code);\n  glyph.advanceWidth = width;\n  return p;\n}\nfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n  var fdSelect = [];\n  var fdIndex;\n  var parser = new parse.Parser(data, start);\n  var format = parser.parseCard8();\n  if (format === 0) {\n    for (var iGid = 0; iGid < nGlyphs; iGid++) {\n      fdIndex = parser.parseCard8();\n      if (fdIndex >= fdArrayCount) {\n        throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + fdIndex + \" (FD count \" + fdArrayCount + \")\");\n      }\n      fdSelect.push(fdIndex);\n    }\n  } else if (format === 3) {\n    var nRanges = parser.parseCard16();\n    var first = parser.parseCard16();\n    if (first !== 0) {\n      throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad initial GID \" + first);\n    }\n    var next;\n    for (var iRange = 0; iRange < nRanges; iRange++) {\n      fdIndex = parser.parseCard8();\n      next = parser.parseCard16();\n      if (fdIndex >= fdArrayCount) {\n        throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + fdIndex + \" (FD count \" + fdArrayCount + \")\");\n      }\n      if (next > nGlyphs) {\n        throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad GID \" + next);\n      }\n      for (; first < next; first++) {\n        fdSelect.push(fdIndex);\n      }\n      first = next;\n    }\n    if (next !== nGlyphs) {\n      throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad final GID \" + next);\n    }\n  } else {\n    throw new Error(\"CFF Table CID Font FDSelect table has unsupported format \" + format);\n  }\n  return fdSelect;\n}\nfunction parseCFFTable(data, start, font, opt) {\n  font.tables.cff = {};\n  var header = parseCFFHeader(data, start);\n  var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n  var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n  var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n  var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n  font.gsubrs = globalSubrIndex.objects;\n  font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n  var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n  if (topDictArray.length !== 1) {\n    throw new Error(\"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" + topDictArray.length);\n  }\n  var topDict = topDictArray[0];\n  font.tables.cff.topDict = topDict;\n  if (topDict._privateDict) {\n    font.defaultWidthX = topDict._privateDict.defaultWidthX;\n    font.nominalWidthX = topDict._privateDict.nominalWidthX;\n  }\n  if (topDict.ros[0] !== void 0 && topDict.ros[1] !== void 0) {\n    font.isCIDFont = true;\n  }\n  if (font.isCIDFont) {\n    var fdArrayOffset = topDict.fdArray;\n    var fdSelectOffset = topDict.fdSelect;\n    if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n      throw new Error(\"Font is marked as a CID font, but FDArray and/or FDSelect information is missing\");\n    }\n    fdArrayOffset += start;\n    var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n    var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n    topDict._fdArray = fdArray;\n    fdSelectOffset += start;\n    topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n  }\n  var privateDictOffset = start + topDict.private[1];\n  var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n  font.defaultWidthX = privateDict.defaultWidthX;\n  font.nominalWidthX = privateDict.nominalWidthX;\n  if (privateDict.subrs !== 0) {\n    var subrOffset = privateDictOffset + privateDict.subrs;\n    var subrIndex = parseCFFIndex(data, subrOffset);\n    font.subrs = subrIndex.objects;\n    font.subrsBias = calcCFFSubroutineBias(font.subrs);\n  } else {\n    font.subrs = [];\n    font.subrsBias = 0;\n  }\n  var charStringsIndex;\n  if (opt.lowMemory) {\n    charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);\n    font.nGlyphs = charStringsIndex.offsets.length;\n  } else {\n    charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n    font.nGlyphs = charStringsIndex.objects.length;\n  }\n  var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n  if (topDict.encoding === 0) {\n    font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n  } else if (topDict.encoding === 1) {\n    font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n  } else {\n    font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n  }\n  font.encoding = font.encoding || font.cffEncoding;\n  font.glyphs = new glyphset.GlyphSet(font);\n  if (opt.lowMemory) {\n    font._push = function(i2) {\n      var charString2 = getCffIndexObject(i2, charStringsIndex.offsets, data, start + topDict.charStrings);\n      font.glyphs.push(i2, glyphset.cffGlyphLoader(font, i2, parseCFFCharstring, charString2));\n    };\n  } else {\n    for (var i = 0; i < font.nGlyphs; i += 1) {\n      var charString = charStringsIndex.objects[i];\n      font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n    }\n  }\n}\nvar cff = { parse: parseCFFTable };\nfunction parseFvarAxis(data, start, names) {\n  var axis = {};\n  var p = new parse.Parser(data, start);\n  axis.tag = p.parseTag();\n  axis.minValue = p.parseFixed();\n  axis.defaultValue = p.parseFixed();\n  axis.maxValue = p.parseFixed();\n  p.skip(\"uShort\", 1);\n  axis.name = names[p.parseUShort()] || {};\n  return axis;\n}\nfunction parseFvarInstance(data, start, axes, names) {\n  var inst = {};\n  var p = new parse.Parser(data, start);\n  inst.name = names[p.parseUShort()] || {};\n  p.skip(\"uShort\", 1);\n  inst.coordinates = {};\n  for (var i = 0; i < axes.length; ++i) {\n    inst.coordinates[axes[i].tag] = p.parseFixed();\n  }\n  return inst;\n}\nfunction parseFvarTable(data, start, names) {\n  var p = new parse.Parser(data, start);\n  var tableVersion = p.parseULong();\n  check.argument(tableVersion === 65536, \"Unsupported fvar table version.\");\n  var offsetToData = p.parseOffset16();\n  p.skip(\"uShort\", 1);\n  var axisCount = p.parseUShort();\n  var axisSize = p.parseUShort();\n  var instanceCount = p.parseUShort();\n  var instanceSize = p.parseUShort();\n  var axes = [];\n  for (var i = 0; i < axisCount; i++) {\n    axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n  }\n  var instances = [];\n  var instanceStart = start + offsetToData + axisCount * axisSize;\n  for (var j = 0; j < instanceCount; j++) {\n    instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));\n  }\n  return { axes, instances };\n}\nvar fvar = { parse: parseFvarTable };\nvar attachList = function() {\n  return {\n    coverage: this.parsePointer(Parser.coverage),\n    attachPoints: this.parseList(Parser.pointer(Parser.uShortList))\n  };\n};\nvar caretValue = function() {\n  var format = this.parseUShort();\n  check.argument(format === 1 || format === 2 || format === 3, \"Unsupported CaretValue table version.\");\n  if (format === 1) {\n    return { coordinate: this.parseShort() };\n  } else if (format === 2) {\n    return { pointindex: this.parseShort() };\n  } else if (format === 3) {\n    return { coordinate: this.parseShort() };\n  }\n};\nvar ligGlyph = function() {\n  return this.parseList(Parser.pointer(caretValue));\n};\nvar ligCaretList = function() {\n  return {\n    coverage: this.parsePointer(Parser.coverage),\n    ligGlyphs: this.parseList(Parser.pointer(ligGlyph))\n  };\n};\nvar markGlyphSets = function() {\n  this.parseUShort();\n  return this.parseList(Parser.pointer(Parser.coverage));\n};\nfunction parseGDEFTable(data, start) {\n  start = start || 0;\n  var p = new Parser(data, start);\n  var tableVersion = p.parseVersion(1);\n  check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3, \"Unsupported GDEF table version.\");\n  var gdef2 = {\n    version: tableVersion,\n    classDef: p.parsePointer(Parser.classDef),\n    attachList: p.parsePointer(attachList),\n    ligCaretList: p.parsePointer(ligCaretList),\n    markAttachClassDef: p.parsePointer(Parser.classDef)\n  };\n  if (tableVersion >= 1.2) {\n    gdef2.markGlyphSets = p.parsePointer(markGlyphSets);\n  }\n  return gdef2;\n}\nvar gdef = { parse: parseGDEFTable };\nvar subtableParsers = new Array(10);\nsubtableParsers[1] = function parseLookup1() {\n  var start = this.offset + this.relativeOffset;\n  var posformat = this.parseUShort();\n  if (posformat === 1) {\n    return {\n      posFormat: 1,\n      coverage: this.parsePointer(Parser.coverage),\n      value: this.parseValueRecord()\n    };\n  } else if (posformat === 2) {\n    return {\n      posFormat: 2,\n      coverage: this.parsePointer(Parser.coverage),\n      values: this.parseValueRecordList()\n    };\n  }\n  check.assert(false, \"0x\" + start.toString(16) + \": GPOS lookup type 1 format must be 1 or 2.\");\n};\nsubtableParsers[2] = function parseLookup2() {\n  var start = this.offset + this.relativeOffset;\n  var posFormat = this.parseUShort();\n  check.assert(posFormat === 1 || posFormat === 2, \"0x\" + start.toString(16) + \": GPOS lookup type 2 format must be 1 or 2.\");\n  var coverage = this.parsePointer(Parser.coverage);\n  var valueFormat1 = this.parseUShort();\n  var valueFormat2 = this.parseUShort();\n  if (posFormat === 1) {\n    return {\n      posFormat,\n      coverage,\n      valueFormat1,\n      valueFormat2,\n      pairSets: this.parseList(Parser.pointer(Parser.list(function() {\n        return {\n          secondGlyph: this.parseUShort(),\n          value1: this.parseValueRecord(valueFormat1),\n          value2: this.parseValueRecord(valueFormat2)\n        };\n      })))\n    };\n  } else if (posFormat === 2) {\n    var classDef1 = this.parsePointer(Parser.classDef);\n    var classDef2 = this.parsePointer(Parser.classDef);\n    var class1Count = this.parseUShort();\n    var class2Count = this.parseUShort();\n    return {\n      posFormat,\n      coverage,\n      valueFormat1,\n      valueFormat2,\n      classDef1,\n      classDef2,\n      class1Count,\n      class2Count,\n      classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {\n        return {\n          value1: this.parseValueRecord(valueFormat1),\n          value2: this.parseValueRecord(valueFormat2)\n        };\n      }))\n    };\n  }\n};\nsubtableParsers[3] = function parseLookup3() {\n  return { error: \"GPOS Lookup 3 not supported\" };\n};\nsubtableParsers[4] = function parseLookup4() {\n  return { error: \"GPOS Lookup 4 not supported\" };\n};\nsubtableParsers[5] = function parseLookup5() {\n  return { error: \"GPOS Lookup 5 not supported\" };\n};\nsubtableParsers[6] = function parseLookup6() {\n  return { error: \"GPOS Lookup 6 not supported\" };\n};\nsubtableParsers[7] = function parseLookup7() {\n  return { error: \"GPOS Lookup 7 not supported\" };\n};\nsubtableParsers[8] = function parseLookup8() {\n  return { error: \"GPOS Lookup 8 not supported\" };\n};\nsubtableParsers[9] = function parseLookup9() {\n  return { error: \"GPOS Lookup 9 not supported\" };\n};\nfunction parseGposTable(data, start) {\n  start = start || 0;\n  var p = new Parser(data, start);\n  var tableVersion = p.parseVersion(1);\n  check.argument(tableVersion === 1 || tableVersion === 1.1, \"Unsupported GPOS table version \" + tableVersion);\n  if (tableVersion === 1) {\n    return {\n      version: tableVersion,\n      scripts: p.parseScriptList(),\n      features: p.parseFeatureList(),\n      lookups: p.parseLookupList(subtableParsers)\n    };\n  } else {\n    return {\n      version: tableVersion,\n      scripts: p.parseScriptList(),\n      features: p.parseFeatureList(),\n      lookups: p.parseLookupList(subtableParsers),\n      variations: p.parseFeatureVariationsList()\n    };\n  }\n}\nvar gpos = { parse: parseGposTable };\nvar subtableParsers$1 = new Array(9);\nsubtableParsers$1[1] = function parseLookup12() {\n  var start = this.offset + this.relativeOffset;\n  var substFormat = this.parseUShort();\n  if (substFormat === 1) {\n    return {\n      substFormat: 1,\n      coverage: this.parsePointer(Parser.coverage),\n      deltaGlyphId: this.parseUShort()\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: 2,\n      coverage: this.parsePointer(Parser.coverage),\n      substitute: this.parseOffset16List()\n    };\n  }\n  check.assert(false, \"0x\" + start.toString(16) + \": lookup type 1 format must be 1 or 2.\");\n};\nsubtableParsers$1[2] = function parseLookup22() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, \"GSUB Multiple Substitution Subtable identifier-format must be 1\");\n  return {\n    substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    sequences: this.parseListOfLists()\n  };\n};\nsubtableParsers$1[3] = function parseLookup32() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, \"GSUB Alternate Substitution Subtable identifier-format must be 1\");\n  return {\n    substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    alternateSets: this.parseListOfLists()\n  };\n};\nsubtableParsers$1[4] = function parseLookup42() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, \"GSUB ligature table identifier-format must be 1\");\n  return {\n    substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    ligatureSets: this.parseListOfLists(function() {\n      return {\n        ligGlyph: this.parseUShort(),\n        components: this.parseUShortList(this.parseUShort() - 1)\n      };\n    })\n  };\n};\nvar lookupRecordDesc = {\n  sequenceIndex: Parser.uShort,\n  lookupListIndex: Parser.uShort\n};\nsubtableParsers$1[5] = function parseLookup52() {\n  var start = this.offset + this.relativeOffset;\n  var substFormat = this.parseUShort();\n  if (substFormat === 1) {\n    return {\n      substFormat,\n      coverage: this.parsePointer(Parser.coverage),\n      ruleSets: this.parseListOfLists(function() {\n        var glyphCount2 = this.parseUShort();\n        var substCount2 = this.parseUShort();\n        return {\n          input: this.parseUShortList(glyphCount2 - 1),\n          lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat,\n      coverage: this.parsePointer(Parser.coverage),\n      classDef: this.parsePointer(Parser.classDef),\n      classSets: this.parseListOfLists(function() {\n        var glyphCount2 = this.parseUShort();\n        var substCount2 = this.parseUShort();\n        return {\n          classes: this.parseUShortList(glyphCount2 - 1),\n          lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 3) {\n    var glyphCount = this.parseUShort();\n    var substCount = this.parseUShort();\n    return {\n      substFormat,\n      coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n      lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n    };\n  }\n  check.assert(false, \"0x\" + start.toString(16) + \": lookup type 5 format must be 1, 2 or 3.\");\n};\nsubtableParsers$1[6] = function parseLookup62() {\n  var start = this.offset + this.relativeOffset;\n  var substFormat = this.parseUShort();\n  if (substFormat === 1) {\n    return {\n      substFormat: 1,\n      coverage: this.parsePointer(Parser.coverage),\n      chainRuleSets: this.parseListOfLists(function() {\n        return {\n          backtrack: this.parseUShortList(),\n          input: this.parseUShortList(this.parseShort() - 1),\n          lookahead: this.parseUShortList(),\n          lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 2) {\n    return {\n      substFormat: 2,\n      coverage: this.parsePointer(Parser.coverage),\n      backtrackClassDef: this.parsePointer(Parser.classDef),\n      inputClassDef: this.parsePointer(Parser.classDef),\n      lookaheadClassDef: this.parsePointer(Parser.classDef),\n      chainClassSet: this.parseListOfLists(function() {\n        return {\n          backtrack: this.parseUShortList(),\n          input: this.parseUShortList(this.parseShort() - 1),\n          lookahead: this.parseUShortList(),\n          lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n      })\n    };\n  } else if (substFormat === 3) {\n    return {\n      substFormat: 3,\n      backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n      lookupRecords: this.parseRecordList(lookupRecordDesc)\n    };\n  }\n  check.assert(false, \"0x\" + start.toString(16) + \": lookup type 6 format must be 1, 2 or 3.\");\n};\nsubtableParsers$1[7] = function parseLookup72() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, \"GSUB Extension Substitution subtable identifier-format must be 1\");\n  var extensionLookupType = this.parseUShort();\n  var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n  return {\n    substFormat: 1,\n    lookupType: extensionLookupType,\n    extension: subtableParsers$1[extensionLookupType].call(extensionParser)\n  };\n};\nsubtableParsers$1[8] = function parseLookup82() {\n  var substFormat = this.parseUShort();\n  check.argument(substFormat === 1, \"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1\");\n  return {\n    substFormat,\n    coverage: this.parsePointer(Parser.coverage),\n    backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n    lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n    substitutes: this.parseUShortList()\n  };\n};\nfunction parseGsubTable(data, start) {\n  start = start || 0;\n  var p = new Parser(data, start);\n  var tableVersion = p.parseVersion(1);\n  check.argument(tableVersion === 1 || tableVersion === 1.1, \"Unsupported GSUB table version.\");\n  if (tableVersion === 1) {\n    return {\n      version: tableVersion,\n      scripts: p.parseScriptList(),\n      features: p.parseFeatureList(),\n      lookups: p.parseLookupList(subtableParsers$1)\n    };\n  } else {\n    return {\n      version: tableVersion,\n      scripts: p.parseScriptList(),\n      features: p.parseFeatureList(),\n      lookups: p.parseLookupList(subtableParsers$1),\n      variations: p.parseFeatureVariationsList()\n    };\n  }\n}\nvar gsub = { parse: parseGsubTable };\nfunction parseHeadTable(data, start) {\n  var head2 = {};\n  var p = new parse.Parser(data, start);\n  head2.version = p.parseVersion();\n  head2.fontRevision = Math.round(p.parseFixed() * 1e3) / 1e3;\n  head2.checkSumAdjustment = p.parseULong();\n  head2.magicNumber = p.parseULong();\n  check.argument(head2.magicNumber === 1594834165, \"Font header has wrong magic number.\");\n  head2.flags = p.parseUShort();\n  head2.unitsPerEm = p.parseUShort();\n  head2.created = p.parseLongDateTime();\n  head2.modified = p.parseLongDateTime();\n  head2.xMin = p.parseShort();\n  head2.yMin = p.parseShort();\n  head2.xMax = p.parseShort();\n  head2.yMax = p.parseShort();\n  head2.macStyle = p.parseUShort();\n  head2.lowestRecPPEM = p.parseUShort();\n  head2.fontDirectionHint = p.parseShort();\n  head2.indexToLocFormat = p.parseShort();\n  head2.glyphDataFormat = p.parseShort();\n  return head2;\n}\nvar head = { parse: parseHeadTable };\nfunction parseHheaTable(data, start) {\n  var hhea2 = {};\n  var p = new parse.Parser(data, start);\n  hhea2.version = p.parseVersion();\n  hhea2.ascender = p.parseShort();\n  hhea2.descender = p.parseShort();\n  hhea2.lineGap = p.parseShort();\n  hhea2.advanceWidthMax = p.parseUShort();\n  hhea2.minLeftSideBearing = p.parseShort();\n  hhea2.minRightSideBearing = p.parseShort();\n  hhea2.xMaxExtent = p.parseShort();\n  hhea2.caretSlopeRise = p.parseShort();\n  hhea2.caretSlopeRun = p.parseShort();\n  hhea2.caretOffset = p.parseShort();\n  p.relativeOffset += 8;\n  hhea2.metricDataFormat = p.parseShort();\n  hhea2.numberOfHMetrics = p.parseUShort();\n  return hhea2;\n}\nvar hhea = { parse: parseHheaTable };\nfunction parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {\n  var advanceWidth;\n  var leftSideBearing;\n  var p = new parse.Parser(data, start);\n  for (var i = 0; i < numGlyphs; i += 1) {\n    if (i < numMetrics) {\n      advanceWidth = p.parseUShort();\n      leftSideBearing = p.parseShort();\n    }\n    var glyph = glyphs.get(i);\n    glyph.advanceWidth = advanceWidth;\n    glyph.leftSideBearing = leftSideBearing;\n  }\n}\nfunction parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {\n  font._hmtxTableData = {};\n  var advanceWidth;\n  var leftSideBearing;\n  var p = new parse.Parser(data, start);\n  for (var i = 0; i < numGlyphs; i += 1) {\n    if (i < numMetrics) {\n      advanceWidth = p.parseUShort();\n      leftSideBearing = p.parseShort();\n    }\n    font._hmtxTableData[i] = {\n      advanceWidth,\n      leftSideBearing\n    };\n  }\n}\nfunction parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {\n  if (opt.lowMemory) {\n    parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs);\n  } else {\n    parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs);\n  }\n}\nvar hmtx = { parse: parseHmtxTable };\nfunction parseWindowsKernTable(p) {\n  var pairs = {};\n  p.skip(\"uShort\");\n  var subtableVersion = p.parseUShort();\n  check.argument(subtableVersion === 0, \"Unsupported kern sub-table version.\");\n  p.skip(\"uShort\", 2);\n  var nPairs = p.parseUShort();\n  p.skip(\"uShort\", 3);\n  for (var i = 0; i < nPairs; i += 1) {\n    var leftIndex = p.parseUShort();\n    var rightIndex = p.parseUShort();\n    var value = p.parseShort();\n    pairs[leftIndex + \",\" + rightIndex] = value;\n  }\n  return pairs;\n}\nfunction parseMacKernTable(p) {\n  var pairs = {};\n  p.skip(\"uShort\");\n  var nTables = p.parseULong();\n  if (nTables > 1) {\n    console.warn(\"Only the first kern subtable is supported.\");\n  }\n  p.skip(\"uLong\");\n  var coverage = p.parseUShort();\n  var subtableVersion = coverage & 255;\n  p.skip(\"uShort\");\n  if (subtableVersion === 0) {\n    var nPairs = p.parseUShort();\n    p.skip(\"uShort\", 3);\n    for (var i = 0; i < nPairs; i += 1) {\n      var leftIndex = p.parseUShort();\n      var rightIndex = p.parseUShort();\n      var value = p.parseShort();\n      pairs[leftIndex + \",\" + rightIndex] = value;\n    }\n  }\n  return pairs;\n}\nfunction parseKernTable(data, start) {\n  var p = new parse.Parser(data, start);\n  var tableVersion = p.parseUShort();\n  if (tableVersion === 0) {\n    return parseWindowsKernTable(p);\n  } else if (tableVersion === 1) {\n    return parseMacKernTable(p);\n  } else {\n    throw new Error(\"Unsupported kern table version (\" + tableVersion + \").\");\n  }\n}\nvar kern = { parse: parseKernTable };\nfunction parseLtagTable(data, start) {\n  var p = new parse.Parser(data, start);\n  var tableVersion = p.parseULong();\n  check.argument(tableVersion === 1, \"Unsupported ltag table version.\");\n  p.skip(\"uLong\", 1);\n  var numTags = p.parseULong();\n  var tags = [];\n  for (var i = 0; i < numTags; i++) {\n    var tag = \"\";\n    var offset = start + p.parseUShort();\n    var length = p.parseUShort();\n    for (var j = offset; j < offset + length; ++j) {\n      tag += String.fromCharCode(data.getInt8(j));\n    }\n    tags.push(tag);\n  }\n  return tags;\n}\nvar ltag = { parse: parseLtagTable };\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n  var p = new parse.Parser(data, start);\n  var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n  var glyphOffsets = [];\n  for (var i = 0; i < numGlyphs + 1; i += 1) {\n    var glyphOffset = parseFn.call(p);\n    if (shortVersion) {\n      glyphOffset *= 2;\n    }\n    glyphOffsets.push(glyphOffset);\n  }\n  return glyphOffsets;\n}\nvar loca = { parse: parseLocaTable };\nfunction parseMaxpTable(data, start) {\n  var maxp2 = {};\n  var p = new parse.Parser(data, start);\n  maxp2.version = p.parseVersion();\n  maxp2.numGlyphs = p.parseUShort();\n  if (maxp2.version === 1) {\n    maxp2.maxPoints = p.parseUShort();\n    maxp2.maxContours = p.parseUShort();\n    maxp2.maxCompositePoints = p.parseUShort();\n    maxp2.maxCompositeContours = p.parseUShort();\n    maxp2.maxZones = p.parseUShort();\n    maxp2.maxTwilightPoints = p.parseUShort();\n    maxp2.maxStorage = p.parseUShort();\n    maxp2.maxFunctionDefs = p.parseUShort();\n    maxp2.maxInstructionDefs = p.parseUShort();\n    maxp2.maxStackElements = p.parseUShort();\n    maxp2.maxSizeOfInstructions = p.parseUShort();\n    maxp2.maxComponentElements = p.parseUShort();\n    maxp2.maxComponentDepth = p.parseUShort();\n  }\n  return maxp2;\n}\nvar maxp = { parse: parseMaxpTable };\nfunction parseOS2Table(data, start) {\n  var os22 = {};\n  var p = new parse.Parser(data, start);\n  os22.version = p.parseUShort();\n  os22.xAvgCharWidth = p.parseShort();\n  os22.usWeightClass = p.parseUShort();\n  os22.usWidthClass = p.parseUShort();\n  os22.fsType = p.parseUShort();\n  os22.ySubscriptXSize = p.parseShort();\n  os22.ySubscriptYSize = p.parseShort();\n  os22.ySubscriptXOffset = p.parseShort();\n  os22.ySubscriptYOffset = p.parseShort();\n  os22.ySuperscriptXSize = p.parseShort();\n  os22.ySuperscriptYSize = p.parseShort();\n  os22.ySuperscriptXOffset = p.parseShort();\n  os22.ySuperscriptYOffset = p.parseShort();\n  os22.yStrikeoutSize = p.parseShort();\n  os22.yStrikeoutPosition = p.parseShort();\n  os22.sFamilyClass = p.parseShort();\n  os22.panose = [];\n  for (var i = 0; i < 10; i++) {\n    os22.panose[i] = p.parseByte();\n  }\n  os22.ulUnicodeRange1 = p.parseULong();\n  os22.ulUnicodeRange2 = p.parseULong();\n  os22.ulUnicodeRange3 = p.parseULong();\n  os22.ulUnicodeRange4 = p.parseULong();\n  os22.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n  os22.fsSelection = p.parseUShort();\n  os22.usFirstCharIndex = p.parseUShort();\n  os22.usLastCharIndex = p.parseUShort();\n  os22.sTypoAscender = p.parseShort();\n  os22.sTypoDescender = p.parseShort();\n  os22.sTypoLineGap = p.parseShort();\n  os22.usWinAscent = p.parseUShort();\n  os22.usWinDescent = p.parseUShort();\n  if (os22.version >= 1) {\n    os22.ulCodePageRange1 = p.parseULong();\n    os22.ulCodePageRange2 = p.parseULong();\n  }\n  if (os22.version >= 2) {\n    os22.sxHeight = p.parseShort();\n    os22.sCapHeight = p.parseShort();\n    os22.usDefaultChar = p.parseUShort();\n    os22.usBreakChar = p.parseUShort();\n    os22.usMaxContent = p.parseUShort();\n  }\n  return os22;\n}\nvar os2 = { parse: parseOS2Table };\nfunction parsePostTable(data, start) {\n  var post2 = {};\n  var p = new parse.Parser(data, start);\n  post2.version = p.parseVersion();\n  post2.italicAngle = p.parseFixed();\n  post2.underlinePosition = p.parseShort();\n  post2.underlineThickness = p.parseShort();\n  post2.isFixedPitch = p.parseULong();\n  post2.minMemType42 = p.parseULong();\n  post2.maxMemType42 = p.parseULong();\n  post2.minMemType1 = p.parseULong();\n  post2.maxMemType1 = p.parseULong();\n  post2.names = [];\n  switch (post2.version) {\n    case 1:\n      break;\n    case 2:\n      post2.numberOfGlyphs = p.parseUShort();\n      post2.glyphNameIndex = new Array(post2.numberOfGlyphs);\n      for (var i = 0; i < post2.numberOfGlyphs; i++) {\n        post2.glyphNameIndex[i] = p.parseUShort();\n      }\n      break;\n    case 2.5:\n      post2.numberOfGlyphs = p.parseUShort();\n      post2.offset = new Array(post2.numberOfGlyphs);\n      for (var i$1 = 0; i$1 < post2.numberOfGlyphs; i$1++) {\n        post2.offset[i$1] = p.parseChar();\n      }\n      break;\n  }\n  return post2;\n}\nvar post = { parse: parsePostTable };\nvar decode = {};\ndecode.UTF8 = function(data, offset, numBytes) {\n  var codePoints = [];\n  var numChars = numBytes;\n  for (var j = 0; j < numChars; j++, offset += 1) {\n    codePoints[j] = data.getUint8(offset);\n  }\n  return String.fromCharCode.apply(null, codePoints);\n};\ndecode.UTF16 = function(data, offset, numBytes) {\n  var codePoints = [];\n  var numChars = numBytes / 2;\n  for (var j = 0; j < numChars; j++, offset += 2) {\n    codePoints[j] = data.getUint16(offset);\n  }\n  return String.fromCharCode.apply(null, codePoints);\n};\nvar eightBitMacEncodings = {\n  \"x-mac-croatian\": \"\\xC4\\xC5\\xC7\\xC9\\xD1\\xD6\\xDC\\xE1\\xE0\\xE2\\xE4\\xE3\\xE5\\xE7\\xE9\\xE8\\xEA\\xEB\\xED\\xEC\\xEE\\xEF\\xF1\\xF3\\xF2\\xF4\\xF6\\xF5\\xFA\\xF9\\xFB\\xFC\\u2020\\xB0\\xA2\\xA3\\xA7\\u2022\\xB6\\xDF\\xAE\\u0160\\u2122\\xB4\\xA8\\u2260\\u017D\\xD8\\u221E\\xB1\\u2264\\u2265\\u2206\\xB5\\u2202\\u2211\\u220F\\u0161\\u222B\\xAA\\xBA\\u03A9\\u017E\\xF8\\xBF\\xA1\\xAC\\u221A\\u0192\\u2248\\u0106\\xAB\\u010C\\u2026\\xA0\\xC0\\xC3\\xD5\\u0152\\u0153\\u0110\\u2014\\u201C\\u201D\\u2018\\u2019\\xF7\\u25CA\\uF8FF\\xA9\\u2044\\u20AC\\u2039\\u203A\\xC6\\xBB\\u2013\\xB7\\u201A\\u201E\\u2030\\xC2\\u0107\\xC1\\u010D\\xC8\\xCD\\xCE\\xCF\\xCC\\xD3\\xD4\\u0111\\xD2\\xDA\\xDB\\xD9\\u0131\\u02C6\\u02DC\\xAF\\u03C0\\xCB\\u02DA\\xB8\\xCA\\xE6\\u02C7\",\n  \"x-mac-cyrillic\": \"\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041A\\u041B\\u041C\\u041D\\u041E\\u041F\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042A\\u042B\\u042C\\u042D\\u042E\\u042F\\u2020\\xB0\\u0490\\xA3\\xA7\\u2022\\xB6\\u0406\\xAE\\xA9\\u2122\\u0402\\u0452\\u2260\\u0403\\u0453\\u221E\\xB1\\u2264\\u2265\\u0456\\xB5\\u0491\\u0408\\u0404\\u0454\\u0407\\u0457\\u0409\\u0459\\u040A\\u045A\\u0458\\u0405\\xAC\\u221A\\u0192\\u2248\\u2206\\xAB\\xBB\\u2026\\xA0\\u040B\\u045B\\u040C\\u045C\\u0455\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xF7\\u201E\\u040E\\u045E\\u040F\\u045F\\u2116\\u0401\\u0451\\u044F\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043A\\u043B\\u043C\\u043D\\u043E\\u043F\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044A\\u044B\\u044C\\u044D\\u044E\",\n  \"x-mac-gaelic\": \"\\xC4\\xC5\\xC7\\xC9\\xD1\\xD6\\xDC\\xE1\\xE0\\xE2\\xE4\\xE3\\xE5\\xE7\\xE9\\xE8\\xEA\\xEB\\xED\\xEC\\xEE\\xEF\\xF1\\xF3\\xF2\\xF4\\xF6\\xF5\\xFA\\xF9\\xFB\\xFC\\u2020\\xB0\\xA2\\xA3\\xA7\\u2022\\xB6\\xDF\\xAE\\xA9\\u2122\\xB4\\xA8\\u2260\\xC6\\xD8\\u1E02\\xB1\\u2264\\u2265\\u1E03\\u010A\\u010B\\u1E0A\\u1E0B\\u1E1E\\u1E1F\\u0120\\u0121\\u1E40\\xE6\\xF8\\u1E41\\u1E56\\u1E57\\u027C\\u0192\\u017F\\u1E60\\xAB\\xBB\\u2026\\xA0\\xC0\\xC3\\xD5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1E61\\u1E9B\\xFF\\u0178\\u1E6A\\u20AC\\u2039\\u203A\\u0176\\u0177\\u1E6B\\xB7\\u1EF2\\u1EF3\\u204A\\xC2\\xCA\\xC1\\xCB\\xC8\\xCD\\xCE\\xCF\\xCC\\xD3\\xD4\\u2663\\xD2\\xDA\\xDB\\xD9\\u0131\\xDD\\xFD\\u0174\\u0175\\u1E84\\u1E85\\u1E80\\u1E81\\u1E82\\u1E83\",\n  \"x-mac-greek\": \"\\xC4\\xB9\\xB2\\xC9\\xB3\\xD6\\xDC\\u0385\\xE0\\xE2\\xE4\\u0384\\xA8\\xE7\\xE9\\xE8\\xEA\\xEB\\xA3\\u2122\\xEE\\xEF\\u2022\\xBD\\u2030\\xF4\\xF6\\xA6\\u20AC\\xF9\\xFB\\xFC\\u2020\\u0393\\u0394\\u0398\\u039B\\u039E\\u03A0\\xDF\\xAE\\xA9\\u03A3\\u03AA\\xA7\\u2260\\xB0\\xB7\\u0391\\xB1\\u2264\\u2265\\xA5\\u0392\\u0395\\u0396\\u0397\\u0399\\u039A\\u039C\\u03A6\\u03AB\\u03A8\\u03A9\\u03AC\\u039D\\xAC\\u039F\\u03A1\\u2248\\u03A4\\xAB\\xBB\\u2026\\xA0\\u03A5\\u03A7\\u0386\\u0388\\u0153\\u2013\\u2015\\u201C\\u201D\\u2018\\u2019\\xF7\\u0389\\u038A\\u038C\\u038E\\u03AD\\u03AE\\u03AF\\u03CC\\u038F\\u03CD\\u03B1\\u03B2\\u03C8\\u03B4\\u03B5\\u03C6\\u03B3\\u03B7\\u03B9\\u03BE\\u03BA\\u03BB\\u03BC\\u03BD\\u03BF\\u03C0\\u03CE\\u03C1\\u03C3\\u03C4\\u03B8\\u03C9\\u03C2\\u03C7\\u03C5\\u03B6\\u03CA\\u03CB\\u0390\\u03B0\\xAD\",\n  \"x-mac-icelandic\": \"\\xC4\\xC5\\xC7\\xC9\\xD1\\xD6\\xDC\\xE1\\xE0\\xE2\\xE4\\xE3\\xE5\\xE7\\xE9\\xE8\\xEA\\xEB\\xED\\xEC\\xEE\\xEF\\xF1\\xF3\\xF2\\xF4\\xF6\\xF5\\xFA\\xF9\\xFB\\xFC\\xDD\\xB0\\xA2\\xA3\\xA7\\u2022\\xB6\\xDF\\xAE\\xA9\\u2122\\xB4\\xA8\\u2260\\xC6\\xD8\\u221E\\xB1\\u2264\\u2265\\xA5\\xB5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xAA\\xBA\\u03A9\\xE6\\xF8\\xBF\\xA1\\xAC\\u221A\\u0192\\u2248\\u2206\\xAB\\xBB\\u2026\\xA0\\xC0\\xC3\\xD5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xF7\\u25CA\\xFF\\u0178\\u2044\\u20AC\\xD0\\xF0\\xDE\\xFE\\xFD\\xB7\\u201A\\u201E\\u2030\\xC2\\xCA\\xC1\\xCB\\xC8\\xCD\\xCE\\xCF\\xCC\\xD3\\xD4\\uF8FF\\xD2\\xDA\\xDB\\xD9\\u0131\\u02C6\\u02DC\\xAF\\u02D8\\u02D9\\u02DA\\xB8\\u02DD\\u02DB\\u02C7\",\n  \"x-mac-inuit\": \"\\u1403\\u1404\\u1405\\u1406\\u140A\\u140B\\u1431\\u1432\\u1433\\u1434\\u1438\\u1439\\u1449\\u144E\\u144F\\u1450\\u1451\\u1455\\u1456\\u1466\\u146D\\u146E\\u146F\\u1470\\u1472\\u1473\\u1483\\u148B\\u148C\\u148D\\u148E\\u1490\\u1491\\xB0\\u14A1\\u14A5\\u14A6\\u2022\\xB6\\u14A7\\xAE\\xA9\\u2122\\u14A8\\u14AA\\u14AB\\u14BB\\u14C2\\u14C3\\u14C4\\u14C5\\u14C7\\u14C8\\u14D0\\u14EF\\u14F0\\u14F1\\u14F2\\u14F4\\u14F5\\u1505\\u14D5\\u14D6\\u14D7\\u14D8\\u14DA\\u14DB\\u14EA\\u1528\\u1529\\u152A\\u152B\\u152D\\u2026\\xA0\\u152E\\u153E\\u1555\\u1556\\u1557\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\u1558\\u1559\\u155A\\u155D\\u1546\\u1547\\u1548\\u1549\\u154B\\u154C\\u1550\\u157F\\u1580\\u1581\\u1582\\u1583\\u1584\\u1585\\u158F\\u1590\\u1591\\u1592\\u1593\\u1594\\u1595\\u1671\\u1672\\u1673\\u1674\\u1675\\u1676\\u1596\\u15A0\\u15A1\\u15A2\\u15A3\\u15A4\\u15A5\\u15A6\\u157C\\u0141\\u0142\",\n  \"x-mac-ce\": \"\\xC4\\u0100\\u0101\\xC9\\u0104\\xD6\\xDC\\xE1\\u0105\\u010C\\xE4\\u010D\\u0106\\u0107\\xE9\\u0179\\u017A\\u010E\\xED\\u010F\\u0112\\u0113\\u0116\\xF3\\u0117\\xF4\\xF6\\xF5\\xFA\\u011A\\u011B\\xFC\\u2020\\xB0\\u0118\\xA3\\xA7\\u2022\\xB6\\xDF\\xAE\\xA9\\u2122\\u0119\\xA8\\u2260\\u0123\\u012E\\u012F\\u012A\\u2264\\u2265\\u012B\\u0136\\u2202\\u2211\\u0142\\u013B\\u013C\\u013D\\u013E\\u0139\\u013A\\u0145\\u0146\\u0143\\xAC\\u221A\\u0144\\u0147\\u2206\\xAB\\xBB\\u2026\\xA0\\u0148\\u0150\\xD5\\u0151\\u014C\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xF7\\u25CA\\u014D\\u0154\\u0155\\u0158\\u2039\\u203A\\u0159\\u0156\\u0157\\u0160\\u201A\\u201E\\u0161\\u015A\\u015B\\xC1\\u0164\\u0165\\xCD\\u017D\\u017E\\u016A\\xD3\\xD4\\u016B\\u016E\\xDA\\u016F\\u0170\\u0171\\u0172\\u0173\\xDD\\xFD\\u0137\\u017B\\u0141\\u017C\\u0122\\u02C7\",\n  macintosh: \"\\xC4\\xC5\\xC7\\xC9\\xD1\\xD6\\xDC\\xE1\\xE0\\xE2\\xE4\\xE3\\xE5\\xE7\\xE9\\xE8\\xEA\\xEB\\xED\\xEC\\xEE\\xEF\\xF1\\xF3\\xF2\\xF4\\xF6\\xF5\\xFA\\xF9\\xFB\\xFC\\u2020\\xB0\\xA2\\xA3\\xA7\\u2022\\xB6\\xDF\\xAE\\xA9\\u2122\\xB4\\xA8\\u2260\\xC6\\xD8\\u221E\\xB1\\u2264\\u2265\\xA5\\xB5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xAA\\xBA\\u03A9\\xE6\\xF8\\xBF\\xA1\\xAC\\u221A\\u0192\\u2248\\u2206\\xAB\\xBB\\u2026\\xA0\\xC0\\xC3\\xD5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xF7\\u25CA\\xFF\\u0178\\u2044\\u20AC\\u2039\\u203A\\uFB01\\uFB02\\u2021\\xB7\\u201A\\u201E\\u2030\\xC2\\xCA\\xC1\\xCB\\xC8\\xCD\\xCE\\xCF\\xCC\\xD3\\xD4\\uF8FF\\xD2\\xDA\\xDB\\xD9\\u0131\\u02C6\\u02DC\\xAF\\u02D8\\u02D9\\u02DA\\xB8\\u02DD\\u02DB\\u02C7\",\n  \"x-mac-romanian\": \"\\xC4\\xC5\\xC7\\xC9\\xD1\\xD6\\xDC\\xE1\\xE0\\xE2\\xE4\\xE3\\xE5\\xE7\\xE9\\xE8\\xEA\\xEB\\xED\\xEC\\xEE\\xEF\\xF1\\xF3\\xF2\\xF4\\xF6\\xF5\\xFA\\xF9\\xFB\\xFC\\u2020\\xB0\\xA2\\xA3\\xA7\\u2022\\xB6\\xDF\\xAE\\xA9\\u2122\\xB4\\xA8\\u2260\\u0102\\u0218\\u221E\\xB1\\u2264\\u2265\\xA5\\xB5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xAA\\xBA\\u03A9\\u0103\\u0219\\xBF\\xA1\\xAC\\u221A\\u0192\\u2248\\u2206\\xAB\\xBB\\u2026\\xA0\\xC0\\xC3\\xD5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xF7\\u25CA\\xFF\\u0178\\u2044\\u20AC\\u2039\\u203A\\u021A\\u021B\\u2021\\xB7\\u201A\\u201E\\u2030\\xC2\\xCA\\xC1\\xCB\\xC8\\xCD\\xCE\\xCF\\xCC\\xD3\\xD4\\uF8FF\\xD2\\xDA\\xDB\\xD9\\u0131\\u02C6\\u02DC\\xAF\\u02D8\\u02D9\\u02DA\\xB8\\u02DD\\u02DB\\u02C7\",\n  \"x-mac-turkish\": \"\\xC4\\xC5\\xC7\\xC9\\xD1\\xD6\\xDC\\xE1\\xE0\\xE2\\xE4\\xE3\\xE5\\xE7\\xE9\\xE8\\xEA\\xEB\\xED\\xEC\\xEE\\xEF\\xF1\\xF3\\xF2\\xF4\\xF6\\xF5\\xFA\\xF9\\xFB\\xFC\\u2020\\xB0\\xA2\\xA3\\xA7\\u2022\\xB6\\xDF\\xAE\\xA9\\u2122\\xB4\\xA8\\u2260\\xC6\\xD8\\u221E\\xB1\\u2264\\u2265\\xA5\\xB5\\u2202\\u2211\\u220F\\u03C0\\u222B\\xAA\\xBA\\u03A9\\xE6\\xF8\\xBF\\xA1\\xAC\\u221A\\u0192\\u2248\\u2206\\xAB\\xBB\\u2026\\xA0\\xC0\\xC3\\xD5\\u0152\\u0153\\u2013\\u2014\\u201C\\u201D\\u2018\\u2019\\xF7\\u25CA\\xFF\\u0178\\u011E\\u011F\\u0130\\u0131\\u015E\\u015F\\u2021\\xB7\\u201A\\u201E\\u2030\\xC2\\xCA\\xC1\\xCB\\xC8\\xCD\\xCE\\xCF\\xCC\\xD3\\xD4\\uF8FF\\xD2\\xDA\\xDB\\xD9\\uF8A0\\u02C6\\u02DC\\xAF\\u02D8\\u02D9\\u02DA\\xB8\\u02DD\\u02DB\\u02C7\"\n};\ndecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n  var table = eightBitMacEncodings[encoding];\n  if (table === void 0) {\n    return void 0;\n  }\n  var result = \"\";\n  for (var i = 0; i < dataLength; i++) {\n    var c2 = dataView.getUint8(offset + i);\n    if (c2 <= 127) {\n      result += String.fromCharCode(c2);\n    } else {\n      result += table[c2 & 127];\n    }\n  }\n  return result;\n};\nfunction parseMetaTable(data, start) {\n  var p = new parse.Parser(data, start);\n  var tableVersion = p.parseULong();\n  check.argument(tableVersion === 1, \"Unsupported META table version.\");\n  p.parseULong();\n  p.parseULong();\n  var numDataMaps = p.parseULong();\n  var tags = {};\n  for (var i = 0; i < numDataMaps; i++) {\n    var tag = p.parseTag();\n    var dataOffset = p.parseULong();\n    var dataLength = p.parseULong();\n    var text = decode.UTF8(data, start + dataOffset, dataLength);\n    tags[tag] = text;\n  }\n  return tags;\n}\nvar meta = { parse: parseMetaTable };\nfunction parseOpenTypeTableEntries(data, numTables) {\n  var tableEntries = [];\n  var p = 12;\n  for (var i = 0; i < numTables; i += 1) {\n    var tag = parse.getTag(data, p);\n    var checksum = parse.getULong(data, p + 4);\n    var offset = parse.getULong(data, p + 8);\n    var length = parse.getULong(data, p + 12);\n    tableEntries.push({\n      tag,\n      checksum,\n      offset,\n      length,\n      compression: false\n    });\n    p += 16;\n  }\n  return tableEntries;\n}\nfunction parseWOFFTableEntries(data, numTables) {\n  var tableEntries = [];\n  var p = 44;\n  for (var i = 0; i < numTables; i += 1) {\n    var tag = parse.getTag(data, p);\n    var offset = parse.getULong(data, p + 4);\n    var compLength = parse.getULong(data, p + 8);\n    var origLength = parse.getULong(data, p + 12);\n    var compression = void 0;\n    if (compLength < origLength) {\n      compression = \"WOFF\";\n    } else {\n      compression = false;\n    }\n    tableEntries.push({\n      tag,\n      offset,\n      compression,\n      compressedLength: compLength,\n      length: origLength\n    });\n    p += 20;\n  }\n  return tableEntries;\n}\nfunction uncompressTable(data, tableEntry) {\n  if (tableEntry.compression === \"WOFF\") {\n    var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n    var outBuffer = new Uint8Array(tableEntry.length);\n    inflateSync(inBuffer, outBuffer);\n    if (outBuffer.byteLength !== tableEntry.length) {\n      throw new Error(\"Decompression error: \" + tableEntry.tag + \" decompressed length doesn't match recorded length\");\n    }\n    var view = new DataView(outBuffer.buffer, 0);\n    return { data: view, offset: 0 };\n  } else {\n    return { data, offset: tableEntry.offset };\n  }\n}\nfunction parseBuffer(buffer, opt) {\n  opt = opt === void 0 || opt === null ? {} : opt;\n  var indexToLocFormat;\n  var font = new Font({ empty: true });\n  var data = new DataView(buffer, 0);\n  var numTables;\n  var tableEntries = [];\n  var signature = parse.getTag(data, 0);\n  if (signature === String.fromCharCode(0, 1, 0, 0) || signature === \"true\" || signature === \"typ1\") {\n    font.outlinesFormat = \"truetype\";\n    numTables = parse.getUShort(data, 4);\n    tableEntries = parseOpenTypeTableEntries(data, numTables);\n  } else if (signature === \"OTTO\") {\n    font.outlinesFormat = \"cff\";\n    numTables = parse.getUShort(data, 4);\n    tableEntries = parseOpenTypeTableEntries(data, numTables);\n  } else if (signature === \"wOFF\") {\n    var flavor = parse.getTag(data, 4);\n    if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n      font.outlinesFormat = \"truetype\";\n    } else if (flavor === \"OTTO\") {\n      font.outlinesFormat = \"cff\";\n    } else {\n      throw new Error(\"Unsupported OpenType flavor \" + signature);\n    }\n    numTables = parse.getUShort(data, 12);\n    tableEntries = parseWOFFTableEntries(data, numTables);\n  } else {\n    throw new Error(\"Unsupported OpenType signature \" + signature);\n  }\n  var cffTableEntry;\n  var fvarTableEntry;\n  var glyfTableEntry;\n  var gdefTableEntry;\n  var gposTableEntry;\n  var gsubTableEntry;\n  var hmtxTableEntry;\n  var kernTableEntry;\n  var locaTableEntry;\n  var metaTableEntry;\n  var p;\n  for (var i = 0; i < numTables; i += 1) {\n    var tableEntry = tableEntries[i];\n    var table = void 0;\n    switch (tableEntry.tag) {\n      case \"cmap\":\n        table = uncompressTable(data, tableEntry);\n        font.tables.cmap = cmap.parse(table.data, table.offset);\n        font.encoding = new CmapEncoding(font.tables.cmap);\n        break;\n      case \"cvt \":\n        table = uncompressTable(data, tableEntry);\n        p = new parse.Parser(table.data, table.offset);\n        font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n        break;\n      case \"fvar\":\n        fvarTableEntry = tableEntry;\n        break;\n      case \"fpgm\":\n        table = uncompressTable(data, tableEntry);\n        p = new parse.Parser(table.data, table.offset);\n        font.tables.fpgm = p.parseByteList(tableEntry.length);\n        break;\n      case \"head\":\n        table = uncompressTable(data, tableEntry);\n        font.tables.head = head.parse(table.data, table.offset);\n        font.unitsPerEm = font.tables.head.unitsPerEm;\n        indexToLocFormat = font.tables.head.indexToLocFormat;\n        break;\n      case \"hhea\":\n        table = uncompressTable(data, tableEntry);\n        font.tables.hhea = hhea.parse(table.data, table.offset);\n        font.ascender = font.tables.hhea.ascender;\n        font.descender = font.tables.hhea.descender;\n        font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n        break;\n      case \"hmtx\":\n        hmtxTableEntry = tableEntry;\n        break;\n      case \"ltag\":\n        table = uncompressTable(data, tableEntry);\n        ltagTable = ltag.parse(table.data, table.offset);\n        break;\n      case \"maxp\":\n        table = uncompressTable(data, tableEntry);\n        font.tables.maxp = maxp.parse(table.data, table.offset);\n        font.numGlyphs = font.tables.maxp.numGlyphs;\n        break;\n      case \"OS/2\":\n        table = uncompressTable(data, tableEntry);\n        font.tables.os2 = os2.parse(table.data, table.offset);\n        break;\n      case \"post\":\n        table = uncompressTable(data, tableEntry);\n        font.tables.post = post.parse(table.data, table.offset);\n        break;\n      case \"prep\":\n        table = uncompressTable(data, tableEntry);\n        p = new parse.Parser(table.data, table.offset);\n        font.tables.prep = p.parseByteList(tableEntry.length);\n        break;\n      case \"glyf\":\n        glyfTableEntry = tableEntry;\n        break;\n      case \"loca\":\n        locaTableEntry = tableEntry;\n        break;\n      case \"CFF \":\n        cffTableEntry = tableEntry;\n        break;\n      case \"kern\":\n        kernTableEntry = tableEntry;\n        break;\n      case \"GDEF\":\n        gdefTableEntry = tableEntry;\n        break;\n      case \"GPOS\":\n        gposTableEntry = tableEntry;\n        break;\n      case \"GSUB\":\n        gsubTableEntry = tableEntry;\n        break;\n      case \"meta\":\n        metaTableEntry = tableEntry;\n        break;\n    }\n  }\n  if (glyfTableEntry && locaTableEntry) {\n    var shortVersion = indexToLocFormat === 0;\n    var locaTable = uncompressTable(data, locaTableEntry);\n    var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n    var glyfTable = uncompressTable(data, glyfTableEntry);\n    font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);\n  } else if (cffTableEntry) {\n    var cffTable = uncompressTable(data, cffTableEntry);\n    cff.parse(cffTable.data, cffTable.offset, font, opt);\n  } else {\n    throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n  }\n  var hmtxTable = uncompressTable(data, hmtxTableEntry);\n  hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);\n  addGlyphNames(font, opt);\n  if (kernTableEntry) {\n    var kernTable = uncompressTable(data, kernTableEntry);\n    font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n  } else {\n    font.kerningPairs = {};\n  }\n  if (gdefTableEntry) {\n    var gdefTable = uncompressTable(data, gdefTableEntry);\n    font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);\n  }\n  if (gposTableEntry) {\n    var gposTable = uncompressTable(data, gposTableEntry);\n    font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n    font.position.init();\n  }\n  if (gsubTableEntry) {\n    var gsubTable = uncompressTable(data, gsubTableEntry);\n    font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n  }\n  if (fvarTableEntry) {\n    var fvarTable = uncompressTable(data, fvarTableEntry);\n    font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n  }\n  if (metaTableEntry) {\n    var metaTable = uncompressTable(data, metaTableEntry);\n    font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n    font.metas = font.tables.meta;\n  }\n  return font;\n}\nfunction load() {\n}\nfunction loadSync() {\n}\nvar opentype = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  Font,\n  Glyph,\n  Path,\n  _parse: parse,\n  parse: parseBuffer,\n  load,\n  loadSync\n});\nvar opentype_module_default = opentype;\n\n// node_modules/.pnpm/satori@0.10.1/node_modules/satori/dist/index.wasm.js\nvar Tl = Object.create;\nvar Rr = Object.defineProperty;\nvar Al = Object.getOwnPropertyDescriptor;\nvar Ol = Object.getOwnPropertyNames;\nvar Pl = Object.getPrototypeOf;\nvar Il = Object.prototype.hasOwnProperty;\nvar Lr = (e, t) => () => (e && (t = e(e = 0)), t);\nvar P = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);\nvar Fn = (e, t) => {\n  for (var n in t)\n    Rr(e, n, { get: t[n], enumerable: true });\n};\nvar Yo = (e, t, n, r) => {\n  if (t && typeof t == \"object\" || typeof t == \"function\")\n    for (let i of Ol(t))\n      !Il.call(e, i) && i !== n && Rr(e, i, { get: () => t[i], enumerable: !(r = Al(t, i)) || r.enumerable });\n  return e;\n};\nvar Bl = (e, t, n) => (n = e != null ? Tl(Pl(e)) : {}, Yo(t || !e || !e.__esModule ? Rr(n, \"default\", { value: e, enumerable: true }) : n, e));\nvar Mr = (e) => Yo(Rr({}, \"__esModule\", { value: true }), e);\nvar c = Lr(() => {\n});\nvar Xo = {};\nFn(Xo, { getYogaModule: () => Rl });\nasync function Rl() {\n  return {};\n}\nvar Qo = Lr(() => {\n  c();\n});\nvar Kn = P((Qn) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(Qn, \"__esModule\", { value: true });\n  Object.defineProperty(Qn, \"default\", { enumerable: true, get: () => Hf });\n  function Hf(e) {\n    if (e = `${e}`, e === \"0\")\n      return \"0\";\n    if (/^[+-]?(\\d+|\\d*\\.\\d+)(e[+-]?\\d+)?(%|\\w+)?$/.test(e))\n      return e.replace(/^[+-]?/, (t) => t === \"-\" ? \"\" : \"-\");\n    if (e.includes(\"var(\") || e.includes(\"calc(\"))\n      return `calc(${e} * -1)`;\n  }\n});\nvar Gu = P((Jn) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(Jn, \"__esModule\", { value: true });\n  Object.defineProperty(Jn, \"default\", { enumerable: true, get: () => Vf });\n  var Vf = [\"preflight\", \"container\", \"accessibility\", \"pointerEvents\", \"visibility\", \"position\", \"inset\", \"isolation\", \"zIndex\", \"order\", \"gridColumn\", \"gridColumnStart\", \"gridColumnEnd\", \"gridRow\", \"gridRowStart\", \"gridRowEnd\", \"float\", \"clear\", \"margin\", \"boxSizing\", \"display\", \"aspectRatio\", \"height\", \"maxHeight\", \"minHeight\", \"width\", \"minWidth\", \"maxWidth\", \"flex\", \"flexShrink\", \"flexGrow\", \"flexBasis\", \"tableLayout\", \"borderCollapse\", \"borderSpacing\", \"transformOrigin\", \"translate\", \"rotate\", \"skew\", \"scale\", \"transform\", \"animation\", \"cursor\", \"touchAction\", \"userSelect\", \"resize\", \"scrollSnapType\", \"scrollSnapAlign\", \"scrollSnapStop\", \"scrollMargin\", \"scrollPadding\", \"listStylePosition\", \"listStyleType\", \"appearance\", \"columns\", \"breakBefore\", \"breakInside\", \"breakAfter\", \"gridAutoColumns\", \"gridAutoFlow\", \"gridAutoRows\", \"gridTemplateColumns\", \"gridTemplateRows\", \"flexDirection\", \"flexWrap\", \"placeContent\", \"placeItems\", \"alignContent\", \"alignItems\", \"justifyContent\", \"justifyItems\", \"gap\", \"space\", \"divideWidth\", \"divideStyle\", \"divideColor\", \"divideOpacity\", \"placeSelf\", \"alignSelf\", \"justifySelf\", \"overflow\", \"overscrollBehavior\", \"scrollBehavior\", \"textOverflow\", \"whitespace\", \"wordBreak\", \"borderRadius\", \"borderWidth\", \"borderStyle\", \"borderColor\", \"borderOpacity\", \"backgroundColor\", \"backgroundOpacity\", \"backgroundImage\", \"gradientColorStops\", \"boxDecorationBreak\", \"backgroundSize\", \"backgroundAttachment\", \"backgroundClip\", \"backgroundPosition\", \"backgroundRepeat\", \"backgroundOrigin\", \"fill\", \"stroke\", \"strokeWidth\", \"objectFit\", \"objectPosition\", \"padding\", \"textAlign\", \"textIndent\", \"verticalAlign\", \"fontFamily\", \"fontSize\", \"fontWeight\", \"textTransform\", \"fontStyle\", \"fontVariantNumeric\", \"lineHeight\", \"letterSpacing\", \"textColor\", \"textOpacity\", \"textDecoration\", \"textDecorationColor\", \"textDecorationStyle\", \"textDecorationThickness\", \"textUnderlineOffset\", \"fontSmoothing\", \"placeholderColor\", \"placeholderOpacity\", \"caretColor\", \"accentColor\", \"opacity\", \"backgroundBlendMode\", \"mixBlendMode\", \"boxShadow\", \"boxShadowColor\", \"outlineStyle\", \"outlineWidth\", \"outlineOffset\", \"outlineColor\", \"ringWidth\", \"ringColor\", \"ringOpacity\", \"ringOffsetWidth\", \"ringOffsetColor\", \"blur\", \"brightness\", \"contrast\", \"dropShadow\", \"grayscale\", \"hueRotate\", \"invert\", \"saturate\", \"sepia\", \"filter\", \"backdropBlur\", \"backdropBrightness\", \"backdropContrast\", \"backdropGrayscale\", \"backdropHueRotate\", \"backdropInvert\", \"backdropOpacity\", \"backdropSaturate\", \"backdropSepia\", \"backdropFilter\", \"transitionProperty\", \"transitionDelay\", \"transitionDuration\", \"transitionTimingFunction\", \"willChange\", \"content\"];\n});\nvar ju = P((Zn) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(Zn, \"__esModule\", { value: true });\n  Object.defineProperty(Zn, \"default\", { enumerable: true, get: () => Yf });\n  function Yf(e, t) {\n    return e === void 0 ? t : Array.isArray(e) ? e : [...new Set(t.filter((r) => e !== false && e[r] !== false).concat(Object.keys(e).filter((r) => e[r] !== false)))];\n  }\n});\nvar ei = P((tb, Hu) => {\n  c();\n  Hu.exports = { content: [], presets: [], darkMode: \"media\", theme: { screens: { sm: \"640px\", md: \"768px\", lg: \"1024px\", xl: \"1280px\", \"2xl\": \"1536px\" }, colors: ({ colors: e }) => ({ inherit: e.inherit, current: e.current, transparent: e.transparent, black: e.black, white: e.white, slate: e.slate, gray: e.gray, zinc: e.zinc, neutral: e.neutral, stone: e.stone, red: e.red, orange: e.orange, amber: e.amber, yellow: e.yellow, lime: e.lime, green: e.green, emerald: e.emerald, teal: e.teal, cyan: e.cyan, sky: e.sky, blue: e.blue, indigo: e.indigo, violet: e.violet, purple: e.purple, fuchsia: e.fuchsia, pink: e.pink, rose: e.rose }), columns: { auto: \"auto\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7: \"7\", 8: \"8\", 9: \"9\", 10: \"10\", 11: \"11\", 12: \"12\", \"3xs\": \"16rem\", \"2xs\": \"18rem\", xs: \"20rem\", sm: \"24rem\", md: \"28rem\", lg: \"32rem\", xl: \"36rem\", \"2xl\": \"42rem\", \"3xl\": \"48rem\", \"4xl\": \"56rem\", \"5xl\": \"64rem\", \"6xl\": \"72rem\", \"7xl\": \"80rem\" }, spacing: { px: \"1px\", 0: \"0px\", 0.5: \"0.125rem\", 1: \"0.25rem\", 1.5: \"0.375rem\", 2: \"0.5rem\", 2.5: \"0.625rem\", 3: \"0.75rem\", 3.5: \"0.875rem\", 4: \"1rem\", 5: \"1.25rem\", 6: \"1.5rem\", 7: \"1.75rem\", 8: \"2rem\", 9: \"2.25rem\", 10: \"2.5rem\", 11: \"2.75rem\", 12: \"3rem\", 14: \"3.5rem\", 16: \"4rem\", 20: \"5rem\", 24: \"6rem\", 28: \"7rem\", 32: \"8rem\", 36: \"9rem\", 40: \"10rem\", 44: \"11rem\", 48: \"12rem\", 52: \"13rem\", 56: \"14rem\", 60: \"15rem\", 64: \"16rem\", 72: \"18rem\", 80: \"20rem\", 96: \"24rem\" }, animation: { none: \"none\", spin: \"spin 1s linear infinite\", ping: \"ping 1s cubic-bezier(0, 0, 0.2, 1) infinite\", pulse: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\", bounce: \"bounce 1s infinite\" }, aspectRatio: { auto: \"auto\", square: \"1 / 1\", video: \"16 / 9\" }, backdropBlur: ({ theme: e }) => e(\"blur\"), backdropBrightness: ({ theme: e }) => e(\"brightness\"), backdropContrast: ({ theme: e }) => e(\"contrast\"), backdropGrayscale: ({ theme: e }) => e(\"grayscale\"), backdropHueRotate: ({ theme: e }) => e(\"hueRotate\"), backdropInvert: ({ theme: e }) => e(\"invert\"), backdropOpacity: ({ theme: e }) => e(\"opacity\"), backdropSaturate: ({ theme: e }) => e(\"saturate\"), backdropSepia: ({ theme: e }) => e(\"sepia\"), backgroundColor: ({ theme: e }) => e(\"colors\"), backgroundImage: { none: \"none\", \"gradient-to-t\": \"linear-gradient(to top, var(--tw-gradient-stops))\", \"gradient-to-tr\": \"linear-gradient(to top right, var(--tw-gradient-stops))\", \"gradient-to-r\": \"linear-gradient(to right, var(--tw-gradient-stops))\", \"gradient-to-br\": \"linear-gradient(to bottom right, var(--tw-gradient-stops))\", \"gradient-to-b\": \"linear-gradient(to bottom, var(--tw-gradient-stops))\", \"gradient-to-bl\": \"linear-gradient(to bottom left, var(--tw-gradient-stops))\", \"gradient-to-l\": \"linear-gradient(to left, var(--tw-gradient-stops))\", \"gradient-to-tl\": \"linear-gradient(to top left, var(--tw-gradient-stops))\" }, backgroundOpacity: ({ theme: e }) => e(\"opacity\"), backgroundPosition: { bottom: \"bottom\", center: \"center\", left: \"left\", \"left-bottom\": \"left bottom\", \"left-top\": \"left top\", right: \"right\", \"right-bottom\": \"right bottom\", \"right-top\": \"right top\", top: \"top\" }, backgroundSize: { auto: \"auto\", cover: \"cover\", contain: \"contain\" }, blur: { 0: \"0\", none: \"0\", sm: \"4px\", DEFAULT: \"8px\", md: \"12px\", lg: \"16px\", xl: \"24px\", \"2xl\": \"40px\", \"3xl\": \"64px\" }, brightness: { 0: \"0\", 50: \".5\", 75: \".75\", 90: \".9\", 95: \".95\", 100: \"1\", 105: \"1.05\", 110: \"1.1\", 125: \"1.25\", 150: \"1.5\", 200: \"2\" }, borderColor: ({ theme: e }) => ({ ...e(\"colors\"), DEFAULT: e(\"colors.gray.200\", \"currentColor\") }), borderOpacity: ({ theme: e }) => e(\"opacity\"), borderRadius: { none: \"0px\", sm: \"0.125rem\", DEFAULT: \"0.25rem\", md: \"0.375rem\", lg: \"0.5rem\", xl: \"0.75rem\", \"2xl\": \"1rem\", \"3xl\": \"1.5rem\", full: \"9999px\" }, borderSpacing: ({ theme: e }) => ({ ...e(\"spacing\") }), borderWidth: { DEFAULT: \"1px\", 0: \"0px\", 2: \"2px\", 4: \"4px\", 8: \"8px\" }, boxShadow: { sm: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\", DEFAULT: \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\", md: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\", lg: \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\", xl: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\", \"2xl\": \"0 25px 50px -12px rgb(0 0 0 / 0.25)\", inner: \"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\", none: \"none\" }, boxShadowColor: ({ theme: e }) => e(\"colors\"), caretColor: ({ theme: e }) => e(\"colors\"), accentColor: ({ theme: e }) => ({ ...e(\"colors\"), auto: \"auto\" }), contrast: { 0: \"0\", 50: \".5\", 75: \".75\", 100: \"1\", 125: \"1.25\", 150: \"1.5\", 200: \"2\" }, container: {}, content: { none: \"none\" }, cursor: { auto: \"auto\", default: \"default\", pointer: \"pointer\", wait: \"wait\", text: \"text\", move: \"move\", help: \"help\", \"not-allowed\": \"not-allowed\", none: \"none\", \"context-menu\": \"context-menu\", progress: \"progress\", cell: \"cell\", crosshair: \"crosshair\", \"vertical-text\": \"vertical-text\", alias: \"alias\", copy: \"copy\", \"no-drop\": \"no-drop\", grab: \"grab\", grabbing: \"grabbing\", \"all-scroll\": \"all-scroll\", \"col-resize\": \"col-resize\", \"row-resize\": \"row-resize\", \"n-resize\": \"n-resize\", \"e-resize\": \"e-resize\", \"s-resize\": \"s-resize\", \"w-resize\": \"w-resize\", \"ne-resize\": \"ne-resize\", \"nw-resize\": \"nw-resize\", \"se-resize\": \"se-resize\", \"sw-resize\": \"sw-resize\", \"ew-resize\": \"ew-resize\", \"ns-resize\": \"ns-resize\", \"nesw-resize\": \"nesw-resize\", \"nwse-resize\": \"nwse-resize\", \"zoom-in\": \"zoom-in\", \"zoom-out\": \"zoom-out\" }, divideColor: ({ theme: e }) => e(\"borderColor\"), divideOpacity: ({ theme: e }) => e(\"borderOpacity\"), divideWidth: ({ theme: e }) => e(\"borderWidth\"), dropShadow: { sm: \"0 1px 1px rgb(0 0 0 / 0.05)\", DEFAULT: [\"0 1px 2px rgb(0 0 0 / 0.1)\", \"0 1px 1px rgb(0 0 0 / 0.06)\"], md: [\"0 4px 3px rgb(0 0 0 / 0.07)\", \"0 2px 2px rgb(0 0 0 / 0.06)\"], lg: [\"0 10px 8px rgb(0 0 0 / 0.04)\", \"0 4px 3px rgb(0 0 0 / 0.1)\"], xl: [\"0 20px 13px rgb(0 0 0 / 0.03)\", \"0 8px 5px rgb(0 0 0 / 0.08)\"], \"2xl\": \"0 25px 25px rgb(0 0 0 / 0.15)\", none: \"0 0 #0000\" }, fill: ({ theme: e }) => e(\"colors\"), grayscale: { 0: \"0\", DEFAULT: \"100%\" }, hueRotate: { 0: \"0deg\", 15: \"15deg\", 30: \"30deg\", 60: \"60deg\", 90: \"90deg\", 180: \"180deg\" }, invert: { 0: \"0\", DEFAULT: \"100%\" }, flex: { 1: \"1 1 0%\", auto: \"1 1 auto\", initial: \"0 1 auto\", none: \"none\" }, flexBasis: ({ theme: e }) => ({ auto: \"auto\", ...e(\"spacing\"), \"1/2\": \"50%\", \"1/3\": \"33.333333%\", \"2/3\": \"66.666667%\", \"1/4\": \"25%\", \"2/4\": \"50%\", \"3/4\": \"75%\", \"1/5\": \"20%\", \"2/5\": \"40%\", \"3/5\": \"60%\", \"4/5\": \"80%\", \"1/6\": \"16.666667%\", \"2/6\": \"33.333333%\", \"3/6\": \"50%\", \"4/6\": \"66.666667%\", \"5/6\": \"83.333333%\", \"1/12\": \"8.333333%\", \"2/12\": \"16.666667%\", \"3/12\": \"25%\", \"4/12\": \"33.333333%\", \"5/12\": \"41.666667%\", \"6/12\": \"50%\", \"7/12\": \"58.333333%\", \"8/12\": \"66.666667%\", \"9/12\": \"75%\", \"10/12\": \"83.333333%\", \"11/12\": \"91.666667%\", full: \"100%\" }), flexGrow: { 0: \"0\", DEFAULT: \"1\" }, flexShrink: { 0: \"0\", DEFAULT: \"1\" }, fontFamily: { sans: [\"ui-sans-serif\", \"system-ui\", \"-apple-system\", \"BlinkMacSystemFont\", '\"Segoe UI\"', \"Roboto\", '\"Helvetica Neue\"', \"Arial\", '\"Noto Sans\"', \"sans-serif\", '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"', '\"Noto Color Emoji\"'], serif: [\"ui-serif\", \"Georgia\", \"Cambria\", '\"Times New Roman\"', \"Times\", \"serif\"], mono: [\"ui-monospace\", \"SFMono-Regular\", \"Menlo\", \"Monaco\", \"Consolas\", '\"Liberation Mono\"', '\"Courier New\"', \"monospace\"] }, fontSize: { xs: [\"0.75rem\", { lineHeight: \"1rem\" }], sm: [\"0.875rem\", { lineHeight: \"1.25rem\" }], base: [\"1rem\", { lineHeight: \"1.5rem\" }], lg: [\"1.125rem\", { lineHeight: \"1.75rem\" }], xl: [\"1.25rem\", { lineHeight: \"1.75rem\" }], \"2xl\": [\"1.5rem\", { lineHeight: \"2rem\" }], \"3xl\": [\"1.875rem\", { lineHeight: \"2.25rem\" }], \"4xl\": [\"2.25rem\", { lineHeight: \"2.5rem\" }], \"5xl\": [\"3rem\", { lineHeight: \"1\" }], \"6xl\": [\"3.75rem\", { lineHeight: \"1\" }], \"7xl\": [\"4.5rem\", { lineHeight: \"1\" }], \"8xl\": [\"6rem\", { lineHeight: \"1\" }], \"9xl\": [\"8rem\", { lineHeight: \"1\" }] }, fontWeight: { thin: \"100\", extralight: \"200\", light: \"300\", normal: \"400\", medium: \"500\", semibold: \"600\", bold: \"700\", extrabold: \"800\", black: \"900\" }, gap: ({ theme: e }) => e(\"spacing\"), gradientColorStops: ({ theme: e }) => e(\"colors\"), gridAutoColumns: { auto: \"auto\", min: \"min-content\", max: \"max-content\", fr: \"minmax(0, 1fr)\" }, gridAutoRows: { auto: \"auto\", min: \"min-content\", max: \"max-content\", fr: \"minmax(0, 1fr)\" }, gridColumn: { auto: \"auto\", \"span-1\": \"span 1 / span 1\", \"span-2\": \"span 2 / span 2\", \"span-3\": \"span 3 / span 3\", \"span-4\": \"span 4 / span 4\", \"span-5\": \"span 5 / span 5\", \"span-6\": \"span 6 / span 6\", \"span-7\": \"span 7 / span 7\", \"span-8\": \"span 8 / span 8\", \"span-9\": \"span 9 / span 9\", \"span-10\": \"span 10 / span 10\", \"span-11\": \"span 11 / span 11\", \"span-12\": \"span 12 / span 12\", \"span-full\": \"1 / -1\" }, gridColumnEnd: { auto: \"auto\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7: \"7\", 8: \"8\", 9: \"9\", 10: \"10\", 11: \"11\", 12: \"12\", 13: \"13\" }, gridColumnStart: { auto: \"auto\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7: \"7\", 8: \"8\", 9: \"9\", 10: \"10\", 11: \"11\", 12: \"12\", 13: \"13\" }, gridRow: { auto: \"auto\", \"span-1\": \"span 1 / span 1\", \"span-2\": \"span 2 / span 2\", \"span-3\": \"span 3 / span 3\", \"span-4\": \"span 4 / span 4\", \"span-5\": \"span 5 / span 5\", \"span-6\": \"span 6 / span 6\", \"span-full\": \"1 / -1\" }, gridRowStart: { auto: \"auto\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7: \"7\" }, gridRowEnd: { auto: \"auto\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7: \"7\" }, gridTemplateColumns: { none: \"none\", 1: \"repeat(1, minmax(0, 1fr))\", 2: \"repeat(2, minmax(0, 1fr))\", 3: \"repeat(3, minmax(0, 1fr))\", 4: \"repeat(4, minmax(0, 1fr))\", 5: \"repeat(5, minmax(0, 1fr))\", 6: \"repeat(6, minmax(0, 1fr))\", 7: \"repeat(7, minmax(0, 1fr))\", 8: \"repeat(8, minmax(0, 1fr))\", 9: \"repeat(9, minmax(0, 1fr))\", 10: \"repeat(10, minmax(0, 1fr))\", 11: \"repeat(11, minmax(0, 1fr))\", 12: \"repeat(12, minmax(0, 1fr))\" }, gridTemplateRows: { none: \"none\", 1: \"repeat(1, minmax(0, 1fr))\", 2: \"repeat(2, minmax(0, 1fr))\", 3: \"repeat(3, minmax(0, 1fr))\", 4: \"repeat(4, minmax(0, 1fr))\", 5: \"repeat(5, minmax(0, 1fr))\", 6: \"repeat(6, minmax(0, 1fr))\" }, height: ({ theme: e }) => ({ auto: \"auto\", ...e(\"spacing\"), \"1/2\": \"50%\", \"1/3\": \"33.333333%\", \"2/3\": \"66.666667%\", \"1/4\": \"25%\", \"2/4\": \"50%\", \"3/4\": \"75%\", \"1/5\": \"20%\", \"2/5\": \"40%\", \"3/5\": \"60%\", \"4/5\": \"80%\", \"1/6\": \"16.666667%\", \"2/6\": \"33.333333%\", \"3/6\": \"50%\", \"4/6\": \"66.666667%\", \"5/6\": \"83.333333%\", full: \"100%\", screen: \"100vh\", min: \"min-content\", max: \"max-content\", fit: \"fit-content\" }), inset: ({ theme: e }) => ({ auto: \"auto\", ...e(\"spacing\"), \"1/2\": \"50%\", \"1/3\": \"33.333333%\", \"2/3\": \"66.666667%\", \"1/4\": \"25%\", \"2/4\": \"50%\", \"3/4\": \"75%\", full: \"100%\" }), keyframes: { spin: { to: { transform: \"rotate(360deg)\" } }, ping: { \"75%, 100%\": { transform: \"scale(2)\", opacity: \"0\" } }, pulse: { \"50%\": { opacity: \".5\" } }, bounce: { \"0%, 100%\": { transform: \"translateY(-25%)\", animationTimingFunction: \"cubic-bezier(0.8,0,1,1)\" }, \"50%\": { transform: \"none\", animationTimingFunction: \"cubic-bezier(0,0,0.2,1)\" } } }, letterSpacing: { tighter: \"-0.05em\", tight: \"-0.025em\", normal: \"0em\", wide: \"0.025em\", wider: \"0.05em\", widest: \"0.1em\" }, lineHeight: { none: \"1\", tight: \"1.25\", snug: \"1.375\", normal: \"1.5\", relaxed: \"1.625\", loose: \"2\", 3: \".75rem\", 4: \"1rem\", 5: \"1.25rem\", 6: \"1.5rem\", 7: \"1.75rem\", 8: \"2rem\", 9: \"2.25rem\", 10: \"2.5rem\" }, listStyleType: { none: \"none\", disc: \"disc\", decimal: \"decimal\" }, margin: ({ theme: e }) => ({ auto: \"auto\", ...e(\"spacing\") }), maxHeight: ({ theme: e }) => ({ ...e(\"spacing\"), full: \"100%\", screen: \"100vh\", min: \"min-content\", max: \"max-content\", fit: \"fit-content\" }), maxWidth: ({ theme: e, breakpoints: t }) => ({ none: \"none\", 0: \"0rem\", xs: \"20rem\", sm: \"24rem\", md: \"28rem\", lg: \"32rem\", xl: \"36rem\", \"2xl\": \"42rem\", \"3xl\": \"48rem\", \"4xl\": \"56rem\", \"5xl\": \"64rem\", \"6xl\": \"72rem\", \"7xl\": \"80rem\", full: \"100%\", min: \"min-content\", max: \"max-content\", fit: \"fit-content\", prose: \"65ch\", ...t(e(\"screens\")) }), minHeight: { 0: \"0px\", full: \"100%\", screen: \"100vh\", min: \"min-content\", max: \"max-content\", fit: \"fit-content\" }, minWidth: { 0: \"0px\", full: \"100%\", min: \"min-content\", max: \"max-content\", fit: \"fit-content\" }, objectPosition: { bottom: \"bottom\", center: \"center\", left: \"left\", \"left-bottom\": \"left bottom\", \"left-top\": \"left top\", right: \"right\", \"right-bottom\": \"right bottom\", \"right-top\": \"right top\", top: \"top\" }, opacity: { 0: \"0\", 5: \"0.05\", 10: \"0.1\", 20: \"0.2\", 25: \"0.25\", 30: \"0.3\", 40: \"0.4\", 50: \"0.5\", 60: \"0.6\", 70: \"0.7\", 75: \"0.75\", 80: \"0.8\", 90: \"0.9\", 95: \"0.95\", 100: \"1\" }, order: { first: \"-9999\", last: \"9999\", none: \"0\", 1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\", 6: \"6\", 7: \"7\", 8: \"8\", 9: \"9\", 10: \"10\", 11: \"11\", 12: \"12\" }, padding: ({ theme: e }) => e(\"spacing\"), placeholderColor: ({ theme: e }) => e(\"colors\"), placeholderOpacity: ({ theme: e }) => e(\"opacity\"), outlineColor: ({ theme: e }) => e(\"colors\"), outlineOffset: { 0: \"0px\", 1: \"1px\", 2: \"2px\", 4: \"4px\", 8: \"8px\" }, outlineWidth: { 0: \"0px\", 1: \"1px\", 2: \"2px\", 4: \"4px\", 8: \"8px\" }, ringColor: ({ theme: e }) => ({ DEFAULT: e(\"colors.blue.500\", \"#3b82f6\"), ...e(\"colors\") }), ringOffsetColor: ({ theme: e }) => e(\"colors\"), ringOffsetWidth: { 0: \"0px\", 1: \"1px\", 2: \"2px\", 4: \"4px\", 8: \"8px\" }, ringOpacity: ({ theme: e }) => ({ DEFAULT: \"0.5\", ...e(\"opacity\") }), ringWidth: { DEFAULT: \"3px\", 0: \"0px\", 1: \"1px\", 2: \"2px\", 4: \"4px\", 8: \"8px\" }, rotate: { 0: \"0deg\", 1: \"1deg\", 2: \"2deg\", 3: \"3deg\", 6: \"6deg\", 12: \"12deg\", 45: \"45deg\", 90: \"90deg\", 180: \"180deg\" }, saturate: { 0: \"0\", 50: \".5\", 100: \"1\", 150: \"1.5\", 200: \"2\" }, scale: { 0: \"0\", 50: \".5\", 75: \".75\", 90: \".9\", 95: \".95\", 100: \"1\", 105: \"1.05\", 110: \"1.1\", 125: \"1.25\", 150: \"1.5\" }, scrollMargin: ({ theme: e }) => ({ ...e(\"spacing\") }), scrollPadding: ({ theme: e }) => e(\"spacing\"), sepia: { 0: \"0\", DEFAULT: \"100%\" }, skew: { 0: \"0deg\", 1: \"1deg\", 2: \"2deg\", 3: \"3deg\", 6: \"6deg\", 12: \"12deg\" }, space: ({ theme: e }) => ({ ...e(\"spacing\") }), stroke: ({ theme: e }) => e(\"colors\"), strokeWidth: { 0: \"0\", 1: \"1\", 2: \"2\" }, textColor: ({ theme: e }) => e(\"colors\"), textDecorationColor: ({ theme: e }) => e(\"colors\"), textDecorationThickness: { auto: \"auto\", \"from-font\": \"from-font\", 0: \"0px\", 1: \"1px\", 2: \"2px\", 4: \"4px\", 8: \"8px\" }, textUnderlineOffset: { auto: \"auto\", 0: \"0px\", 1: \"1px\", 2: \"2px\", 4: \"4px\", 8: \"8px\" }, textIndent: ({ theme: e }) => ({ ...e(\"spacing\") }), textOpacity: ({ theme: e }) => e(\"opacity\"), transformOrigin: { center: \"center\", top: \"top\", \"top-right\": \"top right\", right: \"right\", \"bottom-right\": \"bottom right\", bottom: \"bottom\", \"bottom-left\": \"bottom left\", left: \"left\", \"top-left\": \"top left\" }, transitionDelay: { 75: \"75ms\", 100: \"100ms\", 150: \"150ms\", 200: \"200ms\", 300: \"300ms\", 500: \"500ms\", 700: \"700ms\", 1e3: \"1000ms\" }, transitionDuration: { DEFAULT: \"150ms\", 75: \"75ms\", 100: \"100ms\", 150: \"150ms\", 200: \"200ms\", 300: \"300ms\", 500: \"500ms\", 700: \"700ms\", 1e3: \"1000ms\" }, transitionProperty: { none: \"none\", all: \"all\", DEFAULT: \"color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter\", colors: \"color, background-color, border-color, text-decoration-color, fill, stroke\", opacity: \"opacity\", shadow: \"box-shadow\", transform: \"transform\" }, transitionTimingFunction: { DEFAULT: \"cubic-bezier(0.4, 0, 0.2, 1)\", linear: \"linear\", in: \"cubic-bezier(0.4, 0, 1, 1)\", out: \"cubic-bezier(0, 0, 0.2, 1)\", \"in-out\": \"cubic-bezier(0.4, 0, 0.2, 1)\" }, translate: ({ theme: e }) => ({ ...e(\"spacing\"), \"1/2\": \"50%\", \"1/3\": \"33.333333%\", \"2/3\": \"66.666667%\", \"1/4\": \"25%\", \"2/4\": \"50%\", \"3/4\": \"75%\", full: \"100%\" }), width: ({ theme: e }) => ({ auto: \"auto\", ...e(\"spacing\"), \"1/2\": \"50%\", \"1/3\": \"33.333333%\", \"2/3\": \"66.666667%\", \"1/4\": \"25%\", \"2/4\": \"50%\", \"3/4\": \"75%\", \"1/5\": \"20%\", \"2/5\": \"40%\", \"3/5\": \"60%\", \"4/5\": \"80%\", \"1/6\": \"16.666667%\", \"2/6\": \"33.333333%\", \"3/6\": \"50%\", \"4/6\": \"66.666667%\", \"5/6\": \"83.333333%\", \"1/12\": \"8.333333%\", \"2/12\": \"16.666667%\", \"3/12\": \"25%\", \"4/12\": \"33.333333%\", \"5/12\": \"41.666667%\", \"6/12\": \"50%\", \"7/12\": \"58.333333%\", \"8/12\": \"66.666667%\", \"9/12\": \"75%\", \"10/12\": \"83.333333%\", \"11/12\": \"91.666667%\", full: \"100%\", screen: \"100vw\", min: \"min-content\", max: \"max-content\", fit: \"fit-content\" }), willChange: { auto: \"auto\", scroll: \"scroll-position\", contents: \"contents\", transform: \"transform\" }, zIndex: { auto: \"auto\", 0: \"0\", 10: \"10\", 20: \"20\", 30: \"30\", 40: \"40\", 50: \"50\" } }, variantOrder: [\"first\", \"last\", \"odd\", \"even\", \"visited\", \"checked\", \"empty\", \"read-only\", \"group-hover\", \"group-focus\", \"focus-within\", \"hover\", \"focus\", \"focus-visible\", \"active\", \"disabled\"], plugins: [] };\n});\nvar Jr = {};\nFn(Jr, { default: () => Xf });\nvar Xf;\nvar Zr = Lr(() => {\n  c();\n  Xf = { info(e, t) {\n    console.info(...Array.isArray(e) ? [e] : [t, e]);\n  }, warn(e, t) {\n    console.warn(...Array.isArray(e) ? [e] : [t, e]);\n  }, risk(e, t) {\n    console.error(...Array.isArray(e) ? [e] : [t, e]);\n  } };\n});\nvar Vu = P((ti) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(ti, \"__esModule\", { value: true });\n  Object.defineProperty(ti, \"default\", { enumerable: true, get: () => Jf });\n  var Qf = Kf((Zr(), Mr(Jr)));\n  function Kf(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Vt({ version: e, from: t, to: n }) {\n    Qf.default.warn(`${t}-color-renamed`, [`As of Tailwind CSS ${e}, \\`${t}\\` has been renamed to \\`${n}\\`.`, \"Update your configuration file to silence this warning.\"]);\n  }\n  var Jf = { inherit: \"inherit\", current: \"currentColor\", transparent: \"transparent\", black: \"#000\", white: \"#fff\", slate: { 50: \"#f8fafc\", 100: \"#f1f5f9\", 200: \"#e2e8f0\", 300: \"#cbd5e1\", 400: \"#94a3b8\", 500: \"#64748b\", 600: \"#475569\", 700: \"#334155\", 800: \"#1e293b\", 900: \"#0f172a\" }, gray: { 50: \"#f9fafb\", 100: \"#f3f4f6\", 200: \"#e5e7eb\", 300: \"#d1d5db\", 400: \"#9ca3af\", 500: \"#6b7280\", 600: \"#4b5563\", 700: \"#374151\", 800: \"#1f2937\", 900: \"#111827\" }, zinc: { 50: \"#fafafa\", 100: \"#f4f4f5\", 200: \"#e4e4e7\", 300: \"#d4d4d8\", 400: \"#a1a1aa\", 500: \"#71717a\", 600: \"#52525b\", 700: \"#3f3f46\", 800: \"#27272a\", 900: \"#18181b\" }, neutral: { 50: \"#fafafa\", 100: \"#f5f5f5\", 200: \"#e5e5e5\", 300: \"#d4d4d4\", 400: \"#a3a3a3\", 500: \"#737373\", 600: \"#525252\", 700: \"#404040\", 800: \"#262626\", 900: \"#171717\" }, stone: { 50: \"#fafaf9\", 100: \"#f5f5f4\", 200: \"#e7e5e4\", 300: \"#d6d3d1\", 400: \"#a8a29e\", 500: \"#78716c\", 600: \"#57534e\", 700: \"#44403c\", 800: \"#292524\", 900: \"#1c1917\" }, red: { 50: \"#fef2f2\", 100: \"#fee2e2\", 200: \"#fecaca\", 300: \"#fca5a5\", 400: \"#f87171\", 500: \"#ef4444\", 600: \"#dc2626\", 700: \"#b91c1c\", 800: \"#991b1b\", 900: \"#7f1d1d\" }, orange: { 50: \"#fff7ed\", 100: \"#ffedd5\", 200: \"#fed7aa\", 300: \"#fdba74\", 400: \"#fb923c\", 500: \"#f97316\", 600: \"#ea580c\", 700: \"#c2410c\", 800: \"#9a3412\", 900: \"#7c2d12\" }, amber: { 50: \"#fffbeb\", 100: \"#fef3c7\", 200: \"#fde68a\", 300: \"#fcd34d\", 400: \"#fbbf24\", 500: \"#f59e0b\", 600: \"#d97706\", 700: \"#b45309\", 800: \"#92400e\", 900: \"#78350f\" }, yellow: { 50: \"#fefce8\", 100: \"#fef9c3\", 200: \"#fef08a\", 300: \"#fde047\", 400: \"#facc15\", 500: \"#eab308\", 600: \"#ca8a04\", 700: \"#a16207\", 800: \"#854d0e\", 900: \"#713f12\" }, lime: { 50: \"#f7fee7\", 100: \"#ecfccb\", 200: \"#d9f99d\", 300: \"#bef264\", 400: \"#a3e635\", 500: \"#84cc16\", 600: \"#65a30d\", 700: \"#4d7c0f\", 800: \"#3f6212\", 900: \"#365314\" }, green: { 50: \"#f0fdf4\", 100: \"#dcfce7\", 200: \"#bbf7d0\", 300: \"#86efac\", 400: \"#4ade80\", 500: \"#22c55e\", 600: \"#16a34a\", 700: \"#15803d\", 800: \"#166534\", 900: \"#14532d\" }, emerald: { 50: \"#ecfdf5\", 100: \"#d1fae5\", 200: \"#a7f3d0\", 300: \"#6ee7b7\", 400: \"#34d399\", 500: \"#10b981\", 600: \"#059669\", 700: \"#047857\", 800: \"#065f46\", 900: \"#064e3b\" }, teal: { 50: \"#f0fdfa\", 100: \"#ccfbf1\", 200: \"#99f6e4\", 300: \"#5eead4\", 400: \"#2dd4bf\", 500: \"#14b8a6\", 600: \"#0d9488\", 700: \"#0f766e\", 800: \"#115e59\", 900: \"#134e4a\" }, cyan: { 50: \"#ecfeff\", 100: \"#cffafe\", 200: \"#a5f3fc\", 300: \"#67e8f9\", 400: \"#22d3ee\", 500: \"#06b6d4\", 600: \"#0891b2\", 700: \"#0e7490\", 800: \"#155e75\", 900: \"#164e63\" }, sky: { 50: \"#f0f9ff\", 100: \"#e0f2fe\", 200: \"#bae6fd\", 300: \"#7dd3fc\", 400: \"#38bdf8\", 500: \"#0ea5e9\", 600: \"#0284c7\", 700: \"#0369a1\", 800: \"#075985\", 900: \"#0c4a6e\" }, blue: { 50: \"#eff6ff\", 100: \"#dbeafe\", 200: \"#bfdbfe\", 300: \"#93c5fd\", 400: \"#60a5fa\", 500: \"#3b82f6\", 600: \"#2563eb\", 700: \"#1d4ed8\", 800: \"#1e40af\", 900: \"#1e3a8a\" }, indigo: { 50: \"#eef2ff\", 100: \"#e0e7ff\", 200: \"#c7d2fe\", 300: \"#a5b4fc\", 400: \"#818cf8\", 500: \"#6366f1\", 600: \"#4f46e5\", 700: \"#4338ca\", 800: \"#3730a3\", 900: \"#312e81\" }, violet: { 50: \"#f5f3ff\", 100: \"#ede9fe\", 200: \"#ddd6fe\", 300: \"#c4b5fd\", 400: \"#a78bfa\", 500: \"#8b5cf6\", 600: \"#7c3aed\", 700: \"#6d28d9\", 800: \"#5b21b6\", 900: \"#4c1d95\" }, purple: { 50: \"#faf5ff\", 100: \"#f3e8ff\", 200: \"#e9d5ff\", 300: \"#d8b4fe\", 400: \"#c084fc\", 500: \"#a855f7\", 600: \"#9333ea\", 700: \"#7e22ce\", 800: \"#6b21a8\", 900: \"#581c87\" }, fuchsia: { 50: \"#fdf4ff\", 100: \"#fae8ff\", 200: \"#f5d0fe\", 300: \"#f0abfc\", 400: \"#e879f9\", 500: \"#d946ef\", 600: \"#c026d3\", 700: \"#a21caf\", 800: \"#86198f\", 900: \"#701a75\" }, pink: { 50: \"#fdf2f8\", 100: \"#fce7f3\", 200: \"#fbcfe8\", 300: \"#f9a8d4\", 400: \"#f472b6\", 500: \"#ec4899\", 600: \"#db2777\", 700: \"#be185d\", 800: \"#9d174d\", 900: \"#831843\" }, rose: { 50: \"#fff1f2\", 100: \"#ffe4e6\", 200: \"#fecdd3\", 300: \"#fda4af\", 400: \"#fb7185\", 500: \"#f43f5e\", 600: \"#e11d48\", 700: \"#be123c\", 800: \"#9f1239\", 900: \"#881337\" }, get lightBlue() {\n    return Vt({ version: \"v2.2\", from: \"lightBlue\", to: \"sky\" }), this.sky;\n  }, get warmGray() {\n    return Vt({ version: \"v3.0\", from: \"warmGray\", to: \"stone\" }), this.stone;\n  }, get trueGray() {\n    return Vt({ version: \"v3.0\", from: \"trueGray\", to: \"neutral\" }), this.neutral;\n  }, get coolGray() {\n    return Vt({ version: \"v3.0\", from: \"coolGray\", to: \"gray\" }), this.gray;\n  }, get blueGray() {\n    return Vt({ version: \"v3.0\", from: \"blueGray\", to: \"slate\" }), this.slate;\n  } };\n});\nvar Yu = P((ri) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(ri, \"__esModule\", { value: true });\n  Object.defineProperty(ri, \"defaults\", { enumerable: true, get: () => Zf });\n  function Zf(e, ...t) {\n    for (let i of t) {\n      for (let o in i) {\n        var n;\n        !(e == null || (n = e.hasOwnProperty) === null || n === void 0) && n.call(e, o) || (e[o] = i[o]);\n      }\n      for (let o of Object.getOwnPropertySymbols(i)) {\n        var r;\n        !(e == null || (r = e.hasOwnProperty) === null || r === void 0) && r.call(e, o) || (e[o] = i[o]);\n      }\n    }\n    return e;\n  }\n});\nvar Xu = P((ni) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(ni, \"__esModule\", { value: true });\n  Object.defineProperty(ni, \"toPath\", { enumerable: true, get: () => ec2 });\n  function ec2(e) {\n    if (Array.isArray(e))\n      return e;\n    let t = e.split(\"[\").length - 1, n = e.split(\"]\").length - 1;\n    if (t !== n)\n      throw new Error(`Path is invalid. Has unbalanced brackets: ${e}`);\n    return e.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n  }\n});\nvar Ku = P((ii) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(ii, \"__esModule\", { value: true });\n  Object.defineProperty(ii, \"normalizeConfig\", { enumerable: true, get: () => rc });\n  var Yt = tc((Zr(), Mr(Jr)));\n  function Qu(e) {\n    if (typeof WeakMap != \"function\")\n      return null;\n    var t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();\n    return (Qu = function(r) {\n      return r ? n : t;\n    })(e);\n  }\n  function tc(e, t) {\n    if (!t && e && e.__esModule)\n      return e;\n    if (e === null || typeof e != \"object\" && typeof e != \"function\")\n      return { default: e };\n    var n = Qu(t);\n    if (n && n.has(e))\n      return n.get(e);\n    var r = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var o in e)\n      if (o !== \"default\" && Object.prototype.hasOwnProperty.call(e, o)) {\n        var u = i ? Object.getOwnPropertyDescriptor(e, o) : null;\n        u && (u.get || u.set) ? Object.defineProperty(r, o, u) : r[o] = e[o];\n      }\n    return r.default = e, n && n.set(e, r), r;\n  }\n  function rc(e) {\n    if ((() => {\n      if (e.purge || !e.content || !Array.isArray(e.content) && !(typeof e.content == \"object\" && e.content !== null))\n        return false;\n      if (Array.isArray(e.content))\n        return e.content.every((r) => typeof r == \"string\" ? true : !(typeof (r == null ? void 0 : r.raw) != \"string\" || (r == null ? void 0 : r.extension) && typeof (r == null ? void 0 : r.extension) != \"string\"));\n      if (typeof e.content == \"object\" && e.content !== null) {\n        if (Object.keys(e.content).some((r) => ![\"files\", \"extract\", \"transform\"].includes(r)))\n          return false;\n        if (Array.isArray(e.content.files)) {\n          if (!e.content.files.every((r) => typeof r == \"string\" ? true : !(typeof (r == null ? void 0 : r.raw) != \"string\" || (r == null ? void 0 : r.extension) && typeof (r == null ? void 0 : r.extension) != \"string\")))\n            return false;\n          if (typeof e.content.extract == \"object\") {\n            for (let r of Object.values(e.content.extract))\n              if (typeof r != \"function\")\n                return false;\n          } else if (!(e.content.extract === void 0 || typeof e.content.extract == \"function\"))\n            return false;\n          if (typeof e.content.transform == \"object\") {\n            for (let r of Object.values(e.content.transform))\n              if (typeof r != \"function\")\n                return false;\n          } else if (!(e.content.transform === void 0 || typeof e.content.transform == \"function\"))\n            return false;\n        }\n        return true;\n      }\n      return false;\n    })() || Yt.default.warn(\"purge-deprecation\", [\"The `purge`/`content` options have changed in Tailwind CSS v3.0.\", \"Update your configuration file to eliminate this warning.\", \"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\"]), e.safelist = (() => {\n      var r;\n      let { content: i, purge: o, safelist: u } = e;\n      return Array.isArray(u) ? u : Array.isArray(i == null ? void 0 : i.safelist) ? i.safelist : Array.isArray(o == null ? void 0 : o.safelist) ? o.safelist : Array.isArray(o == null || (r = o.options) === null || r === void 0 ? void 0 : r.safelist) ? o.options.safelist : [];\n    })(), typeof e.prefix == \"function\")\n      Yt.default.warn(\"prefix-function\", [\"As of Tailwind CSS v3.0, `prefix` cannot be a function.\", \"Update `prefix` in your configuration to be a string to eliminate this warning.\", \"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\"]), e.prefix = \"\";\n    else {\n      var n;\n      e.prefix = (n = e.prefix) !== null && n !== void 0 ? n : \"\";\n    }\n    e.content = { files: (() => {\n      let { content: r, purge: i } = e;\n      return Array.isArray(i) ? i : Array.isArray(i == null ? void 0 : i.content) ? i.content : Array.isArray(r) ? r : Array.isArray(r == null ? void 0 : r.content) ? r.content : Array.isArray(r == null ? void 0 : r.files) ? r.files : [];\n    })(), extract: (() => {\n      let r = (() => {\n        var u, s, a, l, f, d, h, m, p, D;\n        return !((u = e.purge) === null || u === void 0) && u.extract ? e.purge.extract : !((s = e.content) === null || s === void 0) && s.extract ? e.content.extract : !((a = e.purge) === null || a === void 0 || (l = a.extract) === null || l === void 0) && l.DEFAULT ? e.purge.extract.DEFAULT : !((f = e.content) === null || f === void 0 || (d = f.extract) === null || d === void 0) && d.DEFAULT ? e.content.extract.DEFAULT : !((h = e.purge) === null || h === void 0 || (m = h.options) === null || m === void 0) && m.extractors ? e.purge.options.extractors : !((p = e.content) === null || p === void 0 || (D = p.options) === null || D === void 0) && D.extractors ? e.content.options.extractors : {};\n      })(), i = {}, o = (() => {\n        var u, s, a, l;\n        if (!((u = e.purge) === null || u === void 0 || (s = u.options) === null || s === void 0) && s.defaultExtractor)\n          return e.purge.options.defaultExtractor;\n        if (!((a = e.content) === null || a === void 0 || (l = a.options) === null || l === void 0) && l.defaultExtractor)\n          return e.content.options.defaultExtractor;\n      })();\n      if (o !== void 0 && (i.DEFAULT = o), typeof r == \"function\")\n        i.DEFAULT = r;\n      else if (Array.isArray(r))\n        for (let { extensions: u, extractor: s } of r ?? [])\n          for (let a of u)\n            i[a] = s;\n      else\n        typeof r == \"object\" && r !== null && Object.assign(i, r);\n      return i;\n    })(), transform: (() => {\n      let r = (() => {\n        var o, u, s, a, l, f;\n        return !((o = e.purge) === null || o === void 0) && o.transform ? e.purge.transform : !((u = e.content) === null || u === void 0) && u.transform ? e.content.transform : !((s = e.purge) === null || s === void 0 || (a = s.transform) === null || a === void 0) && a.DEFAULT ? e.purge.transform.DEFAULT : !((l = e.content) === null || l === void 0 || (f = l.transform) === null || f === void 0) && f.DEFAULT ? e.content.transform.DEFAULT : {};\n      })(), i = {};\n      return typeof r == \"function\" && (i.DEFAULT = r), typeof r == \"object\" && r !== null && Object.assign(i, r), i;\n    })() };\n    for (let r of e.content.files)\n      if (typeof r == \"string\" && /{([^,]*?)}/g.test(r)) {\n        Yt.default.warn(\"invalid-glob-braces\", [`The glob pattern ${(0, Yt.dim)(r)} in your Tailwind CSS configuration is invalid.`, `Update it to ${(0, Yt.dim)(r.replace(/{([^,]*?)}/g, \"$1\"))} to silence this warning.`]);\n        break;\n      }\n    return e;\n  }\n});\nvar Ju = P((oi) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(oi, \"__esModule\", { value: true });\n  Object.defineProperty(oi, \"default\", { enumerable: true, get: () => nc });\n  function nc(e) {\n    if (Object.prototype.toString.call(e) !== \"[object Object]\")\n      return false;\n    let t = Object.getPrototypeOf(e);\n    return t === null || t === Object.prototype;\n  }\n});\nvar Zu = P((si) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(si, \"__esModule\", { value: true });\n  Object.defineProperty(si, \"cloneDeep\", { enumerable: true, get: () => ui });\n  function ui(e) {\n    return Array.isArray(e) ? e.map((t) => ui(t)) : typeof e == \"object\" && e !== null ? Object.fromEntries(Object.entries(e).map(([t, n]) => [t, ui(n)])) : e;\n  }\n});\nvar ai = P((en, es) => {\n  \"use strict\";\n  c();\n  en.__esModule = true;\n  en.default = uc;\n  function ic(e) {\n    for (var t = e.toLowerCase(), n = \"\", r = false, i = 0; i < 6 && t[i] !== void 0; i++) {\n      var o = t.charCodeAt(i), u = o >= 97 && o <= 102 || o >= 48 && o <= 57;\n      if (r = o === 32, !u)\n        break;\n      n += t[i];\n    }\n    if (n.length !== 0) {\n      var s = parseInt(n, 16), a = s >= 55296 && s <= 57343;\n      return a || s === 0 || s > 1114111 ? [\"\\uFFFD\", n.length + (r ? 1 : 0)] : [String.fromCodePoint(s), n.length + (r ? 1 : 0)];\n    }\n  }\n  var oc = /\\\\/;\n  function uc(e) {\n    var t = oc.test(e);\n    if (!t)\n      return e;\n    for (var n = \"\", r = 0; r < e.length; r++) {\n      if (e[r] === \"\\\\\") {\n        var i = ic(e.slice(r + 1, r + 7));\n        if (i !== void 0) {\n          n += i[0], r += i[1];\n          continue;\n        }\n        if (e[r + 1] === \"\\\\\") {\n          n += \"\\\\\", r++;\n          continue;\n        }\n        e.length === r + 1 && (n += e[r]);\n        continue;\n      }\n      n += e[r];\n    }\n    return n;\n  }\n  es.exports = en.default;\n});\nvar rs = P((tn, ts) => {\n  \"use strict\";\n  c();\n  tn.__esModule = true;\n  tn.default = sc;\n  function sc(e) {\n    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)\n      n[r - 1] = arguments[r];\n    for (; n.length > 0; ) {\n      var i = n.shift();\n      if (!e[i])\n        return;\n      e = e[i];\n    }\n    return e;\n  }\n  ts.exports = tn.default;\n});\nvar is = P((rn, ns) => {\n  \"use strict\";\n  c();\n  rn.__esModule = true;\n  rn.default = ac;\n  function ac(e) {\n    for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)\n      n[r - 1] = arguments[r];\n    for (; n.length > 0; ) {\n      var i = n.shift();\n      e[i] || (e[i] = {}), e = e[i];\n    }\n  }\n  ns.exports = rn.default;\n});\nvar us = P((nn, os) => {\n  \"use strict\";\n  c();\n  nn.__esModule = true;\n  nn.default = lc;\n  function lc(e) {\n    for (var t = \"\", n = e.indexOf(\"/*\"), r = 0; n >= 0; ) {\n      t = t + e.slice(r, n);\n      var i = e.indexOf(\"*/\", n + 2);\n      if (i < 0)\n        return t;\n      r = i + 2, n = e.indexOf(\"/*\", r);\n    }\n    return t = t + e.slice(r), t;\n  }\n  os.exports = nn.default;\n});\nvar Xt = P((We) => {\n  \"use strict\";\n  c();\n  We.__esModule = true;\n  We.stripComments = We.ensureObject = We.getProp = We.unesc = void 0;\n  var fc = on(ai());\n  We.unesc = fc.default;\n  var cc = on(rs());\n  We.getProp = cc.default;\n  var dc = on(is());\n  We.ensureObject = dc.default;\n  var pc = on(us());\n  We.stripComments = pc.default;\n  function on(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n});\nvar je = P((Qt, ls) => {\n  \"use strict\";\n  c();\n  Qt.__esModule = true;\n  Qt.default = void 0;\n  var ss = Xt();\n  function as(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n    }\n  }\n  function hc(e, t, n) {\n    return t && as(e.prototype, t), n && as(e, n), e;\n  }\n  var mc = function e(t, n) {\n    if (typeof t != \"object\" || t === null)\n      return t;\n    var r = new t.constructor();\n    for (var i in t)\n      if (!!t.hasOwnProperty(i)) {\n        var o = t[i], u = typeof o;\n        i === \"parent\" && u === \"object\" ? n && (r[i] = n) : o instanceof Array ? r[i] = o.map(function(s) {\n          return e(s, r);\n        }) : r[i] = e(o, r);\n      }\n    return r;\n  }, Dc = function() {\n    function e(n) {\n      n === void 0 && (n = {}), Object.assign(this, n), this.spaces = this.spaces || {}, this.spaces.before = this.spaces.before || \"\", this.spaces.after = this.spaces.after || \"\";\n    }\n    var t = e.prototype;\n    return t.remove = function() {\n      return this.parent && this.parent.removeChild(this), this.parent = void 0, this;\n    }, t.replaceWith = function() {\n      if (this.parent) {\n        for (var r in arguments)\n          this.parent.insertBefore(this, arguments[r]);\n        this.remove();\n      }\n      return this;\n    }, t.next = function() {\n      return this.parent.at(this.parent.index(this) + 1);\n    }, t.prev = function() {\n      return this.parent.at(this.parent.index(this) - 1);\n    }, t.clone = function(r) {\n      r === void 0 && (r = {});\n      var i = mc(this);\n      for (var o in r)\n        i[o] = r[o];\n      return i;\n    }, t.appendToPropertyAndEscape = function(r, i, o) {\n      this.raws || (this.raws = {});\n      var u = this[r], s = this.raws[r];\n      this[r] = u + i, s || o !== i ? this.raws[r] = (s || u) + o : delete this.raws[r];\n    }, t.setPropertyAndEscape = function(r, i, o) {\n      this.raws || (this.raws = {}), this[r] = i, this.raws[r] = o;\n    }, t.setPropertyWithoutEscape = function(r, i) {\n      this[r] = i, this.raws && delete this.raws[r];\n    }, t.isAtPosition = function(r, i) {\n      if (this.source && this.source.start && this.source.end)\n        return !(this.source.start.line > r || this.source.end.line < r || this.source.start.line === r && this.source.start.column > i || this.source.end.line === r && this.source.end.column < i);\n    }, t.stringifyProperty = function(r) {\n      return this.raws && this.raws[r] || this[r];\n    }, t.valueToString = function() {\n      return String(this.stringifyProperty(\"value\"));\n    }, t.toString = function() {\n      return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join(\"\");\n    }, hc(e, [{ key: \"rawSpaceBefore\", get: function() {\n      var r = this.raws && this.raws.spaces && this.raws.spaces.before;\n      return r === void 0 && (r = this.spaces && this.spaces.before), r || \"\";\n    }, set: function(r) {\n      (0, ss.ensureObject)(this, \"raws\", \"spaces\"), this.raws.spaces.before = r;\n    } }, { key: \"rawSpaceAfter\", get: function() {\n      var r = this.raws && this.raws.spaces && this.raws.spaces.after;\n      return r === void 0 && (r = this.spaces.after), r || \"\";\n    }, set: function(r) {\n      (0, ss.ensureObject)(this, \"raws\", \"spaces\"), this.raws.spaces.after = r;\n    } }]), e;\n  }();\n  Qt.default = Dc;\n  ls.exports = Qt.default;\n});\nvar ge = P((ee) => {\n  \"use strict\";\n  c();\n  ee.__esModule = true;\n  ee.UNIVERSAL = ee.ATTRIBUTE = ee.CLASS = ee.COMBINATOR = ee.COMMENT = ee.ID = ee.NESTING = ee.PSEUDO = ee.ROOT = ee.SELECTOR = ee.STRING = ee.TAG = void 0;\n  var gc = \"tag\";\n  ee.TAG = gc;\n  var bc = \"string\";\n  ee.STRING = bc;\n  var vc = \"selector\";\n  ee.SELECTOR = vc;\n  var yc = \"root\";\n  ee.ROOT = yc;\n  var xc = \"pseudo\";\n  ee.PSEUDO = xc;\n  var Fc = \"nesting\";\n  ee.NESTING = Fc;\n  var wc = \"id\";\n  ee.ID = wc;\n  var Ec = \"comment\";\n  ee.COMMENT = Ec;\n  var Cc = \"combinator\";\n  ee.COMBINATOR = Cc;\n  var _c = \"class\";\n  ee.CLASS = _c;\n  var Sc = \"attribute\";\n  ee.ATTRIBUTE = Sc;\n  var kc = \"universal\";\n  ee.UNIVERSAL = kc;\n});\nvar un = P((Kt, ps) => {\n  \"use strict\";\n  c();\n  Kt.__esModule = true;\n  Kt.default = void 0;\n  var Tc = Oc(je()), He = Ac(ge());\n  function ds() {\n    if (typeof WeakMap != \"function\")\n      return null;\n    var e = /* @__PURE__ */ new WeakMap();\n    return ds = function() {\n      return e;\n    }, e;\n  }\n  function Ac(e) {\n    if (e && e.__esModule)\n      return e;\n    if (e === null || typeof e != \"object\" && typeof e != \"function\")\n      return { default: e };\n    var t = ds();\n    if (t && t.has(e))\n      return t.get(e);\n    var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var i in e)\n      if (Object.prototype.hasOwnProperty.call(e, i)) {\n        var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n        o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n      }\n    return n.default = e, t && t.set(e, n), n;\n  }\n  function Oc(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Pc(e, t) {\n    var n;\n    if (typeof Symbol > \"u\" || e[Symbol.iterator] == null) {\n      if (Array.isArray(e) || (n = Ic(e)) || t && e && typeof e.length == \"number\") {\n        n && (e = n);\n        var r = 0;\n        return function() {\n          return r >= e.length ? { done: true } : { done: false, value: e[r++] };\n        };\n      }\n      throw new TypeError(`Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);\n    }\n    return n = e[Symbol.iterator](), n.next.bind(n);\n  }\n  function Ic(e, t) {\n    if (!!e) {\n      if (typeof e == \"string\")\n        return fs2(e, t);\n      var n = Object.prototype.toString.call(e).slice(8, -1);\n      if (n === \"Object\" && e.constructor && (n = e.constructor.name), n === \"Map\" || n === \"Set\")\n        return Array.from(e);\n      if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n        return fs2(e, t);\n    }\n  }\n  function fs2(e, t) {\n    (t == null || t > e.length) && (t = e.length);\n    for (var n = 0, r = new Array(t); n < t; n++)\n      r[n] = e[n];\n    return r;\n  }\n  function cs(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n    }\n  }\n  function Bc(e, t, n) {\n    return t && cs(e.prototype, t), n && cs(e, n), e;\n  }\n  function Rc(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, li(e, t);\n  }\n  function li(e, t) {\n    return li = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, li(e, t);\n  }\n  var Lc = function(e) {\n    Rc(t, e);\n    function t(r) {\n      var i;\n      return i = e.call(this, r) || this, i.nodes || (i.nodes = []), i;\n    }\n    var n = t.prototype;\n    return n.append = function(i) {\n      return i.parent = this, this.nodes.push(i), this;\n    }, n.prepend = function(i) {\n      return i.parent = this, this.nodes.unshift(i), this;\n    }, n.at = function(i) {\n      return this.nodes[i];\n    }, n.index = function(i) {\n      return typeof i == \"number\" ? i : this.nodes.indexOf(i);\n    }, n.removeChild = function(i) {\n      i = this.index(i), this.at(i).parent = void 0, this.nodes.splice(i, 1);\n      var o;\n      for (var u in this.indexes)\n        o = this.indexes[u], o >= i && (this.indexes[u] = o - 1);\n      return this;\n    }, n.removeAll = function() {\n      for (var i = Pc(this.nodes), o; !(o = i()).done; ) {\n        var u = o.value;\n        u.parent = void 0;\n      }\n      return this.nodes = [], this;\n    }, n.empty = function() {\n      return this.removeAll();\n    }, n.insertAfter = function(i, o) {\n      o.parent = this;\n      var u = this.index(i);\n      this.nodes.splice(u + 1, 0, o), o.parent = this;\n      var s;\n      for (var a in this.indexes)\n        s = this.indexes[a], u <= s && (this.indexes[a] = s + 1);\n      return this;\n    }, n.insertBefore = function(i, o) {\n      o.parent = this;\n      var u = this.index(i);\n      this.nodes.splice(u, 0, o), o.parent = this;\n      var s;\n      for (var a in this.indexes)\n        s = this.indexes[a], s <= u && (this.indexes[a] = s + 1);\n      return this;\n    }, n._findChildAtPosition = function(i, o) {\n      var u = void 0;\n      return this.each(function(s) {\n        if (s.atPosition) {\n          var a = s.atPosition(i, o);\n          if (a)\n            return u = a, false;\n        } else if (s.isAtPosition(i, o))\n          return u = s, false;\n      }), u;\n    }, n.atPosition = function(i, o) {\n      if (this.isAtPosition(i, o))\n        return this._findChildAtPosition(i, o) || this;\n    }, n._inferEndPosition = function() {\n      this.last && this.last.source && this.last.source.end && (this.source = this.source || {}, this.source.end = this.source.end || {}, Object.assign(this.source.end, this.last.source.end));\n    }, n.each = function(i) {\n      this.lastEach || (this.lastEach = 0), this.indexes || (this.indexes = {}), this.lastEach++;\n      var o = this.lastEach;\n      if (this.indexes[o] = 0, !!this.length) {\n        for (var u, s; this.indexes[o] < this.length && (u = this.indexes[o], s = i(this.at(u), u), s !== false); )\n          this.indexes[o] += 1;\n        if (delete this.indexes[o], s === false)\n          return false;\n      }\n    }, n.walk = function(i) {\n      return this.each(function(o, u) {\n        var s = i(o, u);\n        if (s !== false && o.length && (s = o.walk(i)), s === false)\n          return false;\n      });\n    }, n.walkAttributes = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.ATTRIBUTE)\n          return i.call(o, u);\n      });\n    }, n.walkClasses = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.CLASS)\n          return i.call(o, u);\n      });\n    }, n.walkCombinators = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.COMBINATOR)\n          return i.call(o, u);\n      });\n    }, n.walkComments = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.COMMENT)\n          return i.call(o, u);\n      });\n    }, n.walkIds = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.ID)\n          return i.call(o, u);\n      });\n    }, n.walkNesting = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.NESTING)\n          return i.call(o, u);\n      });\n    }, n.walkPseudos = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.PSEUDO)\n          return i.call(o, u);\n      });\n    }, n.walkTags = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.TAG)\n          return i.call(o, u);\n      });\n    }, n.walkUniversals = function(i) {\n      var o = this;\n      return this.walk(function(u) {\n        if (u.type === He.UNIVERSAL)\n          return i.call(o, u);\n      });\n    }, n.split = function(i) {\n      var o = this, u = [];\n      return this.reduce(function(s, a, l) {\n        var f = i.call(o, a);\n        return u.push(a), f ? (s.push(u), u = []) : l === o.length - 1 && s.push(u), s;\n      }, []);\n    }, n.map = function(i) {\n      return this.nodes.map(i);\n    }, n.reduce = function(i, o) {\n      return this.nodes.reduce(i, o);\n    }, n.every = function(i) {\n      return this.nodes.every(i);\n    }, n.some = function(i) {\n      return this.nodes.some(i);\n    }, n.filter = function(i) {\n      return this.nodes.filter(i);\n    }, n.sort = function(i) {\n      return this.nodes.sort(i);\n    }, n.toString = function() {\n      return this.map(String).join(\"\");\n    }, Bc(t, [{ key: \"first\", get: function() {\n      return this.at(0);\n    } }, { key: \"last\", get: function() {\n      return this.at(this.length - 1);\n    } }, { key: \"length\", get: function() {\n      return this.nodes.length;\n    } }]), t;\n  }(Tc.default);\n  Kt.default = Lc;\n  ps.exports = Kt.default;\n});\nvar ci = P((Jt, ms) => {\n  \"use strict\";\n  c();\n  Jt.__esModule = true;\n  Jt.default = void 0;\n  var Mc = $c(un()), Nc = ge();\n  function $c(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function hs(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n    }\n  }\n  function Wc(e, t, n) {\n    return t && hs(e.prototype, t), n && hs(e, n), e;\n  }\n  function qc(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, fi(e, t);\n  }\n  function fi(e, t) {\n    return fi = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, fi(e, t);\n  }\n  var Uc = function(e) {\n    qc(t, e);\n    function t(r) {\n      var i;\n      return i = e.call(this, r) || this, i.type = Nc.ROOT, i;\n    }\n    var n = t.prototype;\n    return n.toString = function() {\n      var i = this.reduce(function(o, u) {\n        return o.push(String(u)), o;\n      }, []).join(\",\");\n      return this.trailingComma ? i + \",\" : i;\n    }, n.error = function(i, o) {\n      return this._error ? this._error(i, o) : new Error(i);\n    }, Wc(t, [{ key: \"errorGenerator\", set: function(i) {\n      this._error = i;\n    } }]), t;\n  }(Mc.default);\n  Jt.default = Uc;\n  ms.exports = Jt.default;\n});\nvar pi = P((Zt, Ds) => {\n  \"use strict\";\n  c();\n  Zt.__esModule = true;\n  Zt.default = void 0;\n  var zc = jc(un()), Gc = ge();\n  function jc(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Hc(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, di(e, t);\n  }\n  function di(e, t) {\n    return di = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, di(e, t);\n  }\n  var Vc = function(e) {\n    Hc(t, e);\n    function t(n) {\n      var r;\n      return r = e.call(this, n) || this, r.type = Gc.SELECTOR, r;\n    }\n    return t;\n  }(zc.default);\n  Zt.default = Vc;\n  Ds.exports = Zt.default;\n});\nvar sn = P((fb, gs) => {\n  \"use strict\";\n  c();\n  var Yc = {}, Xc = Yc.hasOwnProperty, Qc = function(t, n) {\n    if (!t)\n      return n;\n    var r = {};\n    for (var i in n)\n      r[i] = Xc.call(t, i) ? t[i] : n[i];\n    return r;\n  }, Kc = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/, Jc = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/, Zc = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g, hi = function e(t, n) {\n    n = Qc(n, e.options), n.quotes != \"single\" && n.quotes != \"double\" && (n.quotes = \"single\");\n    for (var r = n.quotes == \"double\" ? '\"' : \"'\", i = n.isIdentifier, o = t.charAt(0), u = \"\", s = 0, a = t.length; s < a; ) {\n      var l = t.charAt(s++), f = l.charCodeAt(), d = void 0;\n      if (f < 32 || f > 126) {\n        if (f >= 55296 && f <= 56319 && s < a) {\n          var h = t.charCodeAt(s++);\n          (h & 64512) == 56320 ? f = ((f & 1023) << 10) + (h & 1023) + 65536 : s--;\n        }\n        d = \"\\\\\" + f.toString(16).toUpperCase() + \" \";\n      } else\n        n.escapeEverything ? Kc.test(l) ? d = \"\\\\\" + l : d = \"\\\\\" + f.toString(16).toUpperCase() + \" \" : /[\\t\\n\\f\\r\\x0B]/.test(l) ? d = \"\\\\\" + f.toString(16).toUpperCase() + \" \" : l == \"\\\\\" || !i && (l == '\"' && r == l || l == \"'\" && r == l) || i && Jc.test(l) ? d = \"\\\\\" + l : d = l;\n      u += d;\n    }\n    return i && (/^-[-\\d]/.test(u) ? u = \"\\\\-\" + u.slice(1) : /\\d/.test(o) && (u = \"\\\\3\" + o + \" \" + u.slice(1))), u = u.replace(Zc, function(m, p, D) {\n      return p && p.length % 2 ? m : (p || \"\") + D;\n    }), !i && n.wrap ? r + u + r : u;\n  };\n  hi.options = { escapeEverything: false, isIdentifier: false, quotes: \"single\", wrap: false };\n  hi.version = \"3.0.0\";\n  gs.exports = hi;\n});\nvar Di = P((er, ys) => {\n  \"use strict\";\n  c();\n  er.__esModule = true;\n  er.default = void 0;\n  var ed = vs(sn()), td2 = Xt(), rd = vs(je()), nd = ge();\n  function vs(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function bs(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n    }\n  }\n  function id(e, t, n) {\n    return t && bs(e.prototype, t), n && bs(e, n), e;\n  }\n  function od(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, mi(e, t);\n  }\n  function mi(e, t) {\n    return mi = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, mi(e, t);\n  }\n  var ud = function(e) {\n    od(t, e);\n    function t(r) {\n      var i;\n      return i = e.call(this, r) || this, i.type = nd.CLASS, i._constructed = true, i;\n    }\n    var n = t.prototype;\n    return n.valueToString = function() {\n      return \".\" + e.prototype.valueToString.call(this);\n    }, id(t, [{ key: \"value\", get: function() {\n      return this._value;\n    }, set: function(i) {\n      if (this._constructed) {\n        var o = (0, ed.default)(i, { isIdentifier: true });\n        o !== i ? ((0, td2.ensureObject)(this, \"raws\"), this.raws.value = o) : this.raws && delete this.raws.value;\n      }\n      this._value = i;\n    } }]), t;\n  }(rd.default);\n  er.default = ud;\n  ys.exports = er.default;\n});\nvar bi = P((tr, xs) => {\n  \"use strict\";\n  c();\n  tr.__esModule = true;\n  tr.default = void 0;\n  var sd = ld(je()), ad = ge();\n  function ld(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function fd2(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, gi(e, t);\n  }\n  function gi(e, t) {\n    return gi = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, gi(e, t);\n  }\n  var cd = function(e) {\n    fd2(t, e);\n    function t(n) {\n      var r;\n      return r = e.call(this, n) || this, r.type = ad.COMMENT, r;\n    }\n    return t;\n  }(sd.default);\n  tr.default = cd;\n  xs.exports = tr.default;\n});\nvar yi = P((rr, Fs) => {\n  \"use strict\";\n  c();\n  rr.__esModule = true;\n  rr.default = void 0;\n  var dd = hd(je()), pd = ge();\n  function hd(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function md(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, vi(e, t);\n  }\n  function vi(e, t) {\n    return vi = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, vi(e, t);\n  }\n  var Dd = function(e) {\n    md(t, e);\n    function t(r) {\n      var i;\n      return i = e.call(this, r) || this, i.type = pd.ID, i;\n    }\n    var n = t.prototype;\n    return n.valueToString = function() {\n      return \"#\" + e.prototype.valueToString.call(this);\n    }, t;\n  }(dd.default);\n  rr.default = Dd;\n  Fs.exports = rr.default;\n});\nvar an = P((nr, Cs) => {\n  \"use strict\";\n  c();\n  nr.__esModule = true;\n  nr.default = void 0;\n  var gd = Es(sn()), bd = Xt(), vd = Es(je());\n  function Es(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function ws(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n    }\n  }\n  function yd(e, t, n) {\n    return t && ws(e.prototype, t), n && ws(e, n), e;\n  }\n  function xd(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, xi(e, t);\n  }\n  function xi(e, t) {\n    return xi = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, xi(e, t);\n  }\n  var Fd = function(e) {\n    xd(t, e);\n    function t() {\n      return e.apply(this, arguments) || this;\n    }\n    var n = t.prototype;\n    return n.qualifiedName = function(i) {\n      return this.namespace ? this.namespaceString + \"|\" + i : i;\n    }, n.valueToString = function() {\n      return this.qualifiedName(e.prototype.valueToString.call(this));\n    }, yd(t, [{ key: \"namespace\", get: function() {\n      return this._namespace;\n    }, set: function(i) {\n      if (i === true || i === \"*\" || i === \"&\") {\n        this._namespace = i, this.raws && delete this.raws.namespace;\n        return;\n      }\n      var o = (0, gd.default)(i, { isIdentifier: true });\n      this._namespace = i, o !== i ? ((0, bd.ensureObject)(this, \"raws\"), this.raws.namespace = o) : this.raws && delete this.raws.namespace;\n    } }, { key: \"ns\", get: function() {\n      return this._namespace;\n    }, set: function(i) {\n      this.namespace = i;\n    } }, { key: \"namespaceString\", get: function() {\n      if (this.namespace) {\n        var i = this.stringifyProperty(\"namespace\");\n        return i === true ? \"\" : i;\n      } else\n        return \"\";\n    } }]), t;\n  }(vd.default);\n  nr.default = Fd;\n  Cs.exports = nr.default;\n});\nvar wi = P((ir, _s) => {\n  \"use strict\";\n  c();\n  ir.__esModule = true;\n  ir.default = void 0;\n  var wd = Cd(an()), Ed = ge();\n  function Cd(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function _d(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Fi(e, t);\n  }\n  function Fi(e, t) {\n    return Fi = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, Fi(e, t);\n  }\n  var Sd = function(e) {\n    _d(t, e);\n    function t(n) {\n      var r;\n      return r = e.call(this, n) || this, r.type = Ed.TAG, r;\n    }\n    return t;\n  }(wd.default);\n  ir.default = Sd;\n  _s.exports = ir.default;\n});\nvar Ci = P((or, Ss) => {\n  \"use strict\";\n  c();\n  or.__esModule = true;\n  or.default = void 0;\n  var kd = Ad(je()), Td = ge();\n  function Ad(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Od(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Ei(e, t);\n  }\n  function Ei(e, t) {\n    return Ei = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, Ei(e, t);\n  }\n  var Pd = function(e) {\n    Od(t, e);\n    function t(n) {\n      var r;\n      return r = e.call(this, n) || this, r.type = Td.STRING, r;\n    }\n    return t;\n  }(kd.default);\n  or.default = Pd;\n  Ss.exports = or.default;\n});\nvar Si = P((ur, ks) => {\n  \"use strict\";\n  c();\n  ur.__esModule = true;\n  ur.default = void 0;\n  var Id = Rd(un()), Bd = ge();\n  function Rd(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Ld(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, _i(e, t);\n  }\n  function _i(e, t) {\n    return _i = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, _i(e, t);\n  }\n  var Md = function(e) {\n    Ld(t, e);\n    function t(r) {\n      var i;\n      return i = e.call(this, r) || this, i.type = Bd.PSEUDO, i;\n    }\n    var n = t.prototype;\n    return n.toString = function() {\n      var i = this.length ? \"(\" + this.map(String).join(\",\") + \")\" : \"\";\n      return [this.rawSpaceBefore, this.stringifyProperty(\"value\"), i, this.rawSpaceAfter].join(\"\");\n    }, t;\n  }(Id.default);\n  ur.default = Md;\n  ks.exports = ur.default;\n});\nvar As = P((cb, Ts) => {\n  c();\n  Ts.exports = function(t, n) {\n    return function(...r) {\n      return console.warn(n), t(...r);\n    };\n  };\n});\nvar Ii = P((lr) => {\n  \"use strict\";\n  c();\n  lr.__esModule = true;\n  lr.unescapeValue = Pi;\n  lr.default = void 0;\n  var sr = Oi(sn()), Nd = Oi(ai()), $d = Oi(an()), Wd = ge(), ki;\n  function Oi(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Os(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n    }\n  }\n  function qd(e, t, n) {\n    return t && Os(e.prototype, t), n && Os(e, n), e;\n  }\n  function Ud(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Ai(e, t);\n  }\n  function Ai(e, t) {\n    return Ai = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, Ai(e, t);\n  }\n  var ar = As(), zd = /^('|\")([^]*)\\1$/, Gd = ar(function() {\n  }, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.\"), jd = ar(function() {\n  }, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\"), Hd = ar(function() {\n  }, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n  function Pi(e) {\n    var t = false, n = null, r = e, i = r.match(zd);\n    return i && (n = i[1], r = i[2]), r = (0, Nd.default)(r), r !== e && (t = true), { deprecatedUsage: t, unescaped: r, quoteMark: n };\n  }\n  function Vd(e) {\n    if (e.quoteMark !== void 0 || e.value === void 0)\n      return e;\n    Hd();\n    var t = Pi(e.value), n = t.quoteMark, r = t.unescaped;\n    return e.raws || (e.raws = {}), e.raws.value === void 0 && (e.raws.value = e.value), e.value = r, e.quoteMark = n, e;\n  }\n  var ln = function(e) {\n    Ud(t, e);\n    function t(r) {\n      var i;\n      return r === void 0 && (r = {}), i = e.call(this, Vd(r)) || this, i.type = Wd.ATTRIBUTE, i.raws = i.raws || {}, Object.defineProperty(i.raws, \"unquoted\", { get: ar(function() {\n        return i.value;\n      }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"), set: ar(function() {\n        return i.value;\n      }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\") }), i._constructed = true, i;\n    }\n    var n = t.prototype;\n    return n.getQuotedValue = function(i) {\n      i === void 0 && (i = {});\n      var o = this._determineQuoteMark(i), u = Ti[o], s = (0, sr.default)(this._value, u);\n      return s;\n    }, n._determineQuoteMark = function(i) {\n      return i.smart ? this.smartQuoteMark(i) : this.preferredQuoteMark(i);\n    }, n.setValue = function(i, o) {\n      o === void 0 && (o = {}), this._value = i, this._quoteMark = this._determineQuoteMark(o), this._syncRawValue();\n    }, n.smartQuoteMark = function(i) {\n      var o = this.value, u = o.replace(/[^']/g, \"\").length, s = o.replace(/[^\"]/g, \"\").length;\n      if (u + s === 0) {\n        var a = (0, sr.default)(o, { isIdentifier: true });\n        if (a === o)\n          return t.NO_QUOTE;\n        var l = this.preferredQuoteMark(i);\n        if (l === t.NO_QUOTE) {\n          var f = this.quoteMark || i.quoteMark || t.DOUBLE_QUOTE, d = Ti[f], h = (0, sr.default)(o, d);\n          if (h.length < a.length)\n            return f;\n        }\n        return l;\n      } else\n        return s === u ? this.preferredQuoteMark(i) : s < u ? t.DOUBLE_QUOTE : t.SINGLE_QUOTE;\n    }, n.preferredQuoteMark = function(i) {\n      var o = i.preferCurrentQuoteMark ? this.quoteMark : i.quoteMark;\n      return o === void 0 && (o = i.preferCurrentQuoteMark ? i.quoteMark : this.quoteMark), o === void 0 && (o = t.DOUBLE_QUOTE), o;\n    }, n._syncRawValue = function() {\n      var i = (0, sr.default)(this._value, Ti[this.quoteMark]);\n      i === this._value ? this.raws && delete this.raws.value : this.raws.value = i;\n    }, n._handleEscapes = function(i, o) {\n      if (this._constructed) {\n        var u = (0, sr.default)(o, { isIdentifier: true });\n        u !== o ? this.raws[i] = u : delete this.raws[i];\n      }\n    }, n._spacesFor = function(i) {\n      var o = { before: \"\", after: \"\" }, u = this.spaces[i] || {}, s = this.raws.spaces && this.raws.spaces[i] || {};\n      return Object.assign(o, u, s);\n    }, n._stringFor = function(i, o, u) {\n      o === void 0 && (o = i), u === void 0 && (u = Ps);\n      var s = this._spacesFor(o);\n      return u(this.stringifyProperty(i), s);\n    }, n.offsetOf = function(i) {\n      var o = 1, u = this._spacesFor(\"attribute\");\n      if (o += u.before.length, i === \"namespace\" || i === \"ns\")\n        return this.namespace ? o : -1;\n      if (i === \"attributeNS\" || (o += this.namespaceString.length, this.namespace && (o += 1), i === \"attribute\"))\n        return o;\n      o += this.stringifyProperty(\"attribute\").length, o += u.after.length;\n      var s = this._spacesFor(\"operator\");\n      o += s.before.length;\n      var a = this.stringifyProperty(\"operator\");\n      if (i === \"operator\")\n        return a ? o : -1;\n      o += a.length, o += s.after.length;\n      var l = this._spacesFor(\"value\");\n      o += l.before.length;\n      var f = this.stringifyProperty(\"value\");\n      if (i === \"value\")\n        return f ? o : -1;\n      o += f.length, o += l.after.length;\n      var d = this._spacesFor(\"insensitive\");\n      return o += d.before.length, i === \"insensitive\" && this.insensitive ? o : -1;\n    }, n.toString = function() {\n      var i = this, o = [this.rawSpaceBefore, \"[\"];\n      return o.push(this._stringFor(\"qualifiedAttribute\", \"attribute\")), this.operator && (this.value || this.value === \"\") && (o.push(this._stringFor(\"operator\")), o.push(this._stringFor(\"value\")), o.push(this._stringFor(\"insensitiveFlag\", \"insensitive\", function(u, s) {\n        return u.length > 0 && !i.quoted && s.before.length === 0 && !(i.spaces.value && i.spaces.value.after) && (s.before = \" \"), Ps(u, s);\n      }))), o.push(\"]\"), o.push(this.rawSpaceAfter), o.join(\"\");\n    }, qd(t, [{ key: \"quoted\", get: function() {\n      var i = this.quoteMark;\n      return i === \"'\" || i === '\"';\n    }, set: function(i) {\n      jd();\n    } }, { key: \"quoteMark\", get: function() {\n      return this._quoteMark;\n    }, set: function(i) {\n      if (!this._constructed) {\n        this._quoteMark = i;\n        return;\n      }\n      this._quoteMark !== i && (this._quoteMark = i, this._syncRawValue());\n    } }, { key: \"qualifiedAttribute\", get: function() {\n      return this.qualifiedName(this.raws.attribute || this.attribute);\n    } }, { key: \"insensitiveFlag\", get: function() {\n      return this.insensitive ? \"i\" : \"\";\n    } }, { key: \"value\", get: function() {\n      return this._value;\n    }, set: function(i) {\n      if (this._constructed) {\n        var o = Pi(i), u = o.deprecatedUsage, s = o.unescaped, a = o.quoteMark;\n        if (u && Gd(), s === this._value && a === this._quoteMark)\n          return;\n        this._value = s, this._quoteMark = a, this._syncRawValue();\n      } else\n        this._value = i;\n    } }, { key: \"attribute\", get: function() {\n      return this._attribute;\n    }, set: function(i) {\n      this._handleEscapes(\"attribute\", i), this._attribute = i;\n    } }]), t;\n  }($d.default);\n  lr.default = ln;\n  ln.NO_QUOTE = null;\n  ln.SINGLE_QUOTE = \"'\";\n  ln.DOUBLE_QUOTE = '\"';\n  var Ti = (ki = { \"'\": { quotes: \"single\", wrap: true }, '\"': { quotes: \"double\", wrap: true } }, ki[null] = { isIdentifier: true }, ki);\n  function Ps(e, t) {\n    return \"\" + t.before + e + t.after;\n  }\n});\nvar Ri = P((fr, Is) => {\n  \"use strict\";\n  c();\n  fr.__esModule = true;\n  fr.default = void 0;\n  var Yd = Qd(an()), Xd = ge();\n  function Qd(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Kd(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Bi(e, t);\n  }\n  function Bi(e, t) {\n    return Bi = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, Bi(e, t);\n  }\n  var Jd = function(e) {\n    Kd(t, e);\n    function t(n) {\n      var r;\n      return r = e.call(this, n) || this, r.type = Xd.UNIVERSAL, r.value = \"*\", r;\n    }\n    return t;\n  }(Yd.default);\n  fr.default = Jd;\n  Is.exports = fr.default;\n});\nvar Mi = P((cr, Bs) => {\n  \"use strict\";\n  c();\n  cr.__esModule = true;\n  cr.default = void 0;\n  var Zd = tp(je()), ep = ge();\n  function tp(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function rp(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Li(e, t);\n  }\n  function Li(e, t) {\n    return Li = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, Li(e, t);\n  }\n  var np = function(e) {\n    rp(t, e);\n    function t(n) {\n      var r;\n      return r = e.call(this, n) || this, r.type = ep.COMBINATOR, r;\n    }\n    return t;\n  }(Zd.default);\n  cr.default = np;\n  Bs.exports = cr.default;\n});\nvar $i = P((dr, Rs) => {\n  \"use strict\";\n  c();\n  dr.__esModule = true;\n  dr.default = void 0;\n  var ip = up(je()), op = ge();\n  function up(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function sp(e, t) {\n    e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Ni(e, t);\n  }\n  function Ni(e, t) {\n    return Ni = Object.setPrototypeOf || function(r, i) {\n      return r.__proto__ = i, r;\n    }, Ni(e, t);\n  }\n  var ap = function(e) {\n    sp(t, e);\n    function t(n) {\n      var r;\n      return r = e.call(this, n) || this, r.type = op.NESTING, r.value = \"&\", r;\n    }\n    return t;\n  }(ip.default);\n  dr.default = ap;\n  Rs.exports = dr.default;\n});\nvar Ms = P((fn, Ls) => {\n  \"use strict\";\n  c();\n  fn.__esModule = true;\n  fn.default = lp;\n  function lp(e) {\n    return e.sort(function(t, n) {\n      return t - n;\n    });\n  }\n  Ls.exports = fn.default;\n});\nvar Wi = P((A) => {\n  \"use strict\";\n  c();\n  A.__esModule = true;\n  A.combinator = A.word = A.comment = A.str = A.tab = A.newline = A.feed = A.cr = A.backslash = A.bang = A.slash = A.doubleQuote = A.singleQuote = A.space = A.greaterThan = A.pipe = A.equals = A.plus = A.caret = A.tilde = A.dollar = A.closeSquare = A.openSquare = A.closeParenthesis = A.openParenthesis = A.semicolon = A.colon = A.comma = A.at = A.asterisk = A.ampersand = void 0;\n  var fp = 38;\n  A.ampersand = fp;\n  var cp = 42;\n  A.asterisk = cp;\n  var dp = 64;\n  A.at = dp;\n  var pp = 44;\n  A.comma = pp;\n  var hp = 58;\n  A.colon = hp;\n  var mp = 59;\n  A.semicolon = mp;\n  var Dp = 40;\n  A.openParenthesis = Dp;\n  var gp = 41;\n  A.closeParenthesis = gp;\n  var bp = 91;\n  A.openSquare = bp;\n  var vp = 93;\n  A.closeSquare = vp;\n  var yp = 36;\n  A.dollar = yp;\n  var xp = 126;\n  A.tilde = xp;\n  var Fp = 94;\n  A.caret = Fp;\n  var wp = 43;\n  A.plus = wp;\n  var Ep = 61;\n  A.equals = Ep;\n  var Cp = 124;\n  A.pipe = Cp;\n  var _p = 62;\n  A.greaterThan = _p;\n  var Sp = 32;\n  A.space = Sp;\n  var Ns = 39;\n  A.singleQuote = Ns;\n  var kp = 34;\n  A.doubleQuote = kp;\n  var Tp = 47;\n  A.slash = Tp;\n  var Ap = 33;\n  A.bang = Ap;\n  var Op = 92;\n  A.backslash = Op;\n  var Pp = 13;\n  A.cr = Pp;\n  var Ip = 12;\n  A.feed = Ip;\n  var Bp = 10;\n  A.newline = Bp;\n  var Rp = 9;\n  A.tab = Rp;\n  var Lp = Ns;\n  A.str = Lp;\n  var Mp = -1;\n  A.comment = Mp;\n  var Np = -2;\n  A.word = Np;\n  var $p = -3;\n  A.combinator = $p;\n});\nvar qs = P((pr) => {\n  \"use strict\";\n  c();\n  pr.__esModule = true;\n  pr.default = Hp;\n  pr.FIELDS = void 0;\n  var S = Wp(Wi()), wt, Z;\n  function Ws() {\n    if (typeof WeakMap != \"function\")\n      return null;\n    var e = /* @__PURE__ */ new WeakMap();\n    return Ws = function() {\n      return e;\n    }, e;\n  }\n  function Wp(e) {\n    if (e && e.__esModule)\n      return e;\n    if (e === null || typeof e != \"object\" && typeof e != \"function\")\n      return { default: e };\n    var t = Ws();\n    if (t && t.has(e))\n      return t.get(e);\n    var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var i in e)\n      if (Object.prototype.hasOwnProperty.call(e, i)) {\n        var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n        o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n      }\n    return n.default = e, t && t.set(e, n), n;\n  }\n  var qp = (wt = {}, wt[S.tab] = true, wt[S.newline] = true, wt[S.cr] = true, wt[S.feed] = true, wt), Up = (Z = {}, Z[S.space] = true, Z[S.tab] = true, Z[S.newline] = true, Z[S.cr] = true, Z[S.feed] = true, Z[S.ampersand] = true, Z[S.asterisk] = true, Z[S.bang] = true, Z[S.comma] = true, Z[S.colon] = true, Z[S.semicolon] = true, Z[S.openParenthesis] = true, Z[S.closeParenthesis] = true, Z[S.openSquare] = true, Z[S.closeSquare] = true, Z[S.singleQuote] = true, Z[S.doubleQuote] = true, Z[S.plus] = true, Z[S.pipe] = true, Z[S.tilde] = true, Z[S.greaterThan] = true, Z[S.equals] = true, Z[S.dollar] = true, Z[S.caret] = true, Z[S.slash] = true, Z), qi = {}, $s = \"0123456789abcdefABCDEF\";\n  for (cn = 0; cn < $s.length; cn++)\n    qi[$s.charCodeAt(cn)] = true;\n  var cn;\n  function zp(e, t) {\n    var n = t, r;\n    do {\n      if (r = e.charCodeAt(n), Up[r])\n        return n - 1;\n      r === S.backslash ? n = Gp(e, n) + 1 : n++;\n    } while (n < e.length);\n    return n - 1;\n  }\n  function Gp(e, t) {\n    var n = t, r = e.charCodeAt(n + 1);\n    if (!qp[r])\n      if (qi[r]) {\n        var i = 0;\n        do\n          n++, i++, r = e.charCodeAt(n + 1);\n        while (qi[r] && i < 6);\n        i < 6 && r === S.space && n++;\n      } else\n        n++;\n    return n;\n  }\n  var jp = { TYPE: 0, START_LINE: 1, START_COL: 2, END_LINE: 3, END_COL: 4, START_POS: 5, END_POS: 6 };\n  pr.FIELDS = jp;\n  function Hp(e) {\n    var t = [], n = e.css.valueOf(), r = n, i = r.length, o = -1, u = 1, s = 0, a = 0, l, f, d, h, m, p, D, F, b, v, E, C, w;\n    function O(R, L) {\n      if (e.safe)\n        n += L, b = n.length - 1;\n      else\n        throw e.error(\"Unclosed \" + R, u, s - o, s);\n    }\n    for (; s < i; ) {\n      switch (l = n.charCodeAt(s), l === S.newline && (o = s, u += 1), l) {\n        case S.space:\n        case S.tab:\n        case S.newline:\n        case S.cr:\n        case S.feed:\n          b = s;\n          do\n            b += 1, l = n.charCodeAt(b), l === S.newline && (o = b, u += 1);\n          while (l === S.space || l === S.newline || l === S.tab || l === S.cr || l === S.feed);\n          w = S.space, h = u, d = b - o - 1, a = b;\n          break;\n        case S.plus:\n        case S.greaterThan:\n        case S.tilde:\n        case S.pipe:\n          b = s;\n          do\n            b += 1, l = n.charCodeAt(b);\n          while (l === S.plus || l === S.greaterThan || l === S.tilde || l === S.pipe);\n          w = S.combinator, h = u, d = s - o, a = b;\n          break;\n        case S.asterisk:\n        case S.ampersand:\n        case S.bang:\n        case S.comma:\n        case S.equals:\n        case S.dollar:\n        case S.caret:\n        case S.openSquare:\n        case S.closeSquare:\n        case S.colon:\n        case S.semicolon:\n        case S.openParenthesis:\n        case S.closeParenthesis:\n          b = s, w = l, h = u, d = s - o, a = b + 1;\n          break;\n        case S.singleQuote:\n        case S.doubleQuote:\n          C = l === S.singleQuote ? \"'\" : '\"', b = s;\n          do\n            for (m = false, b = n.indexOf(C, b + 1), b === -1 && O(\"quote\", C), p = b; n.charCodeAt(p - 1) === S.backslash; )\n              p -= 1, m = !m;\n          while (m);\n          w = S.str, h = u, d = s - o, a = b + 1;\n          break;\n        default:\n          l === S.slash && n.charCodeAt(s + 1) === S.asterisk ? (b = n.indexOf(\"*/\", s + 2) + 1, b === 0 && O(\"comment\", \"*/\"), f = n.slice(s, b + 1), F = f.split(`\n`), D = F.length - 1, D > 0 ? (v = u + D, E = b - F[D].length) : (v = u, E = o), w = S.comment, u = v, h = v, d = b - E) : l === S.slash ? (b = s, w = l, h = u, d = s - o, a = b + 1) : (b = zp(n, s), w = S.word, h = u, d = b - o), a = b + 1;\n          break;\n      }\n      t.push([w, u, s - o, h, d, s, a]), E && (o = E, E = null), s = a;\n    }\n    return t;\n  }\n});\nvar Xs = P((hr, Ys) => {\n  \"use strict\";\n  c();\n  hr.__esModule = true;\n  hr.default = void 0;\n  var Vp = Te(ci()), Ui = Te(pi()), Yp = Te(Di()), Us = Te(bi()), Xp = Te(yi()), Qp = Te(wi()), zi = Te(Ci()), Kp = Te(Si()), zs = dn(Ii()), Jp = Te(Ri()), Gi = Te(Mi()), Zp = Te($i()), e0 = Te(Ms()), _ = dn(qs()), T = dn(Wi()), t0 = dn(ge()), ie = Xt(), at, ji;\n  function Vs() {\n    if (typeof WeakMap != \"function\")\n      return null;\n    var e = /* @__PURE__ */ new WeakMap();\n    return Vs = function() {\n      return e;\n    }, e;\n  }\n  function dn(e) {\n    if (e && e.__esModule)\n      return e;\n    if (e === null || typeof e != \"object\" && typeof e != \"function\")\n      return { default: e };\n    var t = Vs();\n    if (t && t.has(e))\n      return t.get(e);\n    var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var i in e)\n      if (Object.prototype.hasOwnProperty.call(e, i)) {\n        var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n        o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n      }\n    return n.default = e, t && t.set(e, n), n;\n  }\n  function Te(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Gs(e, t) {\n    for (var n = 0; n < t.length; n++) {\n      var r = t[n];\n      r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n    }\n  }\n  function r0(e, t, n) {\n    return t && Gs(e.prototype, t), n && Gs(e, n), e;\n  }\n  var Yi = (at = {}, at[T.space] = true, at[T.cr] = true, at[T.feed] = true, at[T.newline] = true, at[T.tab] = true, at), n0 = Object.assign({}, Yi, (ji = {}, ji[T.comment] = true, ji));\n  function js(e) {\n    return { line: e[_.FIELDS.START_LINE], column: e[_.FIELDS.START_COL] };\n  }\n  function Hs(e) {\n    return { line: e[_.FIELDS.END_LINE], column: e[_.FIELDS.END_COL] };\n  }\n  function lt(e, t, n, r) {\n    return { start: { line: e, column: t }, end: { line: n, column: r } };\n  }\n  function Et(e) {\n    return lt(e[_.FIELDS.START_LINE], e[_.FIELDS.START_COL], e[_.FIELDS.END_LINE], e[_.FIELDS.END_COL]);\n  }\n  function Hi(e, t) {\n    if (!!e)\n      return lt(e[_.FIELDS.START_LINE], e[_.FIELDS.START_COL], t[_.FIELDS.END_LINE], t[_.FIELDS.END_COL]);\n  }\n  function Ct(e, t) {\n    var n = e[t];\n    if (typeof n == \"string\")\n      return n.indexOf(\"\\\\\") !== -1 && ((0, ie.ensureObject)(e, \"raws\"), e[t] = (0, ie.unesc)(n), e.raws[t] === void 0 && (e.raws[t] = n)), e;\n  }\n  function Vi(e, t) {\n    for (var n = -1, r = []; (n = e.indexOf(t, n + 1)) !== -1; )\n      r.push(n);\n    return r;\n  }\n  function i0() {\n    var e = Array.prototype.concat.apply([], arguments);\n    return e.filter(function(t, n) {\n      return n === e.indexOf(t);\n    });\n  }\n  var o0 = function() {\n    function e(n, r) {\n      r === void 0 && (r = {}), this.rule = n, this.options = Object.assign({ lossy: false, safe: false }, r), this.position = 0, this.css = typeof this.rule == \"string\" ? this.rule : this.rule.selector, this.tokens = (0, _.default)({ css: this.css, error: this._errorGenerator(), safe: this.options.safe });\n      var i = Hi(this.tokens[0], this.tokens[this.tokens.length - 1]);\n      this.root = new Vp.default({ source: i }), this.root.errorGenerator = this._errorGenerator();\n      var o = new Ui.default({ source: { start: { line: 1, column: 1 } } });\n      this.root.append(o), this.current = o, this.loop();\n    }\n    var t = e.prototype;\n    return t._errorGenerator = function() {\n      var r = this;\n      return function(i, o) {\n        return typeof r.rule == \"string\" ? new Error(i) : r.rule.error(i, o);\n      };\n    }, t.attribute = function() {\n      var r = [], i = this.currToken;\n      for (this.position++; this.position < this.tokens.length && this.currToken[_.FIELDS.TYPE] !== T.closeSquare; )\n        r.push(this.currToken), this.position++;\n      if (this.currToken[_.FIELDS.TYPE] !== T.closeSquare)\n        return this.expected(\"closing square bracket\", this.currToken[_.FIELDS.START_POS]);\n      var o = r.length, u = { source: lt(i[1], i[2], this.currToken[3], this.currToken[4]), sourceIndex: i[_.FIELDS.START_POS] };\n      if (o === 1 && !~[T.word].indexOf(r[0][_.FIELDS.TYPE]))\n        return this.expected(\"attribute\", r[0][_.FIELDS.START_POS]);\n      for (var s = 0, a = \"\", l = \"\", f = null, d = false; s < o; ) {\n        var h = r[s], m = this.content(h), p = r[s + 1];\n        switch (h[_.FIELDS.TYPE]) {\n          case T.space:\n            if (d = true, this.options.lossy)\n              break;\n            if (f) {\n              (0, ie.ensureObject)(u, \"spaces\", f);\n              var D = u.spaces[f].after || \"\";\n              u.spaces[f].after = D + m;\n              var F = (0, ie.getProp)(u, \"raws\", \"spaces\", f, \"after\") || null;\n              F && (u.raws.spaces[f].after = F + m);\n            } else\n              a = a + m, l = l + m;\n            break;\n          case T.asterisk:\n            if (p[_.FIELDS.TYPE] === T.equals)\n              u.operator = m, f = \"operator\";\n            else if ((!u.namespace || f === \"namespace\" && !d) && p) {\n              a && ((0, ie.ensureObject)(u, \"spaces\", \"attribute\"), u.spaces.attribute.before = a, a = \"\"), l && ((0, ie.ensureObject)(u, \"raws\", \"spaces\", \"attribute\"), u.raws.spaces.attribute.before = a, l = \"\"), u.namespace = (u.namespace || \"\") + m;\n              var b = (0, ie.getProp)(u, \"raws\", \"namespace\") || null;\n              b && (u.raws.namespace += m), f = \"namespace\";\n            }\n            d = false;\n            break;\n          case T.dollar:\n            if (f === \"value\") {\n              var v = (0, ie.getProp)(u, \"raws\", \"value\");\n              u.value += \"$\", v && (u.raws.value = v + \"$\");\n              break;\n            }\n          case T.caret:\n            p[_.FIELDS.TYPE] === T.equals && (u.operator = m, f = \"operator\"), d = false;\n            break;\n          case T.combinator:\n            if (m === \"~\" && p[_.FIELDS.TYPE] === T.equals && (u.operator = m, f = \"operator\"), m !== \"|\") {\n              d = false;\n              break;\n            }\n            p[_.FIELDS.TYPE] === T.equals ? (u.operator = m, f = \"operator\") : !u.namespace && !u.attribute && (u.namespace = true), d = false;\n            break;\n          case T.word:\n            if (p && this.content(p) === \"|\" && r[s + 2] && r[s + 2][_.FIELDS.TYPE] !== T.equals && !u.operator && !u.namespace)\n              u.namespace = m, f = \"namespace\";\n            else if (!u.attribute || f === \"attribute\" && !d) {\n              a && ((0, ie.ensureObject)(u, \"spaces\", \"attribute\"), u.spaces.attribute.before = a, a = \"\"), l && ((0, ie.ensureObject)(u, \"raws\", \"spaces\", \"attribute\"), u.raws.spaces.attribute.before = l, l = \"\"), u.attribute = (u.attribute || \"\") + m;\n              var E = (0, ie.getProp)(u, \"raws\", \"attribute\") || null;\n              E && (u.raws.attribute += m), f = \"attribute\";\n            } else if (!u.value && u.value !== \"\" || f === \"value\" && !d) {\n              var C = (0, ie.unesc)(m), w = (0, ie.getProp)(u, \"raws\", \"value\") || \"\", O = u.value || \"\";\n              u.value = O + C, u.quoteMark = null, (C !== m || w) && ((0, ie.ensureObject)(u, \"raws\"), u.raws.value = (w || O) + m), f = \"value\";\n            } else {\n              var R = m === \"i\" || m === \"I\";\n              (u.value || u.value === \"\") && (u.quoteMark || d) ? (u.insensitive = R, (!R || m === \"I\") && ((0, ie.ensureObject)(u, \"raws\"), u.raws.insensitiveFlag = m), f = \"insensitive\", a && ((0, ie.ensureObject)(u, \"spaces\", \"insensitive\"), u.spaces.insensitive.before = a, a = \"\"), l && ((0, ie.ensureObject)(u, \"raws\", \"spaces\", \"insensitive\"), u.raws.spaces.insensitive.before = l, l = \"\")) : (u.value || u.value === \"\") && (f = \"value\", u.value += m, u.raws.value && (u.raws.value += m));\n            }\n            d = false;\n            break;\n          case T.str:\n            if (!u.attribute || !u.operator)\n              return this.error(\"Expected an attribute followed by an operator preceding the string.\", { index: h[_.FIELDS.START_POS] });\n            var L = (0, zs.unescapeValue)(m), Y = L.unescaped, se = L.quoteMark;\n            u.value = Y, u.quoteMark = se, f = \"value\", (0, ie.ensureObject)(u, \"raws\"), u.raws.value = m, d = false;\n            break;\n          case T.equals:\n            if (!u.attribute)\n              return this.expected(\"attribute\", h[_.FIELDS.START_POS], m);\n            if (u.value)\n              return this.error('Unexpected \"=\" found; an operator was already defined.', { index: h[_.FIELDS.START_POS] });\n            u.operator = u.operator ? u.operator + m : m, f = \"operator\", d = false;\n            break;\n          case T.comment:\n            if (f)\n              if (d || p && p[_.FIELDS.TYPE] === T.space || f === \"insensitive\") {\n                var ae = (0, ie.getProp)(u, \"spaces\", f, \"after\") || \"\", le = (0, ie.getProp)(u, \"raws\", \"spaces\", f, \"after\") || ae;\n                (0, ie.ensureObject)(u, \"raws\", \"spaces\", f), u.raws.spaces[f].after = le + m;\n              } else {\n                var q = u[f] || \"\", $ = (0, ie.getProp)(u, \"raws\", f) || q;\n                (0, ie.ensureObject)(u, \"raws\"), u.raws[f] = $ + m;\n              }\n            else\n              l = l + m;\n            break;\n          default:\n            return this.error('Unexpected \"' + m + '\" found.', { index: h[_.FIELDS.START_POS] });\n        }\n        s++;\n      }\n      Ct(u, \"attribute\"), Ct(u, \"namespace\"), this.newNode(new zs.default(u)), this.position++;\n    }, t.parseWhitespaceEquivalentTokens = function(r) {\n      r < 0 && (r = this.tokens.length);\n      var i = this.position, o = [], u = \"\", s = void 0;\n      do\n        if (Yi[this.currToken[_.FIELDS.TYPE]])\n          this.options.lossy || (u += this.content());\n        else if (this.currToken[_.FIELDS.TYPE] === T.comment) {\n          var a = {};\n          u && (a.before = u, u = \"\"), s = new Us.default({ value: this.content(), source: Et(this.currToken), sourceIndex: this.currToken[_.FIELDS.START_POS], spaces: a }), o.push(s);\n        }\n      while (++this.position < r);\n      if (u) {\n        if (s)\n          s.spaces.after = u;\n        else if (!this.options.lossy) {\n          var l = this.tokens[i], f = this.tokens[this.position - 1];\n          o.push(new zi.default({ value: \"\", source: lt(l[_.FIELDS.START_LINE], l[_.FIELDS.START_COL], f[_.FIELDS.END_LINE], f[_.FIELDS.END_COL]), sourceIndex: l[_.FIELDS.START_POS], spaces: { before: u, after: \"\" } }));\n        }\n      }\n      return o;\n    }, t.convertWhitespaceNodesToSpace = function(r, i) {\n      var o = this;\n      i === void 0 && (i = false);\n      var u = \"\", s = \"\";\n      r.forEach(function(l) {\n        var f = o.lossySpace(l.spaces.before, i), d = o.lossySpace(l.rawSpaceBefore, i);\n        u += f + o.lossySpace(l.spaces.after, i && f.length === 0), s += f + l.value + o.lossySpace(l.rawSpaceAfter, i && d.length === 0);\n      }), s === u && (s = void 0);\n      var a = { space: u, rawSpace: s };\n      return a;\n    }, t.isNamedCombinator = function(r) {\n      return r === void 0 && (r = this.position), this.tokens[r + 0] && this.tokens[r + 0][_.FIELDS.TYPE] === T.slash && this.tokens[r + 1] && this.tokens[r + 1][_.FIELDS.TYPE] === T.word && this.tokens[r + 2] && this.tokens[r + 2][_.FIELDS.TYPE] === T.slash;\n    }, t.namedCombinator = function() {\n      if (this.isNamedCombinator()) {\n        var r = this.content(this.tokens[this.position + 1]), i = (0, ie.unesc)(r).toLowerCase(), o = {};\n        i !== r && (o.value = \"/\" + r + \"/\");\n        var u = new Gi.default({ value: \"/\" + i + \"/\", source: lt(this.currToken[_.FIELDS.START_LINE], this.currToken[_.FIELDS.START_COL], this.tokens[this.position + 2][_.FIELDS.END_LINE], this.tokens[this.position + 2][_.FIELDS.END_COL]), sourceIndex: this.currToken[_.FIELDS.START_POS], raws: o });\n        return this.position = this.position + 3, u;\n      } else\n        this.unexpected();\n    }, t.combinator = function() {\n      var r = this;\n      if (this.content() === \"|\")\n        return this.namespace();\n      var i = this.locateNextMeaningfulToken(this.position);\n      if (i < 0 || this.tokens[i][_.FIELDS.TYPE] === T.comma) {\n        var o = this.parseWhitespaceEquivalentTokens(i);\n        if (o.length > 0) {\n          var u = this.current.last;\n          if (u) {\n            var s = this.convertWhitespaceNodesToSpace(o), a = s.space, l = s.rawSpace;\n            l !== void 0 && (u.rawSpaceAfter += l), u.spaces.after += a;\n          } else\n            o.forEach(function(w) {\n              return r.newNode(w);\n            });\n        }\n        return;\n      }\n      var f = this.currToken, d = void 0;\n      i > this.position && (d = this.parseWhitespaceEquivalentTokens(i));\n      var h;\n      if (this.isNamedCombinator() ? h = this.namedCombinator() : this.currToken[_.FIELDS.TYPE] === T.combinator ? (h = new Gi.default({ value: this.content(), source: Et(this.currToken), sourceIndex: this.currToken[_.FIELDS.START_POS] }), this.position++) : Yi[this.currToken[_.FIELDS.TYPE]] || d || this.unexpected(), h) {\n        if (d) {\n          var m = this.convertWhitespaceNodesToSpace(d), p = m.space, D = m.rawSpace;\n          h.spaces.before = p, h.rawSpaceBefore = D;\n        }\n      } else {\n        var F = this.convertWhitespaceNodesToSpace(d, true), b = F.space, v = F.rawSpace;\n        v || (v = b);\n        var E = {}, C = { spaces: {} };\n        b.endsWith(\" \") && v.endsWith(\" \") ? (E.before = b.slice(0, b.length - 1), C.spaces.before = v.slice(0, v.length - 1)) : b.startsWith(\" \") && v.startsWith(\" \") ? (E.after = b.slice(1), C.spaces.after = v.slice(1)) : C.value = v, h = new Gi.default({ value: \" \", source: Hi(f, this.tokens[this.position - 1]), sourceIndex: f[_.FIELDS.START_POS], spaces: E, raws: C });\n      }\n      return this.currToken && this.currToken[_.FIELDS.TYPE] === T.space && (h.spaces.after = this.optionalSpace(this.content()), this.position++), this.newNode(h);\n    }, t.comma = function() {\n      if (this.position === this.tokens.length - 1) {\n        this.root.trailingComma = true, this.position++;\n        return;\n      }\n      this.current._inferEndPosition();\n      var r = new Ui.default({ source: { start: js(this.tokens[this.position + 1]) } });\n      this.current.parent.append(r), this.current = r, this.position++;\n    }, t.comment = function() {\n      var r = this.currToken;\n      this.newNode(new Us.default({ value: this.content(), source: Et(r), sourceIndex: r[_.FIELDS.START_POS] })), this.position++;\n    }, t.error = function(r, i) {\n      throw this.root.error(r, i);\n    }, t.missingBackslash = function() {\n      return this.error(\"Expected a backslash preceding the semicolon.\", { index: this.currToken[_.FIELDS.START_POS] });\n    }, t.missingParenthesis = function() {\n      return this.expected(\"opening parenthesis\", this.currToken[_.FIELDS.START_POS]);\n    }, t.missingSquareBracket = function() {\n      return this.expected(\"opening square bracket\", this.currToken[_.FIELDS.START_POS]);\n    }, t.unexpected = function() {\n      return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[_.FIELDS.START_POS]);\n    }, t.namespace = function() {\n      var r = this.prevToken && this.content(this.prevToken) || true;\n      if (this.nextToken[_.FIELDS.TYPE] === T.word)\n        return this.position++, this.word(r);\n      if (this.nextToken[_.FIELDS.TYPE] === T.asterisk)\n        return this.position++, this.universal(r);\n    }, t.nesting = function() {\n      if (this.nextToken) {\n        var r = this.content(this.nextToken);\n        if (r === \"|\") {\n          this.position++;\n          return;\n        }\n      }\n      var i = this.currToken;\n      this.newNode(new Zp.default({ value: this.content(), source: Et(i), sourceIndex: i[_.FIELDS.START_POS] })), this.position++;\n    }, t.parentheses = function() {\n      var r = this.current.last, i = 1;\n      if (this.position++, r && r.type === t0.PSEUDO) {\n        var o = new Ui.default({ source: { start: js(this.tokens[this.position - 1]) } }), u = this.current;\n        for (r.append(o), this.current = o; this.position < this.tokens.length && i; )\n          this.currToken[_.FIELDS.TYPE] === T.openParenthesis && i++, this.currToken[_.FIELDS.TYPE] === T.closeParenthesis && i--, i ? this.parse() : (this.current.source.end = Hs(this.currToken), this.current.parent.source.end = Hs(this.currToken), this.position++);\n        this.current = u;\n      } else {\n        for (var s = this.currToken, a = \"(\", l; this.position < this.tokens.length && i; )\n          this.currToken[_.FIELDS.TYPE] === T.openParenthesis && i++, this.currToken[_.FIELDS.TYPE] === T.closeParenthesis && i--, l = this.currToken, a += this.parseParenthesisToken(this.currToken), this.position++;\n        r ? r.appendToPropertyAndEscape(\"value\", a, a) : this.newNode(new zi.default({ value: a, source: lt(s[_.FIELDS.START_LINE], s[_.FIELDS.START_COL], l[_.FIELDS.END_LINE], l[_.FIELDS.END_COL]), sourceIndex: s[_.FIELDS.START_POS] }));\n      }\n      if (i)\n        return this.expected(\"closing parenthesis\", this.currToken[_.FIELDS.START_POS]);\n    }, t.pseudo = function() {\n      for (var r = this, i = \"\", o = this.currToken; this.currToken && this.currToken[_.FIELDS.TYPE] === T.colon; )\n        i += this.content(), this.position++;\n      if (!this.currToken)\n        return this.expected([\"pseudo-class\", \"pseudo-element\"], this.position - 1);\n      if (this.currToken[_.FIELDS.TYPE] === T.word)\n        this.splitWord(false, function(u, s) {\n          i += u, r.newNode(new Kp.default({ value: i, source: Hi(o, r.currToken), sourceIndex: o[_.FIELDS.START_POS] })), s > 1 && r.nextToken && r.nextToken[_.FIELDS.TYPE] === T.openParenthesis && r.error(\"Misplaced parenthesis.\", { index: r.nextToken[_.FIELDS.START_POS] });\n        });\n      else\n        return this.expected([\"pseudo-class\", \"pseudo-element\"], this.currToken[_.FIELDS.START_POS]);\n    }, t.space = function() {\n      var r = this.content();\n      this.position === 0 || this.prevToken[_.FIELDS.TYPE] === T.comma || this.prevToken[_.FIELDS.TYPE] === T.openParenthesis || this.current.nodes.every(function(i) {\n        return i.type === \"comment\";\n      }) ? (this.spaces = this.optionalSpace(r), this.position++) : this.position === this.tokens.length - 1 || this.nextToken[_.FIELDS.TYPE] === T.comma || this.nextToken[_.FIELDS.TYPE] === T.closeParenthesis ? (this.current.last.spaces.after = this.optionalSpace(r), this.position++) : this.combinator();\n    }, t.string = function() {\n      var r = this.currToken;\n      this.newNode(new zi.default({ value: this.content(), source: Et(r), sourceIndex: r[_.FIELDS.START_POS] })), this.position++;\n    }, t.universal = function(r) {\n      var i = this.nextToken;\n      if (i && this.content(i) === \"|\")\n        return this.position++, this.namespace();\n      var o = this.currToken;\n      this.newNode(new Jp.default({ value: this.content(), source: Et(o), sourceIndex: o[_.FIELDS.START_POS] }), r), this.position++;\n    }, t.splitWord = function(r, i) {\n      for (var o = this, u = this.nextToken, s = this.content(); u && ~[T.dollar, T.caret, T.equals, T.word].indexOf(u[_.FIELDS.TYPE]); ) {\n        this.position++;\n        var a = this.content();\n        if (s += a, a.lastIndexOf(\"\\\\\") === a.length - 1) {\n          var l = this.nextToken;\n          l && l[_.FIELDS.TYPE] === T.space && (s += this.requiredSpace(this.content(l)), this.position++);\n        }\n        u = this.nextToken;\n      }\n      var f = Vi(s, \".\").filter(function(p) {\n        var D = s[p - 1] === \"\\\\\", F = /^\\d+\\.\\d+%$/.test(s);\n        return !D && !F;\n      }), d = Vi(s, \"#\").filter(function(p) {\n        return s[p - 1] !== \"\\\\\";\n      }), h = Vi(s, \"#{\");\n      h.length && (d = d.filter(function(p) {\n        return !~h.indexOf(p);\n      }));\n      var m = (0, e0.default)(i0([0].concat(f, d)));\n      m.forEach(function(p, D) {\n        var F = m[D + 1] || s.length, b = s.slice(p, F);\n        if (D === 0 && i)\n          return i.call(o, b, m.length);\n        var v, E = o.currToken, C = E[_.FIELDS.START_POS] + m[D], w = lt(E[1], E[2] + p, E[3], E[2] + (F - 1));\n        if (~f.indexOf(p)) {\n          var O = { value: b.slice(1), source: w, sourceIndex: C };\n          v = new Yp.default(Ct(O, \"value\"));\n        } else if (~d.indexOf(p)) {\n          var R = { value: b.slice(1), source: w, sourceIndex: C };\n          v = new Xp.default(Ct(R, \"value\"));\n        } else {\n          var L = { value: b, source: w, sourceIndex: C };\n          Ct(L, \"value\"), v = new Qp.default(L);\n        }\n        o.newNode(v, r), r = null;\n      }), this.position++;\n    }, t.word = function(r) {\n      var i = this.nextToken;\n      return i && this.content(i) === \"|\" ? (this.position++, this.namespace()) : this.splitWord(r);\n    }, t.loop = function() {\n      for (; this.position < this.tokens.length; )\n        this.parse(true);\n      return this.current._inferEndPosition(), this.root;\n    }, t.parse = function(r) {\n      switch (this.currToken[_.FIELDS.TYPE]) {\n        case T.space:\n          this.space();\n          break;\n        case T.comment:\n          this.comment();\n          break;\n        case T.openParenthesis:\n          this.parentheses();\n          break;\n        case T.closeParenthesis:\n          r && this.missingParenthesis();\n          break;\n        case T.openSquare:\n          this.attribute();\n          break;\n        case T.dollar:\n        case T.caret:\n        case T.equals:\n        case T.word:\n          this.word();\n          break;\n        case T.colon:\n          this.pseudo();\n          break;\n        case T.comma:\n          this.comma();\n          break;\n        case T.asterisk:\n          this.universal();\n          break;\n        case T.ampersand:\n          this.nesting();\n          break;\n        case T.slash:\n        case T.combinator:\n          this.combinator();\n          break;\n        case T.str:\n          this.string();\n          break;\n        case T.closeSquare:\n          this.missingSquareBracket();\n        case T.semicolon:\n          this.missingBackslash();\n        default:\n          this.unexpected();\n      }\n    }, t.expected = function(r, i, o) {\n      if (Array.isArray(r)) {\n        var u = r.pop();\n        r = r.join(\", \") + \" or \" + u;\n      }\n      var s = /^[aeiou]/.test(r[0]) ? \"an\" : \"a\";\n      return o ? this.error(\"Expected \" + s + \" \" + r + ', found \"' + o + '\" instead.', { index: i }) : this.error(\"Expected \" + s + \" \" + r + \".\", { index: i });\n    }, t.requiredSpace = function(r) {\n      return this.options.lossy ? \" \" : r;\n    }, t.optionalSpace = function(r) {\n      return this.options.lossy ? \"\" : r;\n    }, t.lossySpace = function(r, i) {\n      return this.options.lossy ? i ? \" \" : \"\" : r;\n    }, t.parseParenthesisToken = function(r) {\n      var i = this.content(r);\n      return r[_.FIELDS.TYPE] === T.space ? this.requiredSpace(i) : i;\n    }, t.newNode = function(r, i) {\n      return i && (/^ +$/.test(i) && (this.options.lossy || (this.spaces = (this.spaces || \"\") + i), i = true), r.namespace = i, Ct(r, \"namespace\")), this.spaces && (r.spaces.before = this.spaces, this.spaces = \"\"), this.current.append(r);\n    }, t.content = function(r) {\n      return r === void 0 && (r = this.currToken), this.css.slice(r[_.FIELDS.START_POS], r[_.FIELDS.END_POS]);\n    }, t.locateNextMeaningfulToken = function(r) {\n      r === void 0 && (r = this.position + 1);\n      for (var i = r; i < this.tokens.length; )\n        if (n0[this.tokens[i][_.FIELDS.TYPE]]) {\n          i++;\n          continue;\n        } else\n          return i;\n      return -1;\n    }, r0(e, [{ key: \"currToken\", get: function() {\n      return this.tokens[this.position];\n    } }, { key: \"nextToken\", get: function() {\n      return this.tokens[this.position + 1];\n    } }, { key: \"prevToken\", get: function() {\n      return this.tokens[this.position - 1];\n    } }]), e;\n  }();\n  hr.default = o0;\n  Ys.exports = hr.default;\n});\nvar Ks = P((mr, Qs) => {\n  \"use strict\";\n  c();\n  mr.__esModule = true;\n  mr.default = void 0;\n  var u0 = s0(Xs());\n  function s0(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  var a0 = function() {\n    function e(n, r) {\n      this.func = n || function() {\n      }, this.funcRes = null, this.options = r;\n    }\n    var t = e.prototype;\n    return t._shouldUpdateSelector = function(r, i) {\n      i === void 0 && (i = {});\n      var o = Object.assign({}, this.options, i);\n      return o.updateSelector === false ? false : typeof r != \"string\";\n    }, t._isLossy = function(r) {\n      r === void 0 && (r = {});\n      var i = Object.assign({}, this.options, r);\n      return i.lossless === false;\n    }, t._root = function(r, i) {\n      i === void 0 && (i = {});\n      var o = new u0.default(r, this._parseOptions(i));\n      return o.root;\n    }, t._parseOptions = function(r) {\n      return { lossy: this._isLossy(r) };\n    }, t._run = function(r, i) {\n      var o = this;\n      return i === void 0 && (i = {}), new Promise(function(u, s) {\n        try {\n          var a = o._root(r, i);\n          Promise.resolve(o.func(a)).then(function(l) {\n            var f = void 0;\n            return o._shouldUpdateSelector(r, i) && (f = a.toString(), r.selector = f), { transform: l, root: a, string: f };\n          }).then(u, s);\n        } catch (l) {\n          s(l);\n          return;\n        }\n      });\n    }, t._runSync = function(r, i) {\n      i === void 0 && (i = {});\n      var o = this._root(r, i), u = this.func(o);\n      if (u && typeof u.then == \"function\")\n        throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n      var s = void 0;\n      return i.updateSelector && typeof r != \"string\" && (s = o.toString(), r.selector = s), { transform: u, root: o, string: s };\n    }, t.ast = function(r, i) {\n      return this._run(r, i).then(function(o) {\n        return o.root;\n      });\n    }, t.astSync = function(r, i) {\n      return this._runSync(r, i).root;\n    }, t.transform = function(r, i) {\n      return this._run(r, i).then(function(o) {\n        return o.transform;\n      });\n    }, t.transformSync = function(r, i) {\n      return this._runSync(r, i).transform;\n    }, t.process = function(r, i) {\n      return this._run(r, i).then(function(o) {\n        return o.string || o.root.toString();\n      });\n    }, t.processSync = function(r, i) {\n      var o = this._runSync(r, i);\n      return o.string || o.root.toString();\n    }, e;\n  }();\n  mr.default = a0;\n  Qs.exports = mr.default;\n});\nvar Js = P((te) => {\n  \"use strict\";\n  c();\n  te.__esModule = true;\n  te.universal = te.tag = te.string = te.selector = te.root = te.pseudo = te.nesting = te.id = te.comment = te.combinator = te.className = te.attribute = void 0;\n  var l0 = Ae(Ii()), f0 = Ae(Di()), c0 = Ae(Mi()), d0 = Ae(bi()), p0 = Ae(yi()), h0 = Ae($i()), m0 = Ae(Si()), D0 = Ae(ci()), g0 = Ae(pi()), b0 = Ae(Ci()), v0 = Ae(wi()), y0 = Ae(Ri());\n  function Ae(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  var x0 = function(t) {\n    return new l0.default(t);\n  };\n  te.attribute = x0;\n  var F0 = function(t) {\n    return new f0.default(t);\n  };\n  te.className = F0;\n  var w0 = function(t) {\n    return new c0.default(t);\n  };\n  te.combinator = w0;\n  var E0 = function(t) {\n    return new d0.default(t);\n  };\n  te.comment = E0;\n  var C0 = function(t) {\n    return new p0.default(t);\n  };\n  te.id = C0;\n  var _0 = function(t) {\n    return new h0.default(t);\n  };\n  te.nesting = _0;\n  var S0 = function(t) {\n    return new m0.default(t);\n  };\n  te.pseudo = S0;\n  var k0 = function(t) {\n    return new D0.default(t);\n  };\n  te.root = k0;\n  var T0 = function(t) {\n    return new g0.default(t);\n  };\n  te.selector = T0;\n  var A0 = function(t) {\n    return new b0.default(t);\n  };\n  te.string = A0;\n  var O0 = function(t) {\n    return new v0.default(t);\n  };\n  te.tag = O0;\n  var P0 = function(t) {\n    return new y0.default(t);\n  };\n  te.universal = P0;\n});\nvar ra = P((j) => {\n  \"use strict\";\n  c();\n  j.__esModule = true;\n  j.isNode = Xi;\n  j.isPseudoElement = ta;\n  j.isPseudoClass = z0;\n  j.isContainer = G0;\n  j.isNamespace = j0;\n  j.isUniversal = j.isTag = j.isString = j.isSelector = j.isRoot = j.isPseudo = j.isNesting = j.isIdentifier = j.isComment = j.isCombinator = j.isClassName = j.isAttribute = void 0;\n  var oe = ge(), we, I0 = (we = {}, we[oe.ATTRIBUTE] = true, we[oe.CLASS] = true, we[oe.COMBINATOR] = true, we[oe.COMMENT] = true, we[oe.ID] = true, we[oe.NESTING] = true, we[oe.PSEUDO] = true, we[oe.ROOT] = true, we[oe.SELECTOR] = true, we[oe.STRING] = true, we[oe.TAG] = true, we[oe.UNIVERSAL] = true, we);\n  function Xi(e) {\n    return typeof e == \"object\" && I0[e.type];\n  }\n  function Oe(e, t) {\n    return Xi(t) && t.type === e;\n  }\n  var Zs = Oe.bind(null, oe.ATTRIBUTE);\n  j.isAttribute = Zs;\n  var B0 = Oe.bind(null, oe.CLASS);\n  j.isClassName = B0;\n  var R0 = Oe.bind(null, oe.COMBINATOR);\n  j.isCombinator = R0;\n  var L0 = Oe.bind(null, oe.COMMENT);\n  j.isComment = L0;\n  var M0 = Oe.bind(null, oe.ID);\n  j.isIdentifier = M0;\n  var N0 = Oe.bind(null, oe.NESTING);\n  j.isNesting = N0;\n  var Qi = Oe.bind(null, oe.PSEUDO);\n  j.isPseudo = Qi;\n  var $0 = Oe.bind(null, oe.ROOT);\n  j.isRoot = $0;\n  var W0 = Oe.bind(null, oe.SELECTOR);\n  j.isSelector = W0;\n  var q0 = Oe.bind(null, oe.STRING);\n  j.isString = q0;\n  var ea = Oe.bind(null, oe.TAG);\n  j.isTag = ea;\n  var U0 = Oe.bind(null, oe.UNIVERSAL);\n  j.isUniversal = U0;\n  function ta(e) {\n    return Qi(e) && e.value && (e.value.startsWith(\"::\") || e.value.toLowerCase() === \":before\" || e.value.toLowerCase() === \":after\" || e.value.toLowerCase() === \":first-letter\" || e.value.toLowerCase() === \":first-line\");\n  }\n  function z0(e) {\n    return Qi(e) && !ta(e);\n  }\n  function G0(e) {\n    return !!(Xi(e) && e.walk);\n  }\n  function j0(e) {\n    return Zs(e) || ea(e);\n  }\n});\nvar na = P((Me) => {\n  \"use strict\";\n  c();\n  Me.__esModule = true;\n  var Ki = ge();\n  Object.keys(Ki).forEach(function(e) {\n    e === \"default\" || e === \"__esModule\" || e in Me && Me[e] === Ki[e] || (Me[e] = Ki[e]);\n  });\n  var Ji = Js();\n  Object.keys(Ji).forEach(function(e) {\n    e === \"default\" || e === \"__esModule\" || e in Me && Me[e] === Ji[e] || (Me[e] = Ji[e]);\n  });\n  var Zi = ra();\n  Object.keys(Zi).forEach(function(e) {\n    e === \"default\" || e === \"__esModule\" || e in Me && Me[e] === Zi[e] || (Me[e] = Zi[e]);\n  });\n});\nvar ua = P((Dr, oa) => {\n  \"use strict\";\n  c();\n  Dr.__esModule = true;\n  Dr.default = void 0;\n  var H0 = X0(Ks()), V0 = Y0(na());\n  function ia() {\n    if (typeof WeakMap != \"function\")\n      return null;\n    var e = /* @__PURE__ */ new WeakMap();\n    return ia = function() {\n      return e;\n    }, e;\n  }\n  function Y0(e) {\n    if (e && e.__esModule)\n      return e;\n    if (e === null || typeof e != \"object\" && typeof e != \"function\")\n      return { default: e };\n    var t = ia();\n    if (t && t.has(e))\n      return t.get(e);\n    var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var i in e)\n      if (Object.prototype.hasOwnProperty.call(e, i)) {\n        var o = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n        o && (o.get || o.set) ? Object.defineProperty(n, i, o) : n[i] = e[i];\n      }\n    return n.default = e, t && t.set(e, n), n;\n  }\n  function X0(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  var eo = function(t) {\n    return new H0.default(t);\n  };\n  Object.assign(eo, V0);\n  delete eo.__esModule;\n  var Q0 = eo;\n  Dr.default = Q0;\n  oa.exports = Dr.default;\n});\nvar sa = P((to) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(to, \"__esModule\", { value: true });\n  Object.defineProperty(to, \"default\", { enumerable: true, get: () => K0 });\n  function K0(e) {\n    return e.replace(/\\\\,/g, \"\\\\2c \");\n  }\n});\nvar la = P((vb, aa) => {\n  \"use strict\";\n  c();\n  aa.exports = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };\n});\nvar no = P((ro) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(ro, \"__esModule\", { value: true });\n  function J0(e, t) {\n    for (var n in t)\n      Object.defineProperty(e, n, { enumerable: true, get: t[n] });\n  }\n  J0(ro, { parseColor: () => ih, formatColor: () => oh });\n  var fa = Z0(la());\n  function Z0(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  var eh = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, th = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, et2 = /(?:\\d+|\\d*\\.\\d+)%?/, pn = /(?:\\s*,\\s*|\\s+)/, ca = /\\s*[,/]\\s*/, tt = /var\\(--(?:[^ )]*?)\\)/, rh = new RegExp(`^(rgb)a?\\\\(\\\\s*(${et2.source}|${tt.source})(?:${pn.source}(${et2.source}|${tt.source}))?(?:${pn.source}(${et2.source}|${tt.source}))?(?:${ca.source}(${et2.source}|${tt.source}))?\\\\s*\\\\)$`), nh = new RegExp(`^(hsl)a?\\\\(\\\\s*((?:${et2.source})(?:deg|rad|grad|turn)?|${tt.source})(?:${pn.source}(${et2.source}|${tt.source}))?(?:${pn.source}(${et2.source}|${tt.source}))?(?:${ca.source}(${et2.source}|${tt.source}))?\\\\s*\\\\)$`);\n  function ih(e, { loose: t = false } = {}) {\n    var n, r;\n    if (typeof e != \"string\")\n      return null;\n    if (e = e.trim(), e === \"transparent\")\n      return { mode: \"rgb\", color: [\"0\", \"0\", \"0\"], alpha: \"0\" };\n    if (e in fa.default)\n      return { mode: \"rgb\", color: fa.default[e].map((a) => a.toString()) };\n    let i = e.replace(th, (a, l, f, d, h) => [\"#\", l, l, f, f, d, d, h ? h + h : \"\"].join(\"\")).match(eh);\n    if (i !== null)\n      return { mode: \"rgb\", color: [parseInt(i[1], 16), parseInt(i[2], 16), parseInt(i[3], 16)].map((a) => a.toString()), alpha: i[4] ? (parseInt(i[4], 16) / 255).toString() : void 0 };\n    var o;\n    let u = (o = e.match(rh)) !== null && o !== void 0 ? o : e.match(nh);\n    if (u === null)\n      return null;\n    let s = [u[2], u[3], u[4]].filter(Boolean).map((a) => a.toString());\n    return !t && s.length !== 3 || s.length < 3 && !s.some((a) => /^var\\(.*?\\)$/.test(a)) ? null : { mode: u[1], color: s, alpha: (n = u[5]) === null || n === void 0 || (r = n.toString) === null || r === void 0 ? void 0 : r.call(n) };\n  }\n  function oh({ mode: e, color: t, alpha: n }) {\n    let r = n !== void 0;\n    return `${e}(${t.join(\" \")}${r ? ` / ${n}` : \"\"})`;\n  }\n});\nvar oo = P((io) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(io, \"__esModule\", { value: true });\n  function uh(e, t) {\n    for (var n in t)\n      Object.defineProperty(e, n, { enumerable: true, get: t[n] });\n  }\n  uh(io, { withAlphaValue: () => sh, default: () => ah });\n  var hn = no();\n  function sh(e, t, n) {\n    if (typeof e == \"function\")\n      return e({ opacityValue: t });\n    let r = (0, hn.parseColor)(e, { loose: true });\n    return r === null ? n : (0, hn.formatColor)({ ...r, alpha: t });\n  }\n  function ah({ color: e, property: t, variable: n }) {\n    let r = [].concat(t);\n    if (typeof e == \"function\")\n      return { [n]: \"1\", ...Object.fromEntries(r.map((o) => [o, e({ opacityVariable: n, opacityValue: `var(${n})` })])) };\n    let i = (0, hn.parseColor)(e);\n    return i === null ? Object.fromEntries(r.map((o) => [o, e])) : i.alpha !== void 0 ? Object.fromEntries(r.map((o) => [o, e])) : { [n]: \"1\", ...Object.fromEntries(r.map((o) => [o, (0, hn.formatColor)({ ...i, alpha: `var(${n})` })])) };\n  }\n});\nvar Da = P((uo) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(uo, \"__esModule\", { value: true });\n  function lh(e, t) {\n    for (var n in t)\n      Object.defineProperty(e, n, { enumerable: true, get: t[n] });\n  }\n  lh(uo, { pattern: () => ch, withoutCapturing: () => pa, any: () => ha, optional: () => dh, zeroOrMore: () => ph, nestedBrackets: () => ma, escape: () => ft });\n  var da = /[\\\\^$.*+?()[\\]{}|]/g, fh = RegExp(da.source);\n  function gr(e) {\n    return e = Array.isArray(e) ? e : [e], e = e.map((t) => t instanceof RegExp ? t.source : t), e.join(\"\");\n  }\n  function ch(e) {\n    return new RegExp(gr(e), \"g\");\n  }\n  function pa(e) {\n    return new RegExp(`(?:${gr(e)})`, \"g\");\n  }\n  function ha(e) {\n    return `(?:${e.map(gr).join(\"|\")})`;\n  }\n  function dh(e) {\n    return `(?:${gr(e)})?`;\n  }\n  function ph(e) {\n    return `(?:${gr(e)})*`;\n  }\n  function ma(e, t, n = 1) {\n    return pa([ft(e), /[^\\s]*/, n === 1 ? `[^${ft(e)}${ft(t)}s]*` : ha([`[^${ft(e)}${ft(t)}s]*`, ma(e, t, n - 1)]), /[^\\s]*/, ft(t)]);\n  }\n  function ft(e) {\n    return e && fh.test(e) ? e.replace(da, \"\\\\$&\") : e || \"\";\n  }\n});\nvar ba = P((so) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(so, \"__esModule\", { value: true });\n  Object.defineProperty(so, \"splitAtTopLevelOnly\", { enumerable: true, get: () => Dh });\n  var hh = mh(Da());\n  function ga(e) {\n    if (typeof WeakMap != \"function\")\n      return null;\n    var t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();\n    return (ga = function(r) {\n      return r ? n : t;\n    })(e);\n  }\n  function mh(e, t) {\n    if (!t && e && e.__esModule)\n      return e;\n    if (e === null || typeof e != \"object\" && typeof e != \"function\")\n      return { default: e };\n    var n = ga(t);\n    if (n && n.has(e))\n      return n.get(e);\n    var r = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var o in e)\n      if (o !== \"default\" && Object.prototype.hasOwnProperty.call(e, o)) {\n        var u = i ? Object.getOwnPropertyDescriptor(e, o) : null;\n        u && (u.get || u.set) ? Object.defineProperty(r, o, u) : r[o] = e[o];\n      }\n    return r.default = e, n && n.set(e, r), r;\n  }\n  function* Dh(e, t) {\n    let n = new RegExp(`[(){}\\\\[\\\\]${hh.escape(t)}]`, \"g\"), r = 0, i = 0, o = false, u = 0, s = 0, a = t.length;\n    for (let l of e.matchAll(n)) {\n      let f = l[0] === t[u], d = u === a - 1, h = f && d;\n      l[0] === \"(\" && r++, l[0] === \")\" && r--, l[0] === \"[\" && r++, l[0] === \"]\" && r--, l[0] === \"{\" && r++, l[0] === \"}\" && r--, f && r === 0 && (s === 0 && (s = l.index), u++), h && r === 0 && (o = true, yield e.substring(i, s), i = s + a), u === a && (u = 0, s = 0);\n    }\n    o ? yield e.substring(i) : yield e;\n  }\n});\nvar ya = P((ao) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(ao, \"__esModule\", { value: true });\n  function gh(e, t) {\n    for (var n in t)\n      Object.defineProperty(e, n, { enumerable: true, get: t[n] });\n  }\n  gh(ao, { parseBoxShadowValue: () => xh, formatBoxShadowValue: () => Fh });\n  var bh = ba(), vh = /* @__PURE__ */ new Set([\"inset\", \"inherit\", \"initial\", \"revert\", \"unset\"]), yh = /\\ +(?![^(]*\\))/g, va = /^-?(\\d+|\\.\\d+)(.*?)$/g;\n  function xh(e) {\n    return Array.from((0, bh.splitAtTopLevelOnly)(e, \",\")).map((n) => {\n      let r = n.trim(), i = { raw: r }, o = r.split(yh), u = /* @__PURE__ */ new Set();\n      for (let s of o)\n        va.lastIndex = 0, !u.has(\"KEYWORD\") && vh.has(s) ? (i.keyword = s, u.add(\"KEYWORD\")) : va.test(s) ? u.has(\"X\") ? u.has(\"Y\") ? u.has(\"BLUR\") ? u.has(\"SPREAD\") || (i.spread = s, u.add(\"SPREAD\")) : (i.blur = s, u.add(\"BLUR\")) : (i.y = s, u.add(\"Y\")) : (i.x = s, u.add(\"X\")) : i.color ? (i.unknown || (i.unknown = []), i.unknown.push(s)) : i.color = s;\n      return i.valid = i.x !== void 0 && i.y !== void 0, i;\n    });\n  }\n  function Fh(e) {\n    return e.map((t) => t.valid ? [t.keyword, t.x, t.y, t.blur, t.spread, t.color].filter(Boolean).join(\" \") : t.raw).join(\", \");\n  }\n});\nvar Sa = P((fo) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(fo, \"__esModule\", { value: true });\n  function wh(e, t) {\n    for (var n in t)\n      Object.defineProperty(e, n, { enumerable: true, get: t[n] });\n  }\n  wh(fo, { normalize: () => rt, url: () => wa, number: () => _h, percentage: () => Ea, length: () => Ca, lineWidth: () => Th, shadow: () => Ah, color: () => Oh, image: () => Ph, gradient: () => _a2, position: () => Rh, familyName: () => Lh, genericName: () => Nh, absoluteSize: () => Wh, relativeSize: () => Uh });\n  var Eh = no(), Ch = ya(), lo = [\"min\", \"max\", \"clamp\", \"calc\"], Fa = /,(?![^(]*\\))/g, mn = /_(?![^(]*\\))/g;\n  function rt(e, t = true) {\n    return e.includes(\"url(\") ? e.split(/(url\\(.*?\\))/g).filter(Boolean).map((n) => /^url\\(.*?\\)$/.test(n) ? n : rt(n, false)).join(\"\") : (e = e.replace(/([^\\\\])_+/g, (n, r) => r + \" \".repeat(n.length - 1)).replace(/^_/g, \" \").replace(/\\\\_/g, \"_\"), t && (e = e.trim()), e = e.replace(/(calc|min|max|clamp)\\(.+\\)/g, (n) => n.replace(/(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g, \"$1 $2 \")), e);\n  }\n  function wa(e) {\n    return e.startsWith(\"url(\");\n  }\n  function _h(e) {\n    return !isNaN(Number(e)) || lo.some((t) => new RegExp(`^${t}\\\\(.+?`).test(e));\n  }\n  function Ea(e) {\n    return e.split(mn).every((t) => /%$/g.test(t) || lo.some((n) => new RegExp(`^${n}\\\\(.+?%`).test(t)));\n  }\n  var Sh = [\"cm\", \"mm\", \"Q\", \"in\", \"pc\", \"pt\", \"px\", \"em\", \"ex\", \"ch\", \"rem\", \"lh\", \"vw\", \"vh\", \"vmin\", \"vmax\"], xa = `(?:${Sh.join(\"|\")})`;\n  function Ca(e) {\n    return e.split(mn).every((t) => t === \"0\" || new RegExp(`${xa}$`).test(t) || lo.some((n) => new RegExp(`^${n}\\\\(.+?${xa}`).test(t)));\n  }\n  var kh = /* @__PURE__ */ new Set([\"thin\", \"medium\", \"thick\"]);\n  function Th(e) {\n    return kh.has(e);\n  }\n  function Ah(e) {\n    let t = (0, Ch.parseBoxShadowValue)(rt(e));\n    for (let n of t)\n      if (!n.valid)\n        return false;\n    return true;\n  }\n  function Oh(e) {\n    let t = 0;\n    return e.split(mn).every((r) => (r = rt(r), r.startsWith(\"var(\") ? true : (0, Eh.parseColor)(r, { loose: true }) !== null ? (t++, true) : false)) ? t > 0 : false;\n  }\n  function Ph(e) {\n    let t = 0;\n    return e.split(Fa).every((r) => (r = rt(r), r.startsWith(\"var(\") ? true : wa(r) || _a2(r) || [\"element(\", \"image(\", \"cross-fade(\", \"image-set(\"].some((i) => r.startsWith(i)) ? (t++, true) : false)) ? t > 0 : false;\n  }\n  var Ih = /* @__PURE__ */ new Set([\"linear-gradient\", \"radial-gradient\", \"repeating-linear-gradient\", \"repeating-radial-gradient\", \"conic-gradient\"]);\n  function _a2(e) {\n    e = rt(e);\n    for (let t of Ih)\n      if (e.startsWith(`${t}(`))\n        return true;\n    return false;\n  }\n  var Bh = /* @__PURE__ */ new Set([\"center\", \"top\", \"right\", \"bottom\", \"left\"]);\n  function Rh(e) {\n    let t = 0;\n    return e.split(mn).every((r) => (r = rt(r), r.startsWith(\"var(\") ? true : Bh.has(r) || Ca(r) || Ea(r) ? (t++, true) : false)) ? t > 0 : false;\n  }\n  function Lh(e) {\n    let t = 0;\n    return e.split(Fa).every((r) => (r = rt(r), r.startsWith(\"var(\") ? true : r.includes(\" \") && !/(['\"])([^\"']+)\\1/g.test(r) || /^\\d/g.test(r) ? false : (t++, true))) ? t > 0 : false;\n  }\n  var Mh = /* @__PURE__ */ new Set([\"serif\", \"sans-serif\", \"monospace\", \"cursive\", \"fantasy\", \"system-ui\", \"ui-serif\", \"ui-sans-serif\", \"ui-monospace\", \"ui-rounded\", \"math\", \"emoji\", \"fangsong\"]);\n  function Nh(e) {\n    return Mh.has(e);\n  }\n  var $h = /* @__PURE__ */ new Set([\"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"x-large\", \"xxx-large\"]);\n  function Wh(e) {\n    return $h.has(e);\n  }\n  var qh = /* @__PURE__ */ new Set([\"larger\", \"smaller\"]);\n  function Uh(e) {\n    return qh.has(e);\n  }\n});\nvar Ra = P((ho) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(ho, \"__esModule\", { value: true });\n  function zh(e, t) {\n    for (var n in t)\n      Object.defineProperty(e, n, { enumerable: true, get: t[n] });\n  }\n  zh(ho, { updateAllClasses: () => Hh, asValue: () => vr, parseColorFormat: () => co, asColor: () => Pa, asLookupValue: () => Ia, coerceValue: () => Qh });\n  var Gh = po(ua()), jh = po(sa()), ka = oo(), Ee = Sa(), Ta = po(Kn());\n  function po(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Hh(e, t) {\n    return (0, Gh.default)((i) => {\n      i.walkClasses((o) => {\n        let u = t(o.value);\n        o.value = u, o.raws && o.raws.value && (o.raws.value = (0, jh.default)(o.raws.value));\n      });\n    }).processSync(e);\n  }\n  function Oa(e, t) {\n    if (!br(e))\n      return;\n    let n = e.slice(1, -1);\n    if (!!t(n))\n      return (0, Ee.normalize)(n);\n  }\n  function Vh(e, t = {}, n) {\n    let r = t[e];\n    if (r !== void 0)\n      return (0, Ta.default)(r);\n    if (br(e)) {\n      let i = Oa(e, n);\n      return i === void 0 ? void 0 : (0, Ta.default)(i);\n    }\n  }\n  function vr(e, t = {}, { validate: n = () => true } = {}) {\n    var r;\n    let i = (r = t.values) === null || r === void 0 ? void 0 : r[e];\n    return i !== void 0 ? i : t.supportsNegativeValues && e.startsWith(\"-\") ? Vh(e.slice(1), t.values, n) : Oa(e, n);\n  }\n  function br(e) {\n    return e.startsWith(\"[\") && e.endsWith(\"]\");\n  }\n  function Yh(e) {\n    let t = e.lastIndexOf(\"/\");\n    return t === -1 || t === e.length - 1 ? [e] : [e.slice(0, t), e.slice(t + 1)];\n  }\n  function co(e) {\n    if (typeof e == \"string\" && e.includes(\"<alpha-value>\")) {\n      let t = e;\n      return ({ opacityValue: n = 1 }) => t.replace(\"<alpha-value>\", n);\n    }\n    return e;\n  }\n  function Pa(e, t = {}, { tailwindConfig: n = {} } = {}) {\n    var r;\n    if (((r = t.values) === null || r === void 0 ? void 0 : r[e]) !== void 0) {\n      var i;\n      return co((i = t.values) === null || i === void 0 ? void 0 : i[e]);\n    }\n    let [o, u] = Yh(e);\n    if (u !== void 0) {\n      var s, a, l, f;\n      let d = (f = (s = t.values) === null || s === void 0 ? void 0 : s[o]) !== null && f !== void 0 ? f : br(o) ? o.slice(1, -1) : void 0;\n      return d === void 0 ? void 0 : (d = co(d), br(u) ? (0, ka.withAlphaValue)(d, u.slice(1, -1)) : ((a = n.theme) === null || a === void 0 || (l = a.opacity) === null || l === void 0 ? void 0 : l[u]) === void 0 ? void 0 : (0, ka.withAlphaValue)(d, n.theme.opacity[u]));\n    }\n    return vr(e, t, { validate: Ee.color });\n  }\n  function Ia(e, t = {}) {\n    var n;\n    return (n = t.values) === null || n === void 0 ? void 0 : n[e];\n  }\n  function Pe(e) {\n    return (t, n) => vr(t, n, { validate: e });\n  }\n  var Ba = { any: vr, color: Pa, url: Pe(Ee.url), image: Pe(Ee.image), length: Pe(Ee.length), percentage: Pe(Ee.percentage), position: Pe(Ee.position), lookup: Ia, \"generic-name\": Pe(Ee.genericName), \"family-name\": Pe(Ee.familyName), number: Pe(Ee.number), \"line-width\": Pe(Ee.lineWidth), \"absolute-size\": Pe(Ee.absoluteSize), \"relative-size\": Pe(Ee.relativeSize), shadow: Pe(Ee.shadow) }, Aa = Object.keys(Ba);\n  function Xh(e, t) {\n    let n = e.indexOf(t);\n    return n === -1 ? [void 0, e] : [e.slice(0, n), e.slice(n + 1)];\n  }\n  function Qh(e, t, n, r) {\n    if (br(t)) {\n      let i = t.slice(1, -1), [o, u] = Xh(i, \":\");\n      if (!/^[\\w-_]+$/g.test(o))\n        u = i;\n      else if (o !== void 0 && !Aa.includes(o))\n        return [];\n      if (u.length > 0 && Aa.includes(o))\n        return [vr(`[${u}]`, n), o];\n    }\n    for (let i of [].concat(e)) {\n      let o = Ba[i](t, n, { tailwindConfig: r });\n      if (o !== void 0)\n        return [o, i];\n    }\n    return [];\n  }\n});\nvar La = P((mo) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(mo, \"__esModule\", { value: true });\n  Object.defineProperty(mo, \"default\", { enumerable: true, get: () => Kh });\n  function Kh(e) {\n    return typeof e == \"function\" ? e({}) : e;\n  }\n});\nvar qa = P((go) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(go, \"__esModule\", { value: true });\n  Object.defineProperty(go, \"default\", { enumerable: true, get: () => gm });\n  var Jh = ct(Kn()), Zh = ct(Gu()), em = ct(ju()), tm = ct(ei()), rm = ct(Vu()), $a = Yu(), Ma = Xu(), nm = Ku(), im = ct(Ju()), om = Zu(), um = Ra(), sm = oo(), am = ct(La());\n  function ct(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function _t(e) {\n    return typeof e == \"function\";\n  }\n  function yr(e) {\n    return typeof e == \"object\" && e !== null;\n  }\n  function xr(e, ...t) {\n    let n = t.pop();\n    for (let r of t)\n      for (let i in r) {\n        let o = n(e[i], r[i]);\n        o === void 0 ? yr(e[i]) && yr(r[i]) ? e[i] = xr(e[i], r[i], n) : e[i] = r[i] : e[i] = o;\n      }\n    return e;\n  }\n  var Do = { colors: rm.default, negative(e) {\n    return Object.keys(e).filter((t) => e[t] !== \"0\").reduce((t, n) => {\n      let r = (0, Jh.default)(e[n]);\n      return r !== void 0 && (t[`-${n}`] = r), t;\n    }, {});\n  }, breakpoints(e) {\n    return Object.keys(e).filter((t) => typeof e[t] == \"string\").reduce((t, n) => ({ ...t, [`screen-${n}`]: e[n] }), {});\n  } };\n  function lm(e, ...t) {\n    return _t(e) ? e(...t) : e;\n  }\n  function fm(e) {\n    return e.reduce((t, { extend: n }) => xr(t, n, (r, i) => r === void 0 ? [i] : Array.isArray(r) ? [i, ...r] : [i, r]), {});\n  }\n  function cm(e) {\n    return { ...e.reduce((t, n) => (0, $a.defaults)(t, n), {}), extend: fm(e) };\n  }\n  function Na(e, t) {\n    if (Array.isArray(e) && yr(e[0]))\n      return e.concat(t);\n    if (Array.isArray(t) && yr(t[0]) && yr(e))\n      return [e, ...t];\n    if (Array.isArray(t))\n      return t;\n  }\n  function dm({ extend: e, ...t }) {\n    return xr(t, e, (n, r) => !_t(n) && !r.some(_t) ? xr({}, n, ...r, Na) : (i, o) => xr({}, ...[n, ...r].map((u) => lm(u, i, o)), Na));\n  }\n  function* pm(e) {\n    let t = (0, Ma.toPath)(e);\n    if (t.length === 0 || (yield t, Array.isArray(e)))\n      return;\n    let n = /^(.*?)\\s*\\/\\s*([^/]+)$/, r = e.match(n);\n    if (r !== null) {\n      let [, i, o] = r, u = (0, Ma.toPath)(i);\n      u.alpha = o, yield u;\n    }\n  }\n  function hm(e) {\n    let t = (n, r) => {\n      for (let i of pm(n)) {\n        let o = 0, u = e;\n        for (; u != null && o < i.length; )\n          u = u[i[o++]], u = _t(u) && (i.alpha === void 0 || o <= i.length - 1) ? u(t, Do) : u;\n        if (u !== void 0) {\n          if (i.alpha !== void 0) {\n            let s = (0, um.parseColorFormat)(u);\n            return (0, sm.withAlphaValue)(s, i.alpha, (0, am.default)(s));\n          }\n          return (0, im.default)(u) ? (0, om.cloneDeep)(u) : u;\n        }\n      }\n      return r;\n    };\n    return Object.assign(t, { theme: t, ...Do }), Object.keys(e).reduce((n, r) => (n[r] = _t(e[r]) ? e[r](t, Do) : e[r], n), {});\n  }\n  function Wa(e) {\n    let t = [];\n    return e.forEach((n) => {\n      t = [...t, n];\n      var r;\n      let i = (r = n == null ? void 0 : n.plugins) !== null && r !== void 0 ? r : [];\n      i.length !== 0 && i.forEach((o) => {\n        o.__isOptionsFunction && (o = o());\n        var u;\n        t = [...t, ...Wa([(u = o == null ? void 0 : o.config) !== null && u !== void 0 ? u : {}])];\n      });\n    }), t;\n  }\n  function mm(e) {\n    return [...e].reduceRight((n, r) => _t(r) ? r({ corePlugins: n }) : (0, em.default)(r, n), Zh.default);\n  }\n  function Dm(e) {\n    return [...e].reduceRight((n, r) => [...n, ...r], []);\n  }\n  function gm(e) {\n    let t = [...Wa(e), { prefix: \"\", important: false, separator: \":\", variantOrder: tm.default.variantOrder }];\n    var n, r;\n    return (0, nm.normalizeConfig)((0, $a.defaults)({ theme: hm(dm(cm(t.map((i) => (n = i == null ? void 0 : i.theme) !== null && n !== void 0 ? n : {})))), corePlugins: mm(t.map((i) => i.corePlugins)), plugins: Dm(e.map((i) => (r = i == null ? void 0 : i.plugins) !== null && r !== void 0 ? r : [])) }, ...t));\n  }\n});\nvar Ua = {};\nFn(Ua, { default: () => bm });\nvar bm;\nvar za = Lr(() => {\n  c();\n  bm = { yellow: (e) => e };\n});\nvar Va = P((bo) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(bo, \"__esModule\", { value: true });\n  function vm(e, t) {\n    for (var n in t)\n      Object.defineProperty(e, n, { enumerable: true, get: t[n] });\n  }\n  vm(bo, { flagEnabled: () => Fm, issueFlagNotices: () => wm, default: () => Em });\n  var ym = Ha((za(), Mr(Ua))), xm = Ha((Zr(), Mr(Jr)));\n  function Ha(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  var Ga = { optimizeUniversalDefaults: false }, Fr = { future: [\"hoverOnlyWhenSupported\", \"respectDefaultRingColorOpacity\"], experimental: [\"optimizeUniversalDefaults\", \"matchVariant\"] };\n  function Fm(e, t) {\n    if (Fr.future.includes(t)) {\n      var n, r, i;\n      return e.future === \"all\" || ((i = (r = e == null || (n = e.future) === null || n === void 0 ? void 0 : n[t]) !== null && r !== void 0 ? r : Ga[t]) !== null && i !== void 0 ? i : false);\n    }\n    if (Fr.experimental.includes(t)) {\n      var o, u, s;\n      return e.experimental === \"all\" || ((s = (u = e == null || (o = e.experimental) === null || o === void 0 ? void 0 : o[t]) !== null && u !== void 0 ? u : Ga[t]) !== null && s !== void 0 ? s : false);\n    }\n    return false;\n  }\n  function ja(e) {\n    if (e.experimental === \"all\")\n      return Fr.experimental;\n    var t;\n    return Object.keys((t = e == null ? void 0 : e.experimental) !== null && t !== void 0 ? t : {}).filter((n) => Fr.experimental.includes(n) && e.experimental[n]);\n  }\n  function wm(e) {\n    if (process.env.JEST_WORKER_ID === void 0 && ja(e).length > 0) {\n      let t = ja(e).map((n) => ym.default.yellow(n)).join(\", \");\n      xm.default.warn(\"experimental-flags-enabled\", [`You have enabled experimental features: ${t}`, \"Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.\"]);\n    }\n  }\n  var Em = Fr;\n});\nvar Xa = P((vo) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(vo, \"__esModule\", { value: true });\n  Object.defineProperty(vo, \"default\", { enumerable: true, get: () => Ya });\n  var Cm = Sm(ei()), _m = Va();\n  function Sm(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Ya(e) {\n    var t;\n    let n = ((t = e == null ? void 0 : e.presets) !== null && t !== void 0 ? t : [Cm.default]).slice().reverse().flatMap((o) => Ya(typeof o == \"function\" ? o() : o)), r = { respectDefaultRingColorOpacity: { theme: { ringColor: { DEFAULT: \"#3b82f67f\" } } } }, i = Object.keys(r).filter((o) => (0, _m.flagEnabled)(e, o)).map((o) => r[o]);\n    return [e, ...i, ...n];\n  }\n});\nvar Ka = P((yo) => {\n  \"use strict\";\n  c();\n  Object.defineProperty(yo, \"__esModule\", { value: true });\n  Object.defineProperty(yo, \"default\", { enumerable: true, get: () => Am });\n  var km = Qa(qa()), Tm = Qa(Xa());\n  function Qa(e) {\n    return e && e.__esModule ? e : { default: e };\n  }\n  function Am(...e) {\n    let [, ...t] = (0, Tm.default)(e[0]);\n    return (0, km.default)([...e, ...t]);\n  }\n});\nvar Za = P((Pb, Ja) => {\n  c();\n  var xo = Ka();\n  Ja.exports = (xo.__esModule ? xo : { default: xo }).default;\n});\nc();\nc();\nc();\nvar vt;\nfunction Ll(e) {\n  vt = e;\n}\nvar It = null;\nasync function Ge() {\n  return vt || (It ? (await It, vt) : (It = Promise.resolve().then(() => (Qo(), Xo)).then((e) => e.getYogaModule()).then((e) => vt = e), await It, It = null, vt));\n}\nc();\nc();\nc();\nvar Bt = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports);\nvar Ml = Bt((e, t) => {\n  t.exports = [\"em\", \"ex\", \"ch\", \"rem\", \"vh\", \"vw\", \"vmin\", \"vmax\", \"px\", \"mm\", \"cm\", \"in\", \"pt\", \"pc\", \"mozmm\"];\n});\nvar Nl = Bt((e, t) => {\n  t.exports = [\"deg\", \"grad\", \"rad\", \"turn\"];\n});\nvar $l = Bt((e, t) => {\n  t.exports = [\"dpi\", \"dpcm\", \"dppx\"];\n});\nvar Wl = Bt((e, t) => {\n  t.exports = [\"Hz\", \"kHz\"];\n});\nvar ql = Bt((e, t) => {\n  t.exports = [\"s\", \"ms\"];\n});\nvar Ul = Ml();\nvar Ko = Nl();\nvar Jo = $l();\nvar Zo = Wl();\nvar eu = ql();\nfunction En(e) {\n  if (/\\.\\D?$/.test(e))\n    throw new Error(\"The dot should be followed by a number\");\n  if (/^[+-]{2}/.test(e))\n    throw new Error(\"Only one leading +/- is allowed\");\n  if (zl(e) > 1)\n    throw new Error(\"Only one dot is allowed\");\n  if (/%$/.test(e)) {\n    this.type = \"percentage\", this.value = wn(e), this.unit = \"%\";\n    return;\n  }\n  var t = jl(e);\n  if (!t) {\n    this.type = \"number\", this.value = wn(e);\n    return;\n  }\n  this.type = Vl(t), this.value = wn(e.substr(0, e.length - t.length)), this.unit = t;\n}\nEn.prototype.valueOf = function() {\n  return this.value;\n};\nEn.prototype.toString = function() {\n  return this.value + (this.unit || \"\");\n};\nfunction Ke(e) {\n  return new En(e);\n}\nfunction zl(e) {\n  var t = e.match(/\\./g);\n  return t ? t.length : 0;\n}\nfunction wn(e) {\n  var t = parseFloat(e);\n  if (isNaN(t))\n    throw new Error(\"Invalid number: \" + e);\n  return t;\n}\nvar Gl = [].concat(Ko, Zo, Ul, Jo, eu);\nfunction jl(e) {\n  var t = e.match(/\\D+$/), n = t && t[0];\n  if (n && Gl.indexOf(n) === -1)\n    throw new Error(\"Invalid unit: \" + n);\n  return n;\n}\nvar Hl = Object.assign(Nr(Ko, \"angle\"), Nr(Zo, \"frequency\"), Nr(Jo, \"resolution\"), Nr(eu, \"time\"));\nfunction Nr(e, t) {\n  return Object.fromEntries(e.map((n) => [n, t]));\n}\nfunction Vl(e) {\n  return Hl[e] || \"length\";\n}\nfunction yt(e) {\n  let t = typeof e;\n  return !(t === \"number\" || t === \"bigint\" || t === \"string\" || t === \"boolean\");\n}\nfunction tu(e) {\n  return /^class\\s/.test(e.toString());\n}\nfunction ru(e) {\n  return \"dangerouslySetInnerHTML\" in e;\n}\nfunction nu(e) {\n  let t = typeof e > \"u\" ? [] : [].concat(e).flat(1 / 0), n = [];\n  for (let r = 0; r < t.length; r++) {\n    let i = t[r];\n    typeof i > \"u\" || typeof i == \"boolean\" || i === null || (typeof i == \"number\" && (i = String(i)), typeof i == \"string\" && n.length && typeof n[n.length - 1] == \"string\" ? n[n.length - 1] += i : n.push(i));\n  }\n  return n;\n}\nfunction G(e, t, n, r, i = false) {\n  if (typeof e == \"number\")\n    return e;\n  try {\n    if (e = e.trim(), /[ /\\(,]/.test(e))\n      return;\n    if (e === String(+e))\n      return +e;\n    let o = new Ke(e);\n    if (o.type === \"length\")\n      switch (o.unit) {\n        case \"em\":\n          return o.value * t;\n        case \"rem\":\n          return o.value * 16;\n        case \"vw\":\n          return ~~(o.value * r._viewportWidth / 100);\n        case \"vh\":\n          return ~~(o.value * r._viewportHeight / 100);\n        default:\n          return o.value;\n      }\n    else if (o.type === \"angle\")\n      switch (o.unit) {\n        case \"deg\":\n          return o.value;\n        case \"rad\":\n          return o.value * 180 / Math.PI;\n        default:\n          return o.value;\n      }\n    else if (o.type === \"percentage\" && i)\n      return o.value / 100 * n;\n  } catch {\n  }\n}\nfunction Rt(e, t) {\n  return [e[0] * t[0] + e[2] * t[1], e[1] * t[0] + e[3] * t[1], e[0] * t[2] + e[2] * t[3], e[1] * t[2] + e[3] * t[3], e[0] * t[4] + e[2] * t[5] + e[4], e[1] * t[4] + e[3] * t[5] + e[5]];\n}\nfunction Fe(e, t, n, r) {\n  let i = t[e];\n  if (typeof i > \"u\") {\n    if (r && typeof e < \"u\")\n      throw new Error(`Invalid value for CSS property \"${r}\". Allowed values: ${Object.keys(t).map((o) => `\"${o}\"`).join(\" | \")}. Received: \"${e}\".`);\n    i = n;\n  }\n  return i;\n}\nvar Cn;\nvar _n;\nvar iu = [32, 160, 4961, 65792, 65793, 4153, 4241, 10].map((e) => String.fromCodePoint(e));\nfunction Se(e, t, n) {\n  if (!Cn || !_n) {\n    if (!(typeof Intl < \"u\" && \"Segmenter\" in Intl))\n      throw new Error(\"Intl.Segmenter does not exist, please use import a polyfill.\");\n    Cn = new Intl.Segmenter(n, { granularity: \"word\" }), _n = new Intl.Segmenter(n, { granularity: \"grapheme\" });\n  }\n  if (t === \"grapheme\")\n    return [..._n.segment(e)].map((r) => r.segment);\n  {\n    let r = [...Cn.segment(e)].map((u) => u.segment), i = [], o = 0;\n    for (; o < r.length; ) {\n      let u = r[o];\n      if (u == \"\\xA0\") {\n        let s = o === 0 ? \"\" : i.pop(), a = o === r.length - 1 ? \"\" : r[o + 1];\n        i.push(s + \"\\xA0\" + a), o += 2;\n      } else\n        i.push(u), o++;\n    }\n    return i;\n  }\n}\nfunction k(e, t, n) {\n  let r = \"\";\n  for (let [i, o] of Object.entries(t))\n    typeof o < \"u\" && (r += ` ${i}=\"${o}\"`);\n  return n ? `<${e}${r}>${n}</${e}>` : `<${e}${r}/>`;\n}\nfunction ou(e = 20) {\n  let t = /* @__PURE__ */ new Map();\n  function n(o, u) {\n    if (t.size >= e) {\n      let s = t.keys().next().value;\n      t.delete(s);\n    }\n    t.set(o, u);\n  }\n  function r(o) {\n    if (!t.has(o))\n      return;\n    let s = t.get(o);\n    return t.delete(o), t.set(o, s), s;\n  }\n  function i() {\n    t.clear();\n  }\n  return { set: n, get: r, clear: i };\n}\nfunction xt(e) {\n  return e ? e.split(/[, ]/).filter(Boolean).map(Number) : null;\n}\nfunction Xl(e) {\n  return Object.prototype.toString.call(e);\n}\nfunction $r(e) {\n  return typeof e == \"string\";\n}\nfunction uu(e) {\n  return typeof e == \"number\";\n}\nfunction su(e) {\n  return Xl(e) === \"[object Undefined]\";\n}\nfunction au(e, t) {\n  if (t === \"break-all\")\n    return { words: Se(e, \"grapheme\"), requiredBreaks: [] };\n  if (t === \"keep-all\")\n    return { words: Se(e, \"word\"), requiredBreaks: [] };\n  let n = new $557adaaeb0c7885f$exports(e), r = 0, i = n.nextBreak(), o = [], u = [false];\n  for (; i; ) {\n    let s = e.slice(r, i.position);\n    o.push(s), i.required ? u.push(true) : u.push(false), r = i.position, i = n.nextBreak();\n  }\n  return { words: o, requiredBreaks: u };\n}\nvar lu = (e) => e.replaceAll(/([A-Z])/g, (t, n) => `-${n.toLowerCase()}`);\nc();\nc();\nvar Ql = \"image/avif\";\nvar Kl = \"image/webp\";\nvar Wr = \"image/apng\";\nvar qr = \"image/png\";\nvar Ur = \"image/jpeg\";\nvar zr = \"image/gif\";\nvar kn = \"image/svg+xml\";\nfunction du(e) {\n  let t = new DataView(e), n = 4, r = t.byteLength;\n  for (; n < r; ) {\n    let i = t.getUint16(n, false);\n    if (i > r)\n      throw new TypeError(\"Invalid JPEG\");\n    let o = t.getUint8(i + 1 + n);\n    if (o === 192 || o === 193 || o === 194)\n      return [t.getUint16(i + 7 + n, false), t.getUint16(i + 5 + n, false)];\n    n += i + 2;\n  }\n  throw new TypeError(\"Invalid JPEG\");\n}\nfunction pu(e) {\n  let t = new Uint8Array(e.slice(6, 10));\n  return [t[0] | t[1] << 8, t[2] | t[3] << 8];\n}\nfunction hu(e) {\n  let t = new DataView(e);\n  return [t.getUint16(18, false), t.getUint16(22, false)];\n}\nvar $e = ou(100);\nvar Sn = /* @__PURE__ */ new Map();\nvar Jl = [qr, Wr, Ur, zr, kn];\nfunction Zl(e) {\n  let t = \"\", n = new Uint8Array(e);\n  for (let r = 0; r < n.byteLength; r++)\n    t += String.fromCharCode(n[r]);\n  return btoa(t);\n}\nfunction ef(e) {\n  let t = atob(e), n = t.length, r = new Uint8Array(n);\n  for (let i = 0; i < n; i++)\n    r[i] = t.charCodeAt(i);\n  return r.buffer;\n}\nfunction fu(e, t) {\n  let n = t.match(/<svg[^>]*>/)[0], r = n.match(/viewBox=['\"](.+)['\"]/), i = r ? xt(r[1]) : null, o = n.match(/width=['\"](\\d*\\.\\d+|\\d+)['\"]/), u = n.match(/height=['\"](\\d*\\.\\d+|\\d+)['\"]/);\n  if (!i && (!o || !u))\n    throw new Error(`Failed to parse SVG from ${e}: missing \"viewBox\"`);\n  let s = i ? [i[2], i[3]] : [+o[1], +u[1]], a = s[0] / s[1];\n  return o && u ? [+o[1], +u[1]] : o ? [+o[1], +o[1] / a] : u ? [+u[1] * a, +u[1]] : [s[0], s[1]];\n}\nfunction cu(e) {\n  let t, n = tf(new Uint8Array(e));\n  switch (n) {\n    case qr:\n    case Wr:\n      t = hu(e);\n      break;\n    case zr:\n      t = pu(e);\n      break;\n    case Ur:\n      t = du(e);\n      break;\n  }\n  if (!Jl.includes(n))\n    throw new Error(`Unsupported image type: ${n || \"unknown\"}`);\n  return [`data:${n};base64,${Zl(e)}`, t];\n}\nasync function Ft(e) {\n  if (!e)\n    throw new Error(\"Image source is not provided.\");\n  if (typeof e == \"object\") {\n    let [i, o] = cu(e);\n    return [i, ...o];\n  }\n  if ((e.startsWith('\"') && e.endsWith('\"') || e.startsWith(\"'\") && e.endsWith(\"'\")) && (e = e.slice(1, -1)), typeof window > \"u\" && !e.startsWith(\"http\") && !e.startsWith(\"data:\"))\n    throw new Error(`Image source must be an absolute URL: ${e}`);\n  if (e.startsWith(\"data:\")) {\n    let i;\n    try {\n      i = /data:(?<imageType>[a-z/+]+)(;(?<encodingType>base64|utf8))?,(?<dataString>.*)/g.exec(e).groups;\n    } catch {\n      return console.warn(\"Image data URI resolved without size:\" + e), [e];\n    }\n    let { imageType: o, encodingType: u, dataString: s } = i;\n    if (o === kn) {\n      let a = u === \"base64\" ? atob(s) : decodeURIComponent(s.replace(/ /g, \"%20\")), l = u === \"base64\" ? e : `data:image/svg+xml;base64,${btoa(a)}`, f = fu(e, a);\n      return $e.set(e, [l, ...f]), [l, ...f];\n    } else if (u === \"base64\") {\n      let a, l = ef(s);\n      switch (o) {\n        case qr:\n        case Wr:\n          a = hu(l);\n          break;\n        case zr:\n          a = pu(l);\n          break;\n        case Ur:\n          a = du(l);\n          break;\n      }\n      return $e.set(e, [e, ...a]), [e, ...a];\n    } else\n      return console.warn(\"Image data URI resolved without size:\" + e), $e.set(e, [e]), [e];\n  }\n  if (!globalThis.fetch)\n    throw new Error(\"`fetch` is required to be polyfilled to load images.\");\n  if (Sn.has(e))\n    return Sn.get(e);\n  let t = $e.get(e);\n  if (t)\n    return t;\n  let n = e, r = fetch(n).then((i) => {\n    let o = i.headers.get(\"content-type\");\n    return o === \"image/svg+xml\" || o === \"application/svg+xml\" ? i.text() : i.arrayBuffer();\n  }).then((i) => {\n    if (typeof i == \"string\")\n      try {\n        let s = `data:image/svg+xml;base64,${btoa(i)}`, a = fu(n, i);\n        return [s, ...a];\n      } catch (s) {\n        throw new Error(`Failed to parse SVG image: ${s.message}`);\n      }\n    let [o, u] = cu(i);\n    return [o, ...u];\n  }).then((i) => ($e.set(n, i), i)).catch((i) => (console.error(`Can't load image ${n}: ` + i.message), $e.set(n, []), []));\n  return Sn.set(n, r), r;\n}\nfunction tf(e) {\n  return [255, 216, 255].every((t, n) => e[n] === t) ? Ur : [137, 80, 78, 71, 13, 10, 26, 10].every((t, n) => e[n] === t) ? rf(e) ? Wr : qr : [71, 73, 70, 56].every((t, n) => e[n] === t) ? zr : [82, 73, 70, 70, 0, 0, 0, 0, 87, 69, 66, 80].every((t, n) => !t || e[n] === t) ? Kl : [60, 63, 120, 109, 108].every((t, n) => e[n] === t) ? kn : [0, 0, 0, 0, 102, 116, 121, 112, 97, 118, 105, 102].every((t, n) => !t || e[n] === t) ? Ql : null;\n}\nfunction rf(e) {\n  let t = new DataView(e.buffer), n, r, i = 8, o = false;\n  for (; !o && n !== \"IEND\" && i < e.length; ) {\n    r = t.getUint32(i);\n    let u = e.subarray(i + 4, i + 8);\n    n = String.fromCharCode(...u), o = n === \"acTL\", i += 12 + r;\n  }\n  return o;\n}\nvar Tn = { accentHeight: \"accent-height\", alignmentBaseline: \"alignment-baseline\", arabicForm: \"arabic-form\", baselineShift: \"baseline-shift\", capHeight: \"cap-height\", clipPath: \"clip-path\", clipRule: \"clip-rule\", colorInterpolation: \"color-interpolation\", colorInterpolationFilters: \"color-interpolation-filters\", colorProfile: \"color-profile\", colorRendering: \"color-rendering\", dominantBaseline: \"dominant-baseline\", enableBackground: \"enable-background\", fillOpacity: \"fill-opacity\", fillRule: \"fill-rule\", floodColor: \"flood-color\", floodOpacity: \"flood-opacity\", fontFamily: \"font-family\", fontSize: \"font-size\", fontSizeAdjust: \"font-size-adjust\", fontStretch: \"font-stretch\", fontStyle: \"font-style\", fontVariant: \"font-variant\", fontWeight: \"font-weight\", glyphName: \"glyph-name\", glyphOrientationHorizontal: \"glyph-orientation-horizontal\", glyphOrientationVertical: \"glyph-orientation-vertical\", horizAdvX: \"horiz-adv-x\", horizOriginX: \"horiz-origin-x\", href: \"href\", imageRendering: \"image-rendering\", letterSpacing: \"letter-spacing\", lightingColor: \"lighting-color\", markerEnd: \"marker-end\", markerMid: \"marker-mid\", markerStart: \"marker-start\", overlinePosition: \"overline-position\", overlineThickness: \"overline-thickness\", paintOrder: \"paint-order\", panose1: \"panose-1\", pointerEvents: \"pointer-events\", renderingIntent: \"rendering-intent\", shapeRendering: \"shape-rendering\", stopColor: \"stop-color\", stopOpacity: \"stop-opacity\", strikethroughPosition: \"strikethrough-position\", strikethroughThickness: \"strikethrough-thickness\", strokeDasharray: \"stroke-dasharray\", strokeDashoffset: \"stroke-dashoffset\", strokeLinecap: \"stroke-linecap\", strokeLinejoin: \"stroke-linejoin\", strokeMiterlimit: \"stroke-miterlimit\", strokeOpacity: \"stroke-opacity\", strokeWidth: \"stroke-width\", textAnchor: \"text-anchor\", textDecoration: \"text-decoration\", textRendering: \"text-rendering\", underlinePosition: \"underline-position\", underlineThickness: \"underline-thickness\", unicodeBidi: \"unicode-bidi\", unicodeRange: \"unicode-range\", unitsPerEm: \"units-per-em\", vAlphabetic: \"v-alphabetic\", vHanging: \"v-hanging\", vIdeographic: \"v-ideographic\", vMathematical: \"v-mathematical\", vectorEffect: \"vector-effect\", vertAdvY: \"vert-adv-y\", vertOriginX: \"vert-origin-x\", vertOriginY: \"vert-origin-y\", wordSpacing: \"word-spacing\", writingMode: \"writing-mode\", xHeight: \"x-height\", xlinkActuate: \"xlink:actuate\", xlinkArcrole: \"xlink:arcrole\", xlinkHref: \"xlink:href\", xlinkRole: \"xlink:role\", xlinkShow: \"xlink:show\", xlinkTitle: \"xlink:title\", xlinkType: \"xlink:type\", xmlBase: \"xml:base\", xmlLang: \"xml:lang\", xmlSpace: \"xml:space\", xmlnsXlink: \"xmlns:xlink\" };\nvar nf = /[\\r\\n%#()<>?[\\\\\\]^`{|}\"']/g;\nfunction An(e, t) {\n  if (!e)\n    return \"\";\n  if (Array.isArray(e))\n    return e.map((l) => An(l, t)).join(\"\");\n  if (typeof e != \"object\")\n    return String(e);\n  let n = e.type;\n  if (n === \"text\")\n    throw new Error(\"<text> nodes are not currently supported, please convert them to <path>\");\n  let { children: r, style: i, ...o } = e.props || {}, u = (i == null ? void 0 : i.color) || t, s = `${Object.entries(o).map(([l, f]) => (typeof f == \"string\" && f.toLowerCase() === \"currentcolor\" && (f = u), l === \"href\" && n === \"image\" ? ` ${Tn[l] || l}=\"${$e.get(f)[0]}\"` : ` ${Tn[l] || l}=\"${f}\"`)).join(\"\")}`, a = i ? ` style=\"${Object.entries(i).map(([l, f]) => `${lu(l)}:${f}`).join(\";\")}\"` : \"\";\n  return `<${n}${s}${a}>${An(r, u)}</${n}>`;\n}\nasync function mu(e) {\n  let t = /* @__PURE__ */ new Set(), n = (r) => {\n    if (!!r && !!yt(r)) {\n      if (Array.isArray(r)) {\n        r.forEach((i) => n(i));\n        return;\n      } else\n        typeof r == \"object\" && (r.type === \"image\" ? t.has(r.props.href) || t.add(r.props.href) : r.type === \"img\" && (t.has(r.props.src) || t.add(r.props.src)));\n      Array.isArray(r.props.children) ? r.props.children.map((i) => n(i)) : n(r.props.children);\n    }\n  };\n  return n(e), Promise.all(Array.from(t).map((r) => Ft(r)));\n}\nasync function Du(e, t) {\n  let { viewBox: n, viewbox: r, width: i, height: o, className: u, style: s, children: a, ...l } = e.props || {};\n  n || (n = r), l.xmlns = \"http://www.w3.org/2000/svg\";\n  let f = (s == null ? void 0 : s.color) || t, d = xt(n), h = d ? d[3] / d[2] : null;\n  return i = i || h && o ? o / h : null, o = o || h && i ? i * h : null, l.width = i, l.height = o, n && (l.viewBox = n), `data:image/svg+xml;utf8,${`<svg ${Object.entries(l).map(([m, p]) => (typeof p == \"string\" && p.toLowerCase() === \"currentcolor\" && (p = f), ` ${Tn[m] || m}=\"${p}\"`)).join(\"\")}>${An(a, f)}</svg>`.replace(nf, encodeURIComponent)}`;\n}\nc();\nc();\nvar ke = \"flex\";\nvar gu = { p: { display: ke, marginTop: \"1em\", marginBottom: \"1em\" }, div: { display: ke }, blockquote: { display: ke, marginTop: \"1em\", marginBottom: \"1em\", marginLeft: 40, marginRight: 40 }, center: { display: ke, textAlign: \"center\" }, hr: { display: ke, marginTop: \"0.5em\", marginBottom: \"0.5em\", marginLeft: \"auto\", marginRight: \"auto\", borderWidth: 1, borderStyle: \"solid\" }, h1: { display: ke, fontSize: \"2em\", marginTop: \"0.67em\", marginBottom: \"0.67em\", marginLeft: 0, marginRight: 0, fontWeight: \"bold\" }, h2: { display: ke, fontSize: \"1.5em\", marginTop: \"0.83em\", marginBottom: \"0.83em\", marginLeft: 0, marginRight: 0, fontWeight: \"bold\" }, h3: { display: ke, fontSize: \"1.17em\", marginTop: \"1em\", marginBottom: \"1em\", marginLeft: 0, marginRight: 0, fontWeight: \"bold\" }, h4: { display: ke, marginTop: \"1.33em\", marginBottom: \"1.33em\", marginLeft: 0, marginRight: 0, fontWeight: \"bold\" }, h5: { display: ke, fontSize: \"0.83em\", marginTop: \"1.67em\", marginBottom: \"1.67em\", marginLeft: 0, marginRight: 0, fontWeight: \"bold\" }, h6: { display: ke, fontSize: \"0.67em\", marginTop: \"2.33em\", marginBottom: \"2.33em\", marginLeft: 0, marginRight: 0, fontWeight: \"bold\" }, u: { textDecoration: \"underline\" }, strong: { fontWeight: \"bold\" }, b: { fontWeight: \"bold\" }, i: { fontStyle: \"italic\" }, em: { fontStyle: \"italic\" }, code: { fontFamily: \"monospace\" }, kbd: { fontFamily: \"monospace\" }, pre: { display: ke, fontFamily: \"monospace\", whiteSpace: \"pre\", marginTop: \"1em\", marginBottom: \"1em\" }, mark: { backgroundColor: \"yellow\", color: \"black\" }, big: { fontSize: \"larger\" }, small: { fontSize: \"smaller\" }, s: { textDecoration: \"line-through\" } };\nc();\nvar of = /* @__PURE__ */ new Set([\"color\", \"font\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"letterSpacing\", \"lineHeight\", \"textAlign\", \"textTransform\", \"textShadowOffset\", \"textShadowColor\", \"textShadowRadius\", \"textDecorationLine\", \"textDecorationStyle\", \"textDecorationColor\", \"whiteSpace\", \"transform\", \"wordBreak\", \"tabSize\", \"opacity\", \"filter\", \"_viewportWidth\", \"_viewportHeight\", \"_inheritedClipPathId\", \"_inheritedMaskId\", \"_inheritedBackgroundClipTextPath\"]);\nfunction On(e) {\n  let t = {};\n  for (let n in e)\n    of.has(n) && (t[n] = e[n]);\n  return t;\n}\nc();\nc();\nfunction sf(e, t) {\n  try {\n    let n = new Ke(e);\n    switch (n.unit) {\n      case \"px\":\n        return { absolute: n.value };\n      case \"em\":\n        return { absolute: n.value * t };\n      case \"rem\":\n        return { absolute: n.value * 16 };\n      case \"%\":\n        return { relative: n.value };\n      default:\n        return {};\n    }\n  } catch {\n    return {};\n  }\n}\nfunction Pn(e, t, n) {\n  switch (e) {\n    case \"top\":\n      return { yRelative: 0 };\n    case \"left\":\n      return { xRelative: 0 };\n    case \"right\":\n      return { xRelative: 100 };\n    case \"bottom\":\n      return { yRelative: 100 };\n    case \"center\":\n      return {};\n    default: {\n      let r = sf(e, t);\n      return r.absolute ? { [n ? \"xAbsolute\" : \"yAbsolute\"]: r.absolute } : r.relative ? { [n ? \"xRelative\" : \"yRelative\"]: r.relative } : {};\n    }\n  }\n}\nfunction In(e, t) {\n  if (typeof e == \"number\")\n    return { xAbsolute: e };\n  let n;\n  try {\n    n = (0, import_postcss_value_parser.default)(e).nodes.filter((r) => r.type === \"word\").map((r) => r.value);\n  } catch {\n    return {};\n  }\n  return n.length === 1 ? Pn(n[0], t, true) : n.length === 2 ? ((n[0] === \"top\" || n[0] === \"bottom\" || n[1] === \"left\" || n[1] === \"right\") && n.reverse(), { ...Pn(n[0], t, true), ...Pn(n[1], t, false) }) : {};\n}\nc();\nfunction Lt(e, t) {\n  let n = (0, import_css_to_react_native2.getPropertyName)(`mask-${t}`);\n  return e[n] || e[`WebkitM${n.substring(1)}`];\n}\nvar lf = /(?<=\\))(?:\\s*,\\s*)/;\nfunction bu(e) {\n  let t = e.maskImage || e.WebkitMaskImage, n = { position: Lt(e, \"position\") || \"0% 0%\", size: Lt(e, \"size\") || \"100% 100%\", repeat: Lt(e, \"repeat\") || \"repeat\", origin: Lt(e, \"origin\") || \"border-box\", clip: Lt(e, \"origin\") || \"border-box\" };\n  return t.split(lf).reverse().map((r) => r.trim()).filter((r) => r && r !== \"none\").map((r) => ({ image: r, ...n }));\n}\nvar hf = /* @__PURE__ */ new Set([\"flex\", \"flexGrow\", \"flexShrink\", \"flexBasis\", \"fontWeight\", \"lineHeight\", \"opacity\", \"scale\", \"scaleX\", \"scaleY\"]);\nvar mf = /* @__PURE__ */ new Set([\"lineHeight\"]);\nfunction Df(e, t, n, r) {\n  return e === \"textDecoration\" && !n.includes(t.textDecorationColor) && (t.textDecorationColor = r), t;\n}\nfunction Mt(e, t) {\n  return typeof t == \"number\" ? hf.has(e) ? mf.has(e) ? t : String(t) : t + \"px\" : t;\n}\nfunction gf(e, t, n) {\n  if (e === \"lineHeight\")\n    return { lineHeight: Mt(e, t) };\n  if (e === \"fontFamily\")\n    return { fontFamily: t.split(\",\").map((r) => r.trim().replace(/(^['\"])|(['\"]$)/g, \"\").toLocaleLowerCase()) };\n  if (e === \"borderRadius\") {\n    if (typeof t != \"string\" || !t.includes(\"/\"))\n      return;\n    let [r, i] = t.split(\"/\"), o = (0, import_css_to_react_native.getStylesForProperty)(e, r, true), u = (0, import_css_to_react_native.getStylesForProperty)(e, i, true);\n    for (let s in o)\n      u[s] = Mt(e, o[s]) + \" \" + Mt(e, u[s]);\n    return u;\n  }\n  if (/^border(Top|Right|Bottom|Left)?$/.test(e)) {\n    let r = (0, import_css_to_react_native.getStylesForProperty)(\"border\", t, true);\n    r.borderWidth === 1 && !String(t).includes(\"1px\") && (r.borderWidth = 3), r.borderColor === \"black\" && !String(t).includes(\"black\") && (r.borderColor = n);\n    let i = { Width: Mt(e + \"Width\", r.borderWidth), Style: Fe(r.borderStyle, { solid: \"solid\", dashed: \"dashed\" }, \"solid\", e + \"Style\"), Color: r.borderColor }, o = {};\n    for (let u of e === \"border\" ? [\"Top\", \"Right\", \"Bottom\", \"Left\"] : [e.slice(6)])\n      for (let s in i)\n        o[\"border\" + u + s] = i[s];\n    return o;\n  }\n  if (e === \"boxShadow\") {\n    if (!t)\n      throw new Error('Invalid `boxShadow` value: \"' + t + '\".');\n    return { [e]: typeof t == \"string\" ? (0, import_css_box_shadow.parse)(t) : t };\n  }\n  if (e === \"transform\") {\n    if (typeof t != \"string\")\n      throw new Error(\"Invalid `transform` value.\");\n    let r = {}, i = t.replace(/(-?[\\d.]+%)/g, (u, s) => {\n      let a = ~~(Math.random() * 1e9);\n      return r[a] = s, a + \"px\";\n    }), o = (0, import_css_to_react_native.getStylesForProperty)(\"transform\", i, true);\n    for (let u of o.transform)\n      for (let s in u)\n        r[u[s]] && (u[s] = r[u[s]]);\n    return o;\n  }\n  if (e === \"background\")\n    return t = t.toString().trim(), /^(linear-gradient|radial-gradient|url)\\(/.test(t) ? (0, import_css_to_react_native.getStylesForProperty)(\"backgroundImage\", t, true) : (0, import_css_to_react_native.getStylesForProperty)(\"background\", t, true);\n  if (e === \"textShadow\" && (t = t.toString().trim(), t.includes(\",\"))) {\n    let r = bf(t), i = {};\n    for (let o of r) {\n      let u = (0, import_css_to_react_native.getStylesForProperty)(\"textShadow\", o, true);\n      for (let s in u)\n        i[s] ? i[s].push(u[s]) : i[s] = [u[s]];\n    }\n    return i;\n  }\n}\nfunction bf(e) {\n  let t = [], n = false, r = 0, i = e.length;\n  for (let o = 0; o < i; ++o) {\n    let u = e[o];\n    u === \")\" && (n = false), !n && (u === \"(\" && (n = true), u === \",\" && (t.push(e.substring(r, o)), r = o + 1));\n  }\n  return t.push(e.substring(r, i)), t.map((o) => o.trim());\n}\nfunction vu(e) {\n  return e === \"transform\" ? \" Only absolute lengths such as `10px` are supported.\" : \"\";\n}\nvar yu = /rgb\\((\\d+)\\s+(\\d+)\\s+(\\d+)\\s*\\/\\s*([\\.\\d]+)\\)/;\nfunction Fu(e) {\n  if (typeof e == \"string\" && yu.test(e.trim()))\n    return e.trim().replace(yu, (t, n, r, i, o) => `rgba(${n}, ${r}, ${i}, ${o})`);\n  if (typeof e == \"object\" && e !== null) {\n    for (let t in e)\n      e[t] = Fu(e[t]);\n    return e;\n  }\n  return e;\n}\nfunction Gr(e, t) {\n  let n = {};\n  if (e) {\n    let i = yf(e.color, t.color);\n    n.color = i;\n    for (let o in e) {\n      if (o.startsWith(\"_\")) {\n        n[o] = e[o];\n        continue;\n      }\n      if (o === \"color\")\n        continue;\n      let u = (0, import_css_to_react_native.getPropertyName)(o), s = Ff(e[o], i);\n      try {\n        let a = gf(u, s, i) || Df(u, (0, import_css_to_react_native.getStylesForProperty)(u, Mt(u, s), true), s, i);\n        Object.assign(n, a);\n      } catch (a) {\n        throw new Error(a.message + (a.message.includes(s) ? `\n  ` + vu(u) : `\n  in CSS rule \\`${u}: ${s}\\`.${vu(u)}`));\n      }\n    }\n  }\n  if (n.backgroundImage) {\n    let { backgrounds: i } = (0, import_css_background_parser.parseElementStyle)(n);\n    n.backgroundImage = i;\n  }\n  if (n.maskImage || n.WebkitMaskImage) {\n    let i = bu(n);\n    n.maskImage = i;\n  }\n  let r = vf(n.fontSize, t.fontSize);\n  typeof n.fontSize < \"u\" && (n.fontSize = r), n.transformOrigin && (n.transformOrigin = In(n.transformOrigin, r));\n  for (let i in n) {\n    let o = n[i];\n    if (i === \"lineHeight\")\n      typeof o == \"string\" && (o = n[i] = G(o, r, r, t, true) / r);\n    else {\n      if (typeof o == \"string\") {\n        let u = G(o, r, r, t);\n        typeof u < \"u\" && (n[i] = u), o = n[i];\n      }\n      if (typeof o == \"string\" || typeof o == \"object\") {\n        let u = Fu(o);\n        u && (n[i] = u), o = n[i];\n      }\n    }\n    if (i === \"opacity\" && (o = n[i] = o * t.opacity), i === \"transform\") {\n      let u = o;\n      for (let s of u) {\n        let a = Object.keys(s)[0], l = s[a], f = typeof l == \"string\" ? G(l, r, r, t) ?? l : l;\n        s[a] = f;\n      }\n    }\n  }\n  return n;\n}\nfunction vf(e, t) {\n  if (typeof e == \"number\")\n    return e;\n  try {\n    let n = new Ke(e);\n    switch (n.unit) {\n      case \"em\":\n        return n.value * t;\n      case \"rem\":\n        return n.value * 16;\n    }\n  } catch {\n    return t;\n  }\n}\nfunction xu(e) {\n  if (e.startsWith(\"hsl\")) {\n    let t = index_esm_default(e), [n, r, i] = t.values;\n    return `hsl(${[n, `${r}%`, `${i}%`].concat(t.alpha === 1 ? [] : [t.alpha]).join(\",\")})`;\n  }\n  return e;\n}\nfunction yf(e, t) {\n  return e && e.toLowerCase() !== \"currentcolor\" ? xu(e) : xu(t);\n}\nfunction xf(e, t) {\n  return e.replace(/currentcolor/gi, t);\n}\nfunction Ff(e, t) {\n  return $r(e) && (e = xf(e, t)), e;\n}\nasync function Bn(e, t, n, r, i) {\n  let o = await Ge(), u = { ...n, ...Gr(gu[t], n), ...Gr(r, n) };\n  if (t === \"img\") {\n    let [s, a, l] = await Ft(i.src);\n    if (a === void 0 && l === void 0) {\n      if (i.width === void 0 || i.height === void 0)\n        throw new Error(\"Image size cannot be determined. Please provide the width and height of the image.\");\n      a = parseInt(i.width), l = parseInt(i.height);\n    }\n    let f = l / a, d = (u.borderLeftWidth || 0) + (u.borderRightWidth || 0) + (u.paddingLeft || 0) + (u.paddingRight || 0), h = (u.borderTopWidth || 0) + (u.borderBottomWidth || 0) + (u.paddingTop || 0) + (u.paddingBottom || 0), m = u.width || i.width, p = u.height || i.height, D = typeof m == \"number\" && typeof p == \"number\";\n    D && (m -= d, p -= h), m === void 0 && p === void 0 ? (m = \"100%\", e.setAspectRatio(1 / f)) : m === void 0 ? typeof p == \"number\" ? m = p / f : e.setAspectRatio(1 / f) : p === void 0 && (typeof m == \"number\" ? p = m * f : e.setAspectRatio(1 / f)), u.width = D ? m + d : m, u.height = D ? p + h : p, u.__src = s;\n  }\n  if (t === \"svg\") {\n    let s = i.viewBox || i.viewbox, a = xt(s), l = a ? a[3] / a[2] : null, { width: f, height: d } = i;\n    typeof f > \"u\" && d ? l == null ? f = 0 : typeof d == \"string\" && d.endsWith(\"%\") ? f = parseInt(d) / l + \"%\" : (d = G(d, n.fontSize, 1, n), f = d / l) : typeof d > \"u\" && f ? l == null ? f = 0 : typeof f == \"string\" && f.endsWith(\"%\") ? d = parseInt(f) * l + \"%\" : (f = G(f, n.fontSize, 1, n), d = f * l) : (typeof f < \"u\" && (f = G(f, n.fontSize, 1, n) || f), typeof d < \"u\" && (d = G(d, n.fontSize, 1, n) || d), f || (f = a == null ? void 0 : a[2]), d || (d = a == null ? void 0 : a[3])), !u.width && f && (u.width = f), !u.height && d && (u.height = d);\n  }\n  return e.setDisplay(Fe(u.display, { flex: o.DISPLAY_FLEX, block: o.DISPLAY_FLEX, none: o.DISPLAY_NONE, \"-webkit-box\": o.DISPLAY_FLEX }, o.DISPLAY_FLEX, \"display\")), e.setAlignContent(Fe(u.alignContent, { stretch: o.ALIGN_STRETCH, center: o.ALIGN_CENTER, \"flex-start\": o.ALIGN_FLEX_START, \"flex-end\": o.ALIGN_FLEX_END, \"space-between\": o.ALIGN_SPACE_BETWEEN, \"space-around\": o.ALIGN_SPACE_AROUND, baseline: o.ALIGN_BASELINE, normal: o.ALIGN_AUTO }, o.ALIGN_AUTO, \"alignContent\")), e.setAlignItems(Fe(u.alignItems, { stretch: o.ALIGN_STRETCH, center: o.ALIGN_CENTER, \"flex-start\": o.ALIGN_FLEX_START, \"flex-end\": o.ALIGN_FLEX_END, baseline: o.ALIGN_BASELINE, normal: o.ALIGN_AUTO }, o.ALIGN_STRETCH, \"alignItems\")), e.setAlignSelf(Fe(u.alignSelf, { stretch: o.ALIGN_STRETCH, center: o.ALIGN_CENTER, \"flex-start\": o.ALIGN_FLEX_START, \"flex-end\": o.ALIGN_FLEX_END, baseline: o.ALIGN_BASELINE, normal: o.ALIGN_AUTO }, o.ALIGN_AUTO, \"alignSelf\")), e.setJustifyContent(Fe(u.justifyContent, { center: o.JUSTIFY_CENTER, \"flex-start\": o.JUSTIFY_FLEX_START, \"flex-end\": o.JUSTIFY_FLEX_END, \"space-between\": o.JUSTIFY_SPACE_BETWEEN, \"space-around\": o.JUSTIFY_SPACE_AROUND }, o.JUSTIFY_FLEX_START, \"justifyContent\")), e.setFlexDirection(Fe(u.flexDirection, { row: o.FLEX_DIRECTION_ROW, column: o.FLEX_DIRECTION_COLUMN, \"row-reverse\": o.FLEX_DIRECTION_ROW_REVERSE, \"column-reverse\": o.FLEX_DIRECTION_COLUMN_REVERSE }, o.FLEX_DIRECTION_ROW, \"flexDirection\")), e.setFlexWrap(Fe(u.flexWrap, { wrap: o.WRAP_WRAP, nowrap: o.WRAP_NO_WRAP, \"wrap-reverse\": o.WRAP_WRAP_REVERSE }, o.WRAP_NO_WRAP, \"flexWrap\")), typeof u.gap < \"u\" && e.setGap(o.GUTTER_ALL, u.gap), typeof u.rowGap < \"u\" && e.setGap(o.GUTTER_ROW, u.rowGap), typeof u.columnGap < \"u\" && e.setGap(o.GUTTER_COLUMN, u.columnGap), typeof u.flexBasis < \"u\" && e.setFlexBasis(u.flexBasis), e.setFlexGrow(typeof u.flexGrow > \"u\" ? 0 : u.flexGrow), e.setFlexShrink(typeof u.flexShrink > \"u\" ? 0 : u.flexShrink), typeof u.maxHeight < \"u\" && e.setMaxHeight(u.maxHeight), typeof u.maxWidth < \"u\" && e.setMaxWidth(u.maxWidth), typeof u.minHeight < \"u\" && e.setMinHeight(u.minHeight), typeof u.minWidth < \"u\" && e.setMinWidth(u.minWidth), e.setOverflow(Fe(u.overflow, { visible: o.OVERFLOW_VISIBLE, hidden: o.OVERFLOW_HIDDEN }, o.OVERFLOW_VISIBLE, \"overflow\")), e.setMargin(o.EDGE_TOP, u.marginTop || 0), e.setMargin(o.EDGE_BOTTOM, u.marginBottom || 0), e.setMargin(o.EDGE_LEFT, u.marginLeft || 0), e.setMargin(o.EDGE_RIGHT, u.marginRight || 0), e.setBorder(o.EDGE_TOP, u.borderTopWidth || 0), e.setBorder(o.EDGE_BOTTOM, u.borderBottomWidth || 0), e.setBorder(o.EDGE_LEFT, u.borderLeftWidth || 0), e.setBorder(o.EDGE_RIGHT, u.borderRightWidth || 0), e.setPadding(o.EDGE_TOP, u.paddingTop || 0), e.setPadding(o.EDGE_BOTTOM, u.paddingBottom || 0), e.setPadding(o.EDGE_LEFT, u.paddingLeft || 0), e.setPadding(o.EDGE_RIGHT, u.paddingRight || 0), e.setPositionType(Fe(u.position, { absolute: o.POSITION_TYPE_ABSOLUTE, relative: o.POSITION_TYPE_RELATIVE }, o.POSITION_TYPE_RELATIVE, \"position\")), typeof u.top < \"u\" && e.setPosition(o.EDGE_TOP, u.top), typeof u.bottom < \"u\" && e.setPosition(o.EDGE_BOTTOM, u.bottom), typeof u.left < \"u\" && e.setPosition(o.EDGE_LEFT, u.left), typeof u.right < \"u\" && e.setPosition(o.EDGE_RIGHT, u.right), typeof u.height < \"u\" ? e.setHeight(u.height) : e.setHeightAuto(), typeof u.width < \"u\" ? e.setWidth(u.width) : e.setWidthAuto(), [u, On(u)];\n}\nc();\nc();\nc();\nvar wu = [1, 0, 0, 1, 0, 0];\nfunction wf(e, t, n) {\n  let r = [...wu];\n  for (let i of e) {\n    let o = Object.keys(i)[0], u = i[o];\n    if (typeof u == \"string\")\n      if (o === \"translateX\")\n        u = parseFloat(u) / 100 * t, i[o] = u;\n      else if (o === \"translateY\")\n        u = parseFloat(u) / 100 * n, i[o] = u;\n      else\n        throw new Error(`Invalid transform: \"${o}: ${u}\".`);\n    let s = u, a = [...wu];\n    switch (o) {\n      case \"translateX\":\n        a[4] = s;\n        break;\n      case \"translateY\":\n        a[5] = s;\n        break;\n      case \"scale\":\n        a[0] = s, a[3] = s;\n        break;\n      case \"scaleX\":\n        a[0] = s;\n        break;\n      case \"scaleY\":\n        a[3] = s;\n        break;\n      case \"rotate\": {\n        let l = s * Math.PI / 180, f = Math.cos(l), d = Math.sin(l);\n        a[0] = f, a[1] = d, a[2] = -d, a[3] = f;\n        break;\n      }\n      case \"skewX\":\n        a[2] = Math.tan(s * Math.PI / 180);\n        break;\n      case \"skewY\":\n        a[1] = Math.tan(s * Math.PI / 180);\n        break;\n    }\n    r = Rt(a, r);\n  }\n  e.splice(0, e.length), e.push(...r), e.__resolved = true;\n}\nfunction Nt({ left: e, top: t, width: n, height: r }, i, o, u) {\n  let s;\n  i.__resolved || wf(i, n, r);\n  let a = i;\n  if (o)\n    s = a;\n  else {\n    let l = (u == null ? void 0 : u.xAbsolute) ?? ((u == null ? void 0 : u.xRelative) ?? 50) * n / 100, f = (u == null ? void 0 : u.yAbsolute) ?? ((u == null ? void 0 : u.yRelative) ?? 50) * r / 100, d = e + l, h = t + f;\n    s = Rt([1, 0, 0, 1, d, h], Rt(a, [1, 0, 0, 1, -d, -h])), a.__parent && (s = Rt(a.__parent, s)), a.splice(0, 6, ...s);\n  }\n  return `matrix(${s.map((l) => l.toFixed(2)).join(\",\")})`;\n}\nfunction Cu({ left: e, top: t, width: n, height: r, isInheritingTransform: i }, o) {\n  let u = \"\", s = 1;\n  return o.transform && (u = Nt({ left: e, top: t, width: n, height: r }, o.transform, i, o.transformOrigin)), o.opacity !== void 0 && (s = +o.opacity), { matrix: u, opacity: s };\n}\nfunction Rn({ id: e, content: t, filter: n, left: r, top: i, width: o, height: u, matrix: s, opacity: a, image: l, clipPathId: f, debug: d, shape: h, decorationShape: m }, p) {\n  let D = \"\";\n  if (d && (D = k(\"rect\", { x: r, y: i - u, width: o, height: u, fill: \"transparent\", stroke: \"#575eff\", \"stroke-width\": 1, transform: s || void 0, \"clip-path\": f ? `url(#${f})` : void 0 })), l) {\n    let b = { href: l, x: r, y: i, width: o, height: u, transform: s || void 0, \"clip-path\": f ? `url(#${f})` : void 0, style: p.filter ? `filter:${p.filter}` : void 0 };\n    return [(n ? `${n}<g filter=\"url(#satori_s-${e})\">` : \"\") + k(\"image\", { ...b, opacity: a !== 1 ? a : void 0 }) + (m || \"\") + (n ? \"</g>\" : \"\") + D, \"\"];\n  }\n  let F = { x: r, y: i, width: o, height: u, \"font-weight\": p.fontWeight, \"font-style\": p.fontStyle, \"font-size\": p.fontSize, \"font-family\": p.fontFamily, \"letter-spacing\": p.letterSpacing || void 0, transform: s || void 0, \"clip-path\": f ? `url(#${f})` : void 0, style: p.filter ? `filter:${p.filter}` : void 0 };\n  return [(n ? `${n}<g filter=\"url(#satori_s-${e})\">` : \"\") + k(\"text\", { ...F, fill: p.color, opacity: a !== 1 ? a : void 0 }, (0, import_escape_html.default)(t)) + (m || \"\") + (n ? \"</g>\" : \"\") + D, h ? k(\"text\", F, (0, import_escape_html.default)(t)) : \"\"];\n}\nc();\nfunction Ef(e, t, n) {\n  return e.replace(/([MA])([0-9.-]+),([0-9.-]+)/g, function(r, i, o, u) {\n    return i + (parseFloat(o) + t) + \",\" + (parseFloat(u) + n);\n  });\n}\nvar jr = 1.1;\nfunction _u({ id: e, width: t, height: n }, r) {\n  if (!r.shadowColor || !r.shadowOffset || typeof r.shadowRadius > \"u\")\n    return \"\";\n  let i = r.shadowColor.length, o = \"\", u = \"\", s = 0, a = t, l = 0, f = n;\n  for (let d = 0; d < i; d++) {\n    let h = r.shadowRadius[d] * r.shadowRadius[d] / 4;\n    s = Math.min(r.shadowOffset[d].width - h, s), a = Math.max(r.shadowOffset[d].width + h + t, a), l = Math.min(r.shadowOffset[d].height - h, l), f = Math.max(r.shadowOffset[d].height + h + n, f), o += k(\"feDropShadow\", { dx: r.shadowOffset[d].width, dy: r.shadowOffset[d].height, stdDeviation: r.shadowRadius[d] / 2, \"flood-color\": r.shadowColor[d], \"flood-opacity\": 1, ...i > 1 ? { in: \"SourceGraphic\", result: `satori_s-${e}-result-${d}` } : {} }), i > 1 && (u = k(\"feMergeNode\", { in: `satori_s-${e}-result-${d}` }) + u);\n  }\n  return k(\"filter\", { id: `satori_s-${e}`, x: (s / t * 100 * jr).toFixed(2) + \"%\", y: (l / n * 100 * jr).toFixed(2) + \"%\", width: ((a - s) / t * 100 * jr).toFixed(2) + \"%\", height: ((f - l) / n * 100 * jr).toFixed(2) + \"%\" }, o + (u ? k(\"feMerge\", {}, u) : \"\"));\n}\nfunction Su({ width: e, height: t, shape: n, opacity: r, id: i }, o) {\n  if (!o.boxShadow)\n    return null;\n  let u = \"\", s = \"\";\n  for (let a = o.boxShadow.length - 1; a >= 0; a--) {\n    let l = \"\", f = o.boxShadow[a];\n    f.spreadRadius && f.inset && (f.spreadRadius = -f.spreadRadius);\n    let d = f.blurRadius * f.blurRadius / 4 + (f.spreadRadius || 0), h = Math.min(-d - (f.inset ? f.offsetX : 0), 0), m = Math.max(d + e - (f.inset ? f.offsetX : 0), e), p = Math.min(-d - (f.inset ? f.offsetY : 0), 0), D = Math.max(d + t - (f.inset ? f.offsetY : 0), t), F = `satori_s-${i}-${a}`, b = `satori_ms-${i}-${a}`, v = f.spreadRadius ? n.replace('stroke-width=\"0\"', `stroke-width=\"${f.spreadRadius * 2}\"`) : n;\n    l += k(\"mask\", { id: b, maskUnits: \"userSpaceOnUse\" }, k(\"rect\", { x: 0, y: 0, width: o._viewportWidth || \"100%\", height: o._viewportHeight || \"100%\", fill: f.inset ? \"#000\" : \"#fff\" }) + v.replace('fill=\"#fff\"', f.inset ? 'fill=\"#fff\"' : 'fill=\"#000\"').replace('stroke=\"#fff\"', \"\"));\n    let E = v.replace(/d=\"([^\"]+)\"/, (C, w) => 'd=\"' + Ef(w, f.offsetX, f.offsetY) + '\"').replace(/x=\"([^\"]+)\"/, (C, w) => 'x=\"' + (parseFloat(w) + f.offsetX) + '\"').replace(/y=\"([^\"]+)\"/, (C, w) => 'y=\"' + (parseFloat(w) + f.offsetY) + '\"');\n    f.spreadRadius && f.spreadRadius < 0 && (l += k(\"mask\", { id: b + \"-neg\", maskUnits: \"userSpaceOnUse\" }, E.replace('stroke=\"#fff\"', 'stroke=\"#000\"').replace(/stroke-width=\"[^\"]+\"/, `stroke-width=\"${-f.spreadRadius * 2}\"`))), f.spreadRadius && f.spreadRadius < 0 && (E = k(\"g\", { mask: `url(#${b}-neg)` }, E)), l += k(\"defs\", {}, k(\"filter\", { id: F, x: `${h / e * 100}%`, y: `${p / t * 100}%`, width: `${(m - h) / e * 100}%`, height: `${(D - p) / t * 100}%` }, k(\"feGaussianBlur\", { stdDeviation: f.blurRadius / 2, result: \"b\" }) + k(\"feFlood\", { \"flood-color\": f.color, in: \"SourceGraphic\", result: \"f\" }) + k(\"feComposite\", { in: \"f\", in2: \"b\", operator: f.inset ? \"out\" : \"in\" }))) + k(\"g\", { mask: `url(#${b})`, filter: `url(#${F})`, opacity: r }, E), f.inset ? s += l : u += l;\n  }\n  return [u, s];\n}\nc();\nfunction Ln({ width: e, left: t, top: n, ascender: r, clipPathId: i }, o) {\n  let { textDecorationColor: u, textDecorationStyle: s, textDecorationLine: a, fontSize: l } = o;\n  if (!a || a === \"none\")\n    return \"\";\n  let f = Math.max(1, l * 0.1), d = a === \"line-through\" ? n + r * 0.5 : a === \"underline\" ? n + r * 1.1 : n, h = s === \"dashed\" ? `${f * 1.2} ${f * 2}` : s === \"dotted\" ? `0 ${f * 2}` : void 0;\n  return k(\"line\", { x1: t, y1: d, x2: t + e, y2: d, stroke: u, \"stroke-width\": f, \"stroke-dasharray\": h, \"stroke-linecap\": s === \"dotted\" ? \"round\" : \"square\", \"clip-path\": i ? `url(#${i})` : void 0 });\n}\nc();\nfunction Mn(e) {\n  return e = e.replace(\"U+\", \"0x\"), String.fromCodePoint(Number(e));\n}\nvar $t = Mn(\"U+0020\");\nvar Nn = Mn(\"U+0009\");\nvar Wt = Mn(\"U+2026\");\nvar Cf = /* @__PURE__ */ new Set([Nn]);\nfunction _f(e) {\n  return Cf.has(e);\n}\nasync function* $n(e, t) {\n  let n = await Ge(), { parentStyle: r, inheritedStyle: i, parent: o, font: u, id: s, isInheritingTransform: a, debug: l, embedFont: f, graphemeImages: d, locale: h, canLoadAdditionalAssets: m } = t, { textAlign: p, whiteSpace: D, wordBreak: F, lineHeight: b, textTransform: v, textWrap: E, fontSize: C, filter: w, tabSize: O = 8, _inheritedBackgroundClipTextPath: R } = r;\n  e = Sf(e, v, h);\n  let { content: L, shouldCollapseTabsAndSpaces: Y, allowSoftWrap: se } = Af(e, D), { words: ae, requiredBreaks: le, allowBreakWord: q } = Tf(L, F), [$, J] = kf(r, se), he = Of(n, p);\n  o.insertChild(he, o.getChildCount()), su(r.flexShrink) && o.setFlexShrink(1);\n  let X = u.getEngine(C, b, r, h), re = m ? Se(L, \"grapheme\").filter((M) => !_f(M) && !X.has(M)) : [];\n  yield re.map((M) => ({ word: M, locale: h })), re.length && (X = u.getEngine(C, b, r, h));\n  function ce(M) {\n    return !!(d && d[M]);\n  }\n  let be = Pf(X, r);\n  function I(M) {\n    let U = 0;\n    for (let V of M)\n      ce(V) ? U += C : U += be(V);\n    return U;\n  }\n  function B(M) {\n    return I(Se(M, \"grapheme\"));\n  }\n  let W = $r(O) ? G(O, C, 1, r) : be($t) * O, N = (M, U) => {\n    if (M.length === 0)\n      return { originWidth: 0, endingSpacesWidth: 0, text: M };\n    let { index: V, tabCount: z } = If(M), ue = 0, Q = \"\";\n    if (z > 0) {\n      Q = M.slice(0, V);\n      let me = M.slice(V + z), ne = B(Q), De = ne + U;\n      ue = (W === 0 ? ne : (Math.floor(De / W) + z) * W) + B(me);\n    } else\n      ue = B(M);\n    let ve = M.trimEnd() === M ? ue : B(M.trimEnd());\n    return { originWidth: ue, endingSpacesWidth: ue - ve, text: M };\n  }, fe = [], xe = [], Ne = [], ht = [], Tt = [];\n  function vn(M) {\n    let U = 0, V = 0, z = -1, ue = 0, Q = 0, ve = 0, me = 0;\n    fe = [], Ne = [0], ht = [], Tt = [];\n    let ne = 0;\n    for (; ne < ae.length && U < $; ) {\n      let De = ae[ne], K = le[ne], _e = 0, Ir = 0, { originWidth: it, endingSpacesWidth: Pt, text: ot } = N(De, Q);\n      De = ot, _e = it, Ir = Pt, K && ve === 0 && (ve = X.height(De));\n      let de = \",.!?:-@)>]}%#\".indexOf(De[0]) < 0, ye = !Q, ut = ne && de && Q + _e > M + Ir && se;\n      if (q && _e > M && (!Q || ut || K)) {\n        let Be = Se(De, \"grapheme\");\n        ae.splice(ne, 1, ...Be), Q > 0 && (fe.push(Q), xe.push(me), U++, ue += ve, Q = 0, ve = 0, me = 0, Ne.push(1), z = -1);\n        continue;\n      }\n      if (K || ut)\n        Y && De === \" \" && (_e = 0), fe.push(Q), xe.push(me), U++, ue += ve, Q = _e, ve = _e ? X.height(De) : 0, me = _e ? X.baseline(De) : 0, Ne.push(1), z = -1, K || (V = Math.max(V, M));\n      else {\n        Q += _e;\n        let Be = X.height(De);\n        Be > ve && (ve = Be, me = X.baseline(De)), ye && Ne[Ne.length - 1]++;\n      }\n      ye && z++, V = Math.max(V, Q);\n      let Br = Q - _e;\n      if (_e === 0)\n        Tt.push({ y: ue, x: Br, width: 0, line: U, lineIndex: z, isImage: false });\n      else {\n        let Be = Se(De, \"word\");\n        for (let Re = 0; Re < Be.length; Re++) {\n          let Le = Be[Re], Qe = 0, st = false;\n          ce(Le) ? (Qe = C, st = true) : Qe = be(Le), ht.push(Le), Tt.push({ y: ue, x: Br, width: Qe, line: U, lineIndex: z, isImage: st }), Br += Qe;\n        }\n      }\n      ne++;\n    }\n    return Q && (U < $ && (ue += ve), U++, fe.push(Q), xe.push(me)), { width: V, height: ue };\n  }\n  let kr = { width: 0, height: 0 };\n  he.setMeasureFunc((M) => {\n    let { width: U, height: V } = vn(M);\n    if (E === \"balance\") {\n      let z = U / 2, ue = U, Q = U;\n      for (; z + 1 < ue; ) {\n        Q = (z + ue) / 2;\n        let { height: ve } = vn(Q);\n        ve > V ? z = Q : ue = Q;\n      }\n      return vn(ue), kr = { width: ue, height: V }, { width: ue, height: V };\n    }\n    return kr = { width: U, height: V }, { width: U, height: V };\n  });\n  let [_l, Sl] = yield, yn = \"\", Tr = \"\", Ye = i._inheritedClipPathId, $o = i._inheritedMaskId, { left: Wo, top: qo, width: xn, height: kl } = he.getComputedLayout(), Ar = o.getComputedWidth() - o.getComputedPadding(n.EDGE_LEFT) - o.getComputedPadding(n.EDGE_RIGHT) - o.getComputedBorder(n.EDGE_LEFT) - o.getComputedBorder(n.EDGE_RIGHT), mt = _l + Wo, Dt = Sl + qo, { matrix: ze, opacity: Or } = Cu({ left: Wo, top: qo, width: xn, height: kl, isInheritingTransform: a }, r), gt = \"\";\n  if (r.textShadowOffset) {\n    let { textShadowColor: M, textShadowOffset: U, textShadowRadius: V } = r;\n    Array.isArray(r.textShadowOffset) || (M = [M], U = [U], V = [V]), gt = _u({ width: kr.width, height: kr.height, id: s }, { shadowColor: M, shadowOffset: U, shadowRadius: V }), gt = k(\"defs\", {}, gt);\n  }\n  let At = \"\", Pr = \"\", Uo = \"\", Ot = -1, bt = {}, Xe = null, zo = 0;\n  for (let M = 0; M < ht.length; M++) {\n    let U = Tt[M], V = Tt[M + 1];\n    if (!U)\n      continue;\n    let z = ht[M], ue = null, Q = false, ve = d ? d[z] : null, me = U.y, ne = U.x, De = U.width, K = U.line;\n    if (K === Ot)\n      continue;\n    let _e = false;\n    if (fe.length > 1) {\n      let de = xn - fe[K];\n      if (p === \"right\" || p === \"end\")\n        ne += de;\n      else if (p === \"center\")\n        ne += de / 2;\n      else if (p === \"justify\" && K < fe.length - 1) {\n        let ye = Ne[K];\n        ne += (ye > 1 ? de / (ye - 1) : 0) * U.lineIndex, _e = true;\n      }\n    }\n    if (bt[K] || (bt[K] = [ne, _e ? xn : fe[K]]), $ !== 1 / 0) {\n      let Be = function(Re, Le) {\n        let Qe = Se(Le, \"grapheme\", h), st = \"\", jo = 0;\n        for (let Ho of Qe) {\n          let Vo = Re + I([st + Ho]);\n          if (st && Vo + ye > Ar)\n            break;\n          st += Ho, jo = Vo;\n        }\n        return { subset: st, resolvedWidth: jo };\n      }, de = J, ye = be(J);\n      ye > Ar && (de = Wt, ye = be(de));\n      let ut = be($t), Go = K < fe.length - 1;\n      if (K + 1 === $ && (Go || fe[K] > Ar)) {\n        if (ne + De + ye + ut > Ar) {\n          let { subset: Re, resolvedWidth: Le } = Be(ne, z);\n          z = Re + de, Ot = K, bt[K][1] = Le, Q = true;\n        } else if (V && V.line !== K)\n          if (p === \"center\") {\n            let { subset: Re, resolvedWidth: Le } = Be(ne, z);\n            z = Re + de, Ot = K, bt[K][1] = Le, Q = true;\n          } else {\n            let Re = ht[M + 1], { subset: Le, resolvedWidth: Qe } = Be(De + ne, Re);\n            z = z + Le + de, Ot = K, bt[K][1] = Qe, Q = true;\n          }\n      }\n    }\n    let Ir = xe[K], it = X.baseline(z), Pt = X.height(z), ot = Ir - it;\n    if (ve)\n      me += 0;\n    else if (f) {\n      if (!z.includes(Nn) && !iu.includes(z) && ht[M + 1] && V && !V.isImage && me === V.y && !Q) {\n        Xe === null && (zo = ne), Xe = Xe === null ? z : Xe + z;\n        continue;\n      }\n      let de = Xe === null ? z : Xe + z, ye = Xe === null ? ne : zo, ut = U.width + ne - ye;\n      ue = X.getSVG(de.replace(/(\\t)+/g, \"\"), { ...r, left: mt + ye, top: Dt + me + it + ot, letterSpacing: r.letterSpacing }), Xe = null, l && (Uo += k(\"rect\", { x: mt + ye, y: Dt + me + ot, width: ut, height: Pt, fill: \"transparent\", stroke: \"#575eff\", \"stroke-width\": 1, transform: ze || void 0, \"clip-path\": Ye ? `url(#${Ye})` : void 0 }) + k(\"line\", { x1: mt + ne, x2: mt + ne + U.width, y1: Dt + me + ot + it, y2: Dt + me + ot + it, stroke: \"#14c000\", \"stroke-width\": 1, transform: ze || void 0, \"clip-path\": Ye ? `url(#${Ye})` : void 0 }));\n    } else\n      me += it + ot;\n    if (r.textDecorationLine && (K !== (V == null ? void 0 : V.line) || Ot === K)) {\n      let de = bt[K];\n      de && !de[2] && (At += Ln({ left: mt + de[0], top: Dt + Pt * +K, width: de[1], ascender: X.baseline(z), clipPathId: Ye }, r), de[2] = 1);\n    }\n    if (ue !== null)\n      Pr += ue + \" \";\n    else {\n      let [de, ye] = Rn({ content: z, filter: gt, id: s, left: mt + ne, top: Dt + me, width: De, height: Pt, matrix: ze, opacity: Or, image: ve, clipPathId: Ye, debug: l, shape: !!R, decorationShape: At }, r);\n      yn += de, Tr += ye, At = \"\";\n    }\n    if (Q)\n      break;\n  }\n  if (Pr) {\n    let M = r.color !== \"transparent\" && Or !== 0 ? k(\"path\", { fill: r.color, d: Pr, transform: ze || void 0, opacity: Or !== 1 ? Or : void 0, \"clip-path\": Ye ? `url(#${Ye})` : void 0, mask: $o ? `url(#${$o})` : void 0, style: w ? `filter:${w}` : void 0 }) : \"\";\n    R && (Tr = k(\"path\", { d: Pr, transform: ze || void 0 })), yn += (gt ? gt + k(\"g\", { filter: `url(#satori_s-${s})` }, M + At) : M + At) + Uo;\n  }\n  return Tr && (r._inheritedBackgroundClipTextPath.value += Tr), yn;\n}\nfunction Sf(e, t, n) {\n  return t === \"uppercase\" ? e = e.toLocaleUpperCase(n) : t === \"lowercase\" ? e = e.toLocaleLowerCase(n) : t === \"capitalize\" && (e = Se(e, \"word\", n).map((r) => Se(r, \"grapheme\", n).map((i, o) => o === 0 ? i.toLocaleUpperCase(n) : i).join(\"\")).join(\"\")), e;\n}\nfunction kf(e, t) {\n  let { textOverflow: n, lineClamp: r, WebkitLineClamp: i, WebkitBoxOrient: o, overflow: u, display: s } = e;\n  if (s === \"block\" && r) {\n    let [a, l = Wt] = Bf(r);\n    if (a)\n      return [a, l];\n  }\n  return n === \"ellipsis\" && s === \"-webkit-box\" && o === \"vertical\" && uu(i) && i > 0 ? [i, Wt] : n === \"ellipsis\" && u === \"hidden\" && !t ? [1, Wt] : [1 / 0];\n}\nfunction Tf(e, t) {\n  let n = [\"break-all\", \"break-word\"].includes(t), { words: r, requiredBreaks: i } = au(e, t);\n  return { words: r, requiredBreaks: i, allowBreakWord: n };\n}\nfunction Af(e, t) {\n  let n = [\"pre\", \"pre-wrap\", \"pre-line\"].includes(t), r = [\"normal\", \"nowrap\", \"pre-line\"].includes(t), i = ![\"pre\", \"nowrap\"].includes(t);\n  return n || (e = e.replace(/\\n/g, $t)), r && (e = e.replace(/([ ]|\\t)+/g, $t).trim()), { content: e, shouldCollapseTabsAndSpaces: r, allowSoftWrap: i };\n}\nfunction Of(e, t) {\n  let n = e.Node.create();\n  return n.setAlignItems(e.ALIGN_BASELINE), n.setJustifyContent(Fe(t, { left: e.JUSTIFY_FLEX_START, right: e.JUSTIFY_FLEX_END, center: e.JUSTIFY_CENTER, justify: e.JUSTIFY_SPACE_BETWEEN, start: e.JUSTIFY_FLEX_START, end: e.JUSTIFY_FLEX_END }, e.JUSTIFY_FLEX_START, \"textAlign\")), n;\n}\nfunction Pf(e, t) {\n  let n = /* @__PURE__ */ new Map();\n  return function(i) {\n    if (n.has(i))\n      return n.get(i);\n    let o = e.measure(i, t);\n    return n.set(i, o), o;\n  };\n}\nfunction If(e) {\n  let t = /(\\t)+/.exec(e);\n  return t ? { index: t.index, tabCount: t[0].length } : { index: null, tabCount: 0 };\n}\nfunction Bf(e) {\n  if (typeof e == \"number\")\n    return [e];\n  let t = /^(\\d+)\\s*\"(.*)\"$/, n = /^(\\d+)\\s*'(.*)'$/, r = t.exec(e), i = n.exec(e);\n  if (r) {\n    let o = +r[1], u = r[2];\n    return [o, u];\n  } else if (i) {\n    let o = +i[1], u = i[2];\n    return [o, u];\n  }\n  return [];\n}\nc();\nc();\nc();\nvar Wn = Wn || {};\nvar ku = { type: \"directional\", value: \"bottom\" };\nWn.parse = function() {\n  var e = { linearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(linear\\-gradient)/i, repeatingLinearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-linear\\-gradient)/i, radialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(radial\\-gradient)/i, repeatingRadialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-radial\\-gradient)/i, sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|top (left|right)|bottom (left|right)|left|right|top|bottom)/i, extentKeywords: /^(closest\\-side|closest\\-corner|farthest\\-side|farthest\\-corner|contain|cover)/, positionKeywords: /^(left|center|right|top|bottom)/i, pixelValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))px/, percentageValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))\\%/, emLikeValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))(r?em|vw|vh)/, angleValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))deg/, zeroValue: /[0]/, startCall: /^\\(/, endCall: /^\\)/, comma: /^,/, hexColor: /^\\#([0-9a-fA-F]+)/, literalColor: /^([a-zA-Z]+)/, rgbColor: /^rgb/i, rgbaColor: /^rgba/i, number: /^(([0-9]*\\.[0-9]+)|([0-9]+\\.?))/ }, t = \"\";\n  function n(I) {\n    var B = new Error(t + \": \" + I);\n    throw B.source = t, B;\n  }\n  function r() {\n    var I = i();\n    return t.length > 0 && n(\"Invalid input not EOF\"), I;\n  }\n  function i() {\n    return O(o);\n  }\n  function o() {\n    return s(\"linear-gradient\", e.linearGradient, l, ku) || s(\"repeating-linear-gradient\", e.repeatingLinearGradient, l, ku) || s(\"radial-gradient\", e.radialGradient, m) || s(\"repeating-radial-gradient\", e.repeatingRadialGradient, m);\n  }\n  function u(I = {}) {\n    var W, N, fe, xe;\n    let B = { ...I };\n    return Object.assign(B, { style: (B.style || []).length > 0 ? B.style : [{ type: \"extent-keyword\", value: \"farthest-corner\" }], at: { type: \"position\", value: { x: { type: \"position-keyword\", value: \"center\", ...((N = (W = B.at) == null ? void 0 : W.value) == null ? void 0 : N.x) || {} }, y: { type: \"position-keyword\", value: \"center\", ...((xe = (fe = B.at) == null ? void 0 : fe.value) == null ? void 0 : xe.y) || {} } } } }), I.value || Object.assign(B, { type: \"shape\", value: B.style.some((Ne) => [\"%\", \"extent-keyword\"].includes(Ne.type)) ? \"ellipse\" : \"circle\" }), B;\n  }\n  function s(I, B, W, N) {\n    return a(B, function(fe) {\n      var xe = W();\n      return xe ? ce(e.comma) || n(\"Missing comma before color stops\") : xe = N, { type: I, orientation: I.endsWith(\"radial-gradient\") ? (xe == null ? void 0 : xe.map((Ne) => u(Ne))) ?? [u()] : xe, colorStops: O(R) };\n    });\n  }\n  function a(I, B) {\n    var W = ce(I);\n    if (W) {\n      ce(e.startCall) || n(\"Missing (\");\n      var N = B(W);\n      return ce(e.endCall) || n(\"Missing )\"), N;\n    }\n  }\n  function l() {\n    return f() || d() || h();\n  }\n  function f() {\n    return re(\"directional\", e.sideOrCorner, 1);\n  }\n  function d() {\n    return re(\"angular\", e.angleValue, 1);\n  }\n  function h() {\n    return re(\"directional\", e.zeroValue, 0);\n  }\n  function m() {\n    var I, B = p(), W;\n    return B && (I = [], I.push(B), W = t, ce(e.comma) && (B = p(), B ? I.push(B) : t = W)), I;\n  }\n  function p() {\n    let I = D(), B = E();\n    if (!(!I && !B))\n      return { ...I, at: B };\n  }\n  function D() {\n    let I = F() || b(), B = v() || he() || $(), W = re(\"%\", e.percentageValue, 1);\n    if (I)\n      return { ...I, style: [B, W].filter((N) => N) };\n    if (B)\n      return { style: [B, W].filter((N) => N), ...F() || b() };\n  }\n  function F() {\n    return re(\"shape\", /^(circle)/i, 0);\n  }\n  function b() {\n    return re(\"shape\", /^(ellipse)/i, 0);\n  }\n  function v() {\n    return re(\"extent-keyword\", e.extentKeywords, 1);\n  }\n  function E() {\n    if (re(\"position\", /^at/, 0)) {\n      var I = C();\n      return I || n(\"Missing positioning value\"), I;\n    }\n  }\n  function C() {\n    var I = w();\n    if (I.x || I.y)\n      return { type: \"position\", value: I };\n  }\n  function w() {\n    return { x: $(), y: $() };\n  }\n  function O(I) {\n    var B = I(), W = [];\n    if (B)\n      for (W.push(B); ce(e.comma); )\n        B = I(), B ? W.push(B) : n(\"One extra comma\");\n    return W;\n  }\n  function R() {\n    var I = L();\n    return I || n(\"Expected color definition\"), I.length = $(), I;\n  }\n  function L() {\n    return se() || le() || ae() || Y();\n  }\n  function Y() {\n    return re(\"literal\", e.literalColor, 0);\n  }\n  function se() {\n    return re(\"hex\", e.hexColor, 1);\n  }\n  function ae() {\n    return a(e.rgbColor, function() {\n      return { type: \"rgb\", value: O(q) };\n    });\n  }\n  function le() {\n    return a(e.rgbaColor, function() {\n      return { type: \"rgba\", value: O(q) };\n    });\n  }\n  function q() {\n    return ce(e.number)[1];\n  }\n  function $() {\n    return re(\"%\", e.percentageValue, 1) || J() || he();\n  }\n  function J() {\n    return re(\"position-keyword\", e.positionKeywords, 1);\n  }\n  function he() {\n    return re(\"px\", e.pixelValue, 1) || X(e.emLikeValue, 1);\n  }\n  function X(I, B) {\n    var W = ce(I);\n    if (W)\n      return { type: W[5], value: W[B] };\n  }\n  function re(I, B, W) {\n    var N = ce(B);\n    if (N)\n      return { type: I, value: N[W] };\n  }\n  function ce(I) {\n    var B, W;\n    return W = /^[\\n\\r\\t\\s]+/.exec(t), W && be(W[0].length), B = I.exec(t), B && be(B[0].length), B;\n  }\n  function be(I) {\n    t = t.substr(I);\n  }\n  return function(I) {\n    return t = I.toString(), r();\n  };\n}();\nvar qn = Wn;\nfunction Lf(e) {\n  return e.type === \"literal\" ? e.value : e.type === \"hex\" ? `#${e.value}` : e.type === \"rgb\" ? `rgb(${e.value.join(\",\")})` : e.type === \"rgba\" ? `rgba(${e.value.join(\",\")})` : \"transparent\";\n}\nfunction Mf(e) {\n  let t = 0, n = 0, r = 0, i = 0;\n  return e.includes(\"top\") ? n = 1 : e.includes(\"bottom\") && (i = 1), e.includes(\"left\") ? t = 1 : e.includes(\"right\") && (r = 1), !t && !r && !n && !i && (n = 1), [t, n, r, i];\n}\nfunction Nf(e, t) {\n  return typeof e == \"string\" && e.endsWith(\"%\") ? t * parseFloat(e) / 100 : +e;\n}\nfunction Un(e, { x: t, y: n, defaultX: r, defaultY: i }) {\n  return (e ? e.split(\" \").map((o) => {\n    try {\n      let u = new Ke(o);\n      return u.type === \"length\" || u.type === \"number\" ? u.value : u.value + u.unit;\n    } catch {\n      return null;\n    }\n  }).filter((o) => o !== null) : [r, i]).map((o, u) => Nf(o, [t, n][u]));\n}\nfunction Tu(e, t, n) {\n  let r = [];\n  for (let s of t) {\n    let a = Lf(s);\n    if (!r.length && (r.push({ offset: 0, color: a }), typeof s.length > \"u\" || s.length.value === \"0\"))\n      continue;\n    let l = typeof s.length > \"u\" ? void 0 : s.length.type === \"%\" ? s.length.value / 100 : s.length.value / e;\n    r.push({ offset: l, color: a });\n  }\n  r.length || r.push({ offset: 0, color: \"transparent\" });\n  let i = r[r.length - 1];\n  i.offset !== 1 && (typeof i.offset > \"u\" ? i.offset = 1 : r.push({ offset: 1, color: i.color }));\n  let o = 0, u = 1;\n  for (let s = 0; s < r.length; s++)\n    if (typeof r[s].offset > \"u\") {\n      for (u < s && (u = s); typeof r[u].offset > \"u\"; )\n        u++;\n      r[s].offset = (r[u].offset - r[o].offset) / (u - o) * (s - o) + r[o].offset;\n    } else\n      o = s;\n  return n === \"mask\" ? r.map((s) => {\n    let a = index_esm_default(s.color);\n    return a.alpha === 0 ? { ...s, color: \"rgba(0, 0, 0, 1)\" } : { ...s, color: `rgba(255, 255, 255, ${a.alpha})` };\n  }) : r;\n}\nasync function qt({ id: e, width: t, height: n, left: r, top: i }, { image: o, size: u, position: s, repeat: a }, l, f) {\n  a = a || \"repeat\", f = f || \"background\";\n  let d = a === \"repeat-x\" || a === \"repeat\", h = a === \"repeat-y\" || a === \"repeat\", m = Un(u, { x: t, y: n, defaultX: t, defaultY: n }), p = Un(s, { x: t, y: n, defaultX: 0, defaultY: 0 });\n  if (o.startsWith(\"linear-gradient(\")) {\n    let D = qn.parse(o)[0], [F, b] = m, v, E, C, w, O;\n    if (D.orientation.type === \"directional\")\n      [v, E, C, w] = Mf(D.orientation.value), O = Math.sqrt(Math.pow((C - v) * F, 2) + Math.pow((w - E) * b, 2));\n    else if (D.orientation.type === \"angular\") {\n      let q = function($) {\n        if ($ = ($ % (Math.PI * 2) + Math.PI * 2) % (Math.PI * 2), Math.abs($ - Math.PI / 2) < 1e-6) {\n          v = 0, E = 0, C = 1, w = 0, O = F;\n          return;\n        } else if (Math.abs($) < 1e-6) {\n          v = 0, E = 1, C = 0, w = 0, O = b;\n          return;\n        }\n        if ($ >= Math.PI / 2 && $ < Math.PI) {\n          q(Math.PI - $), E = 1 - E, w = 1 - w;\n          return;\n        } else if ($ >= Math.PI) {\n          q($ - Math.PI);\n          let W = v;\n          v = C, C = W, W = E, E = w, w = W;\n          return;\n        }\n        let J = Math.tan($), he = J * le, X = Math.atan(he), re = Math.sqrt(2) * Math.cos(Math.PI / 4 - X);\n        v = 0, E = 1, C = Math.sin(X) * re, w = 1 - Math.cos(X) * re;\n        let ce = 1, be = 1 / J, I = Math.abs((ce * le + be) / Math.sqrt(ce * ce + be * be) / Math.sqrt(le * le + 1));\n        O = Math.sqrt(F * F + b * b) * I;\n      }, le = F / b;\n      q(+D.orientation.value / 180 * Math.PI);\n    }\n    let R = Tu(O, D.colorStops, f), L = `satori_bi${e}`, Y = `satori_pattern_${e}`, se = k(\"pattern\", { id: Y, x: p[0] / t, y: p[1] / n, width: d ? F / t : \"1\", height: h ? b / n : \"1\", patternUnits: \"objectBoundingBox\" }, k(\"linearGradient\", { id: L, x1: v, y1: E, x2: C, y2: w }, R.map((ae) => k(\"stop\", { offset: ae.offset * 100 + \"%\", \"stop-color\": ae.color })).join(\"\")) + k(\"rect\", { x: 0, y: 0, width: F, height: b, fill: `url(#${L})` }));\n    return [Y, se];\n  }\n  if (o.startsWith(\"radial-gradient(\")) {\n    let D = qn.parse(o)[0], F = D.orientation[0], [b, v] = m, E = \"circle\", C = b / 2, w = v / 2;\n    if (F.type === \"shape\") {\n      if (E = F.value, F.at)\n        if (F.at.type === \"position\") {\n          let q = $f(F.at.value.x, F.at.value.y, b, v, l.fontSize, l);\n          C = q.x, w = q.y;\n        } else\n          throw new Error(\"orientation.at.type not implemented: \" + F.at.type);\n    } else\n      throw new Error(\"orientation.type not implemented: \" + F.type);\n    let O = Tu(t, D.colorStops, f), R = `satori_radial_${e}`, L = `satori_pattern_${e}`, Y = `satori_mask_${e}`, se = Wf(E, F.style, l.fontSize, { x: C, y: w }, [b, v], l), ae = k(\"pattern\", { id: L, x: p[0] / t, y: p[1] / n, width: d ? b / t : \"1\", height: h ? v / n : \"1\", patternUnits: \"objectBoundingBox\" }, k(\"radialGradient\", { id: R }, O.map((q) => k(\"stop\", { offset: q.offset, \"stop-color\": q.color })).join(\"\")) + k(\"mask\", { id: Y }, k(\"rect\", { x: 0, y: 0, width: b, height: v, fill: \"#fff\" })) + k(\"rect\", { x: 0, y: 0, width: b, height: v, fill: O.at(-1).color }) + k(E, { cx: C, cy: w, width: b, height: v, ...se, fill: `url(#${R})`, mask: `url(#${Y})` }));\n    return [L, ae];\n  }\n  if (o.startsWith(\"url(\")) {\n    let D = Un(u, { x: t, y: n, defaultX: 0, defaultY: 0 }), [F, b, v] = await Ft(o.slice(4, -1)), E = f === \"mask\" ? b || D[0] : D[0] || b, C = f === \"mask\" ? v || D[1] : D[1] || v;\n    return [`satori_bi${e}`, k(\"pattern\", { id: `satori_bi${e}`, patternContentUnits: \"userSpaceOnUse\", patternUnits: \"userSpaceOnUse\", x: p[0] + r, y: p[1] + i, width: d ? E : \"100%\", height: h ? C : \"100%\" }, k(\"image\", { x: 0, y: 0, width: E, height: C, preserveAspectRatio: \"none\", href: F }))];\n  }\n  throw new Error(`Invalid background image: \"${o}\"`);\n}\nfunction $f(e, t, n, r, i, o) {\n  let u = { x: n / 2, y: r / 2 };\n  return e.type === \"position-keyword\" ? Object.assign(u, Au(e.value, n, r, \"x\")) : u.x = G(`${e.value}${e.type}`, i, n, o, true), t.type === \"position-keyword\" ? Object.assign(u, Au(t.value, n, r, \"y\")) : u.y = G(`${t.value}${t.type}`, i, r, o, true), u;\n}\nfunction Au(e, t, n, r) {\n  switch (e) {\n    case \"center\":\n      return { [r]: r === \"x\" ? t / 2 : n / 2 };\n    case \"left\":\n      return { x: 0 };\n    case \"top\":\n      return { y: 0 };\n    case \"right\":\n      return { x: t };\n    case \"bottom\":\n      return { y: n };\n  }\n}\nfunction Wf(e, t, n, r, i, o) {\n  let [u, s] = i, { x: a, y: l } = r, f = {}, d = 0, h = 0;\n  if (!t.some((p) => p.type === \"extent-keyword\")) {\n    if (t.some((p) => p.value.startsWith(\"-\")))\n      throw new Error(\"disallow setting negative values to the size of the shape. Check https://w3c.github.io/csswg-drafts/css-images/#valdef-rg-size-length-0\");\n    return e === \"circle\" ? { r: G(`${t[0].value}${t[0].type}`, n, u, o, true) } : { rx: G(`${t[0].value}${t[0].type}`, n, u, o, true), ry: G(`${t[1].value}${t[1].type}`, n, s, o, true) };\n  }\n  switch (t[0].value) {\n    case \"farthest-corner\":\n      d = Math.max(Math.abs(u - a), Math.abs(a)), h = Math.max(Math.abs(s - l), Math.abs(l));\n      break;\n    case \"closest-corner\":\n      d = Math.min(Math.abs(u - a), Math.abs(a)), h = Math.min(Math.abs(s - l), Math.abs(l));\n      break;\n    case \"farthest-side\":\n      return e === \"circle\" ? f.r = Math.max(Math.abs(u - a), Math.abs(a), Math.abs(s - l), Math.abs(l)) : (f.rx = Math.max(Math.abs(u - a), Math.abs(a)), f.ry = Math.max(Math.abs(s - l), Math.abs(l))), f;\n    case \"closest-side\":\n      return e === \"circle\" ? f.r = Math.min(Math.abs(u - a), Math.abs(a), Math.abs(s - l), Math.abs(l)) : (f.rx = Math.min(Math.abs(u - a), Math.abs(a)), f.ry = Math.min(Math.abs(s - l), Math.abs(l))), f;\n  }\n  if (e === \"circle\")\n    f.r = Math.sqrt(d * d + h * h);\n  else {\n    let p = h !== 0 ? d / h : 1;\n    d === 0 ? (f.rx = 0, f.ry = 0) : (f.ry = Math.sqrt(d * d + h * h * p * p) / p, f.rx = f.ry * p);\n  }\n  return f;\n}\nc();\nfunction qf([e, t]) {\n  return Math.round(e * 1e3) === 0 && Math.round(t * 1e3) === 0 ? 0 : Math.round(e * t / Math.sqrt(e * e + t * t) * 1e3) / 1e3;\n}\nfunction Hr(e, t, n) {\n  return n < e + t && (n / 2 < e && n / 2 < t ? e = t = n / 2 : n / 2 < e ? e = n - t : n / 2 < t && (t = n - e)), [e, t];\n}\nfunction Vr(e) {\n  e[0] = e[1] = Math.min(e[0], e[1]);\n}\nfunction Yr(e, t, n, r, i) {\n  if (typeof e == \"string\") {\n    let o = e.split(\" \").map((s) => s.trim()), u = !o[1] && !o[0].endsWith(\"%\");\n    return o[1] = o[1] || o[0], [u, [Math.min(G(o[0], r, t, i, true), t), Math.min(G(o[1], r, n, i, true), n)]];\n  }\n  return typeof e == \"number\" ? [true, [Math.min(e, t), Math.min(e, n)]] : [true, void 0];\n}\nvar Xr = (e) => e && e[0] !== 0 && e[1] !== 0;\nfunction Ze({ left: e, top: t, width: n, height: r }, i, o) {\n  let { borderTopLeftRadius: u, borderTopRightRadius: s, borderBottomLeftRadius: a, borderBottomRightRadius: l, fontSize: f } = i, d, h, m, p;\n  if ([d, u] = Yr(u, n, r, f, i), [h, s] = Yr(s, n, r, f, i), [m, a] = Yr(a, n, r, f, i), [p, l] = Yr(l, n, r, f, i), !o && !Xr(u) && !Xr(s) && !Xr(a) && !Xr(l))\n    return \"\";\n  u || (u = [0, 0]), s || (s = [0, 0]), a || (a = [0, 0]), l || (l = [0, 0]), [u[0], s[0]] = Hr(u[0], s[0], n), [a[0], l[0]] = Hr(a[0], l[0], n), [u[1], a[1]] = Hr(u[1], a[1], r), [s[1], l[1]] = Hr(s[1], l[1], r), d && Vr(u), h && Vr(s), m && Vr(a), p && Vr(l);\n  let D = [];\n  D[0] = [s, s], D[1] = [l, [-l[0], l[1]]], D[2] = [a, [-a[0], -a[1]]], D[3] = [u, [u[0], -u[1]]];\n  let F = `h${n - u[0] - s[0]} a${D[0][0]} 0 0 1 ${D[0][1]}`, b = `v${r - s[1] - l[1]} a${D[1][0]} 0 0 1 ${D[1][1]}`, v = `h${l[0] + a[0] - n} a${D[2][0]} 0 0 1 ${D[2][1]}`, E = `v${a[1] + u[1] - r} a${D[3][0]} 0 0 1 ${D[3][1]}`;\n  if (o) {\n    let w = function(le) {\n      let q = qf([u, s, l, a][le]);\n      return le === 0 ? [[e + u[0] - q, t + u[1] - q], [e + u[0], t]] : le === 1 ? [[e + n - s[0] + q, t + s[1] - q], [e + n, t + s[1]]] : le === 2 ? [[e + n - l[0] + q, t + r - l[1] + q], [e + n - l[0], t + r]] : [[e + a[0] - q, t + r - a[1] + q], [e, t + r - a[1]]];\n    }, C = o.indexOf(false);\n    if (!o.includes(true))\n      throw new Error(\"Invalid `partialSides`.\");\n    if (C === -1)\n      C = 0;\n    else\n      for (; !o[C]; )\n        C = (C + 1) % 4;\n    let O = \"\", R = w(C), L = `M${R[0]} A${D[(C + 3) % 4][0]} 0 0 1 ${R[1]}`, Y = 0;\n    for (; Y < 4 && o[(C + Y) % 4]; Y++)\n      O += L + \" \", L = [F, b, v, E][(C + Y) % 4];\n    let se = (C + Y) % 4;\n    O += L.split(\" \")[0];\n    let ae = w(se);\n    return O += ` A${D[(se + 3) % 4][0]} 0 0 1 ${ae[0]}`, O;\n  }\n  return `M${e + u[0]},${t} ${F} ${b} ${v} ${E}`;\n}\nc();\nc();\nc();\nfunction Ou(e, t, n) {\n  return n[e + \"Width\"] === n[t + \"Width\"] && n[e + \"Style\"] === n[t + \"Style\"] && n[e + \"Color\"] === n[t + \"Color\"];\n}\nfunction Pu({ id: e, currentClipPathId: t, borderPath: n, borderType: r, left: i, top: o, width: u, height: s }, a) {\n  if (!(a.borderTopWidth || a.borderRightWidth || a.borderBottomWidth || a.borderLeftWidth))\n    return null;\n  let f = `satori_bc-${e}`;\n  return [k(\"clipPath\", { id: f, \"clip-path\": t ? `url(#${t})` : void 0 }, k(r, { x: i, y: o, width: u, height: s, d: n || void 0 })), f];\n}\nfunction Ut({ left: e, top: t, width: n, height: r, props: i, asContentMask: o, maskBorderOnly: u }, s) {\n  let a = [\"borderTop\", \"borderRight\", \"borderBottom\", \"borderLeft\"];\n  if (!o && !a.some((m) => s[m + \"Width\"]))\n    return \"\";\n  let l = \"\", f = 0;\n  for (; f > 0 && Ou(a[f], a[(f + 3) % 4], s); )\n    f = (f + 3) % 4;\n  let d = [false, false, false, false], h = [];\n  for (let m = 0; m < 4; m++) {\n    let p = (f + m) % 4, D = (f + m + 1) % 4, F = a[p], b = a[D];\n    if (d[p] = true, h = [s[F + \"Width\"], s[F + \"Style\"], s[F + \"Color\"], F], !Ou(F, b, s)) {\n      let v = (h[0] || 0) + (o && !u && s[F.replace(\"border\", \"padding\")] || 0);\n      v && (l += k(\"path\", { width: n, height: r, ...i, fill: \"none\", stroke: o ? \"#000\" : h[2], \"stroke-width\": v * 2, \"stroke-dasharray\": !o && h[1] === \"dashed\" ? v * 2 + \" \" + v : void 0, d: Ze({ left: e, top: t, width: n, height: r }, s, d) })), d = [false, false, false, false];\n    }\n  }\n  if (d.some(Boolean)) {\n    let m = (h[0] || 0) + (o && !u && s[h[3].replace(\"border\", \"padding\")] || 0);\n    m && (l += k(\"path\", { width: n, height: r, ...i, fill: \"none\", stroke: o ? \"#000\" : h[2], \"stroke-width\": m * 2, \"stroke-dasharray\": !o && h[1] === \"dashed\" ? m * 2 + \" \" + m : void 0, d: Ze({ left: e, top: t, width: n, height: r }, s, d) }));\n  }\n  return l;\n}\nfunction zn({ id: e, left: t, top: n, width: r, height: i, matrix: o, borderOnly: u }, s) {\n  let a = (s.borderLeftWidth || 0) + (u ? 0 : s.paddingLeft || 0), l = (s.borderTopWidth || 0) + (u ? 0 : s.paddingTop || 0), f = (s.borderRightWidth || 0) + (u ? 0 : s.paddingRight || 0), d = (s.borderBottomWidth || 0) + (u ? 0 : s.paddingBottom || 0), h = { x: t + a, y: n + l, width: r - a - f, height: i - l - d };\n  return k(\"mask\", { id: e }, k(\"rect\", { ...h, fill: \"#fff\", mask: s._inheritedMaskId ? `url(#${s._inheritedMaskId})` : void 0 }) + Ut({ left: t, top: n, width: r, height: i, props: { transform: o || void 0 }, asContentMask: true, maskBorderOnly: u }, s));\n}\nc();\nc();\nvar zt = { circle: /circle\\((.+)\\)/, ellipse: /ellipse\\((.+)\\)/, path: /path\\((.+)\\)/, polygon: /polygon\\((.+)\\)/, inset: /inset\\((.+)\\)/ };\nfunction Lu({ width: e, height: t }, n, r) {\n  function i(l) {\n    let f = l.match(zt.circle);\n    if (!f)\n      return null;\n    let [, d] = f, [h, m = \"\"] = d.split(\"at\").map((F) => F.trim()), { x: p, y: D } = Ru(m, e, t);\n    return { type: \"circle\", r: G(h, r.fontSize, Math.sqrt(Math.pow(e, 2) + Math.pow(t, 2)) / Math.sqrt(2), r, true), cx: G(p, r.fontSize, e, r, true), cy: G(D, r.fontSize, t, r, true) };\n  }\n  function o(l) {\n    let f = l.match(zt.ellipse);\n    if (!f)\n      return null;\n    let [, d] = f, [h, m = \"\"] = d.split(\"at\").map((v) => v.trim()), [p, D] = h.split(\" \"), { x: F, y: b } = Ru(m, e, t);\n    return { type: \"ellipse\", rx: G(p || \"50%\", r.fontSize, e, r, true), ry: G(D || \"50%\", r.fontSize, t, r, true), cx: G(F, r.fontSize, e, r, true), cy: G(b, r.fontSize, t, r, true) };\n  }\n  function u(l) {\n    let f = l.match(zt.path);\n    if (!f)\n      return null;\n    let [d, h] = Bu(f[1]);\n    return { type: \"path\", d: h, \"fill-rule\": d };\n  }\n  function s(l) {\n    let f = l.match(zt.polygon);\n    if (!f)\n      return null;\n    let [d, h] = Bu(f[1]);\n    return { type: \"polygon\", \"fill-rule\": d, points: h.split(\",\").map((m) => m.split(\" \").map((p, D) => G(p, r.fontSize, D === 0 ? e : t, r, true)).join(\" \")).join(\",\") };\n  }\n  function a(l) {\n    let f = l.match(zt.inset);\n    if (!f)\n      return null;\n    let [d, h] = (f[1].includes(\"round\") ? f[1] : `${f[1].trim()} round 0`).split(\"round\"), m = (0, import_css_to_react_native3.getStylesForProperty)(\"borderRadius\", h, true), p = Object.values(m).map((C) => String(C)).map((C, w) => G(C, r.fontSize, w === 0 || w === 2 ? t : e, r, true) || 0), D = Object.values((0, import_css_to_react_native3.getStylesForProperty)(\"margin\", d, true)).map((C) => String(C)).map((C, w) => G(C, r.fontSize, w === 0 || w === 2 ? t : e, r, true) || 0), F = D[3], b = D[0], v = e - (D[1] + D[3]), E = t - (D[0] + D[2]);\n    if (p.some((C) => C > 0)) {\n      let C = Ze({ left: F, top: b, width: v, height: E }, { ...n, ...m });\n      return { type: \"path\", d: C };\n    }\n    return { type: \"rect\", x: F, y: b, width: v, height: E };\n  }\n  return { parseCircle: i, parseEllipse: o, parsePath: u, parsePolygon: s, parseInset: a };\n}\nfunction Bu(e) {\n  let [, t = \"nonzero\", n] = e.replace(/('|\")/g, \"\").match(/^(nonzero|evenodd)?,?(.+)/) || [];\n  return [t, n];\n}\nfunction Ru(e, t, n) {\n  let r = e.split(\" \"), i = { x: r[0] || \"50%\", y: r[1] || \"50%\" };\n  return r.forEach((o) => {\n    o === \"top\" ? i.y = 0 : o === \"bottom\" ? i.y = n : o === \"left\" ? i.x = 0 : o === \"right\" ? i.x = t : o === \"center\" && (i.x = t / 2, i.y = n / 2);\n  }), i;\n}\nfunction Qr(e) {\n  return `satori_cp-${e}`;\n}\nfunction Mu(e) {\n  return `url(#${Qr(e)})`;\n}\nfunction Nu(e, t, n) {\n  if (t.clipPath === \"none\")\n    return \"\";\n  let r = Lu(e, t, n), i = t.clipPath, o = { type: \"\" };\n  for (let u of Object.keys(r))\n    if (o = r[u](i), o)\n      break;\n  if (o) {\n    let { type: u, ...s } = o;\n    return k(\"clipPath\", { id: Qr(e.id), \"clip-path\": e.currentClipPath, transform: `translate(${e.left}, ${e.top})` }, k(u, s));\n  }\n  return \"\";\n}\nfunction Gn({ left: e, top: t, width: n, height: r, path: i, matrix: o, id: u, currentClipPath: s, src: a }, l, f) {\n  let d = \"\", h = l.clipPath && l.clipPath !== \"none\" ? Nu({ left: e, top: t, width: n, height: r, path: i, id: u, matrix: o, currentClipPath: s, src: a }, l, f) : \"\";\n  if (l.overflow !== \"hidden\" && !a)\n    d = \"\";\n  else {\n    let p = h ? `satori_ocp-${u}` : Qr(u);\n    d = k(\"clipPath\", { id: p, \"clip-path\": s }, k(i ? \"path\" : \"rect\", { x: e, y: t, width: n, height: r, d: i || void 0 }));\n  }\n  let m = zn({ id: `satori_om-${u}`, left: e, top: t, width: n, height: r, matrix: o, borderOnly: !a }, l);\n  return h + d + m;\n}\nc();\nvar Uf = (e) => `satori_mi-${e}`;\nasync function jn(e, t, n) {\n  if (!t.maskImage)\n    return [\"\", \"\"];\n  let { left: r, top: i, width: o, height: u, id: s } = e, a = t.maskImage, l = a.length;\n  if (!l)\n    return [\"\", \"\"];\n  let f = Uf(s), d = \"\";\n  for (let h = 0; h < l; h++) {\n    let m = a[h], [p, D] = await qt({ id: `${f}-${h}`, left: r, top: i, width: o, height: u }, m, n, \"mask\");\n    d += D + k(\"rect\", { x: 0, y: 0, width: o, height: u, fill: `url(#${p})` });\n  }\n  return d = k(\"mask\", { id: f }, d), [f, d];\n}\nasync function Gt({ id: e, left: t, top: n, width: r, height: i, isInheritingTransform: o, src: u, debug: s }, a, l) {\n  if (a.display === \"none\")\n    return \"\";\n  let f = !!u, d = \"rect\", h = \"\", m = \"\", p = [], D = 1, F = \"\";\n  a.backgroundColor && p.push(a.backgroundColor), a.opacity !== void 0 && (D = +a.opacity), a.transform && (h = Nt({ left: t, top: n, width: r, height: i }, a.transform, o, a.transformOrigin));\n  let b = \"\";\n  if (a.backgroundImage) {\n    let $ = [];\n    for (let J = 0; J < a.backgroundImage.length; J++) {\n      let he = a.backgroundImage[J], X = await qt({ id: e + \"_\" + J, width: r, height: i, left: t, top: n }, he, l);\n      X && $.unshift(X);\n    }\n    for (let J of $)\n      p.push(`url(#${J[0]})`), m += J[1], J[2] && (b += J[2]);\n  }\n  let [v, E] = await jn({ id: e, left: t, top: n, width: r, height: i }, a, l);\n  m += E;\n  let C = v ? `url(#${v})` : a._inheritedMaskId ? `url(#${a._inheritedMaskId})` : void 0, w = Ze({ left: t, top: n, width: r, height: i }, a);\n  w && (d = \"path\");\n  let O = a._inheritedClipPathId;\n  s && (F = k(\"rect\", { x: t, y: n, width: r, height: i, fill: \"transparent\", stroke: \"#ff5757\", \"stroke-width\": 1, transform: h || void 0, \"clip-path\": O ? `url(#${O})` : void 0 }));\n  let { backgroundClip: R, filter: L } = a, Y = R === \"text\" ? `url(#satori_bct-${e})` : O ? `url(#${O})` : a.clipPath ? Mu(e) : void 0, se = Gn({ left: t, top: n, width: r, height: i, path: w, id: e, matrix: h, currentClipPath: Y, src: u }, a, l), ae = p.map(($) => k(d, { x: t, y: n, width: r, height: i, fill: $, d: w || void 0, transform: h || void 0, \"clip-path\": Y, style: L ? `filter:${L}` : void 0, mask: C })).join(\"\"), le = Pu({ id: e, left: t, top: n, width: r, height: i, currentClipPathId: O, borderPath: w, borderType: d }, a);\n  if (f) {\n    let $ = (a.borderLeftWidth || 0) + (a.paddingLeft || 0), J = (a.borderTopWidth || 0) + (a.paddingTop || 0), he = (a.borderRightWidth || 0) + (a.paddingRight || 0), X = (a.borderBottomWidth || 0) + (a.paddingBottom || 0), re = a.objectFit === \"contain\" ? \"xMidYMid\" : a.objectFit === \"cover\" ? \"xMidYMid slice\" : \"none\";\n    ae += k(\"image\", { x: t + $, y: n + J, width: r - $ - he, height: i - J - X, href: u, preserveAspectRatio: re, transform: h || void 0, style: L ? `filter:${L}` : void 0, \"clip-path\": `url(#satori_cp-${e})`, mask: v ? `url(#${v})` : `url(#satori_om-${e})` });\n  }\n  if (le) {\n    m += le[0];\n    let $ = le[1];\n    ae += Ut({ left: t, top: n, width: r, height: i, props: { transform: h || void 0, \"clip-path\": `url(#${$})` } }, a);\n  }\n  let q = Su({ width: r, height: i, id: e, opacity: D, shape: k(d, { x: t, y: n, width: r, height: i, fill: \"#fff\", stroke: \"#fff\", \"stroke-width\": 0, d: w || void 0, transform: h || void 0, \"clip-path\": Y, mask: C }) }, a);\n  return (m ? k(\"defs\", {}, m) : \"\") + (q ? q[0] : \"\") + se + (D !== 1 ? `<g opacity=\"${D}\">` : \"\") + (b || ae) + (D !== 1 ? \"</g>\" : \"\") + (q ? q[1] : \"\") + F;\n}\nc();\nc();\nvar $u = () => /[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26F9(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC3\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC08\\uDC26](?:\\u200D\\u2B1B)?|[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)/g;\nvar zf = new RegExp($u(), \"\");\nvar Hn = { emoji: zf, symbol: /\\p{Symbol}/u, math: /\\p{Math}/u };\nvar Vn = { \"ja-JP\": /\\p{scx=Hira}|\\p{scx=Kana}|\\p{scx=Han}|[\\u3000]|[\\uFF00-\\uFFEF]/u, \"ko-KR\": /\\p{scx=Hangul}/u, \"zh-CN\": /\\p{scx=Han}/u, \"zh-TW\": /\\p{scx=Han}/u, \"zh-HK\": /\\p{scx=Han}/u, \"th-TH\": /\\p{scx=Thai}/u, \"bn-IN\": /\\p{scx=Bengali}/u, \"ar-AR\": /\\p{scx=Arabic}/u, \"ta-IN\": /\\p{scx=Tamil}/u, \"ml-IN\": /\\p{scx=Malayalam}/u, \"he-IL\": /\\p{scx=Hebrew}/u, \"te-IN\": /\\p{scx=Telugu}/u, devanagari: /\\p{scx=Devanagari}/u, kannada: /\\p{scx=Kannada}/u };\nvar Kr = Object.keys({ ...Vn, ...Hn });\nfunction Wu(e) {\n  return Kr.includes(e);\n}\nfunction qu(e, t) {\n  for (let r of Object.keys(Hn))\n    if (Hn[r].test(e))\n      return [r];\n  let n = Object.keys(Vn).filter((r) => Vn[r].test(e));\n  if (n.length === 0)\n    return [\"unknown\"];\n  if (t) {\n    let r = n.findIndex((i) => i === t);\n    r !== -1 && (n.splice(r, 1), n.unshift(t));\n  }\n  return n;\n}\nfunction Uu(e) {\n  if (e)\n    return Kr.find((t) => t.toLowerCase().startsWith(e.toLowerCase()));\n}\nasync function* jt(e, t) {\n  var W;\n  let n = await Ge(), { id: r, inheritedStyle: i, parent: o, font: u, debug: s, locale: a, embedFont: l = true, graphemeImages: f, canLoadAdditionalAssets: d, getTwStyles: h } = t;\n  if (e === null || typeof e > \"u\")\n    return yield, yield, \"\";\n  if (!yt(e) || typeof e.type == \"function\") {\n    let N;\n    if (!yt(e))\n      N = $n(String(e), t), yield (await N.next()).value;\n    else {\n      if (tu(e.type))\n        throw new Error(\"Class component is not supported.\");\n      N = jt(e.type(e.props), t), yield (await N.next()).value;\n    }\n    await N.next();\n    let fe = yield;\n    return (await N.next(fe)).value;\n  }\n  let { type: m, props: p } = e;\n  if (p && ru(p))\n    throw new Error(\"dangerouslySetInnerHTML property is not supported. See documentation for more information https://github.com/vercel/satori#jsx.\");\n  let { style: D, children: F, tw: b, lang: v = a } = p || {}, E = Uu(v);\n  if (b) {\n    let N = h(b, D);\n    D = Object.assign(N, D);\n  }\n  let C = n.Node.create();\n  o.insertChild(C, o.getChildCount());\n  let [w, O] = await Bn(C, m, i, D, p), R = w.transform === i.transform;\n  if (R || (w.transform.__parent = i.transform), (w.overflow === \"hidden\" || w.clipPath && w.clipPath !== \"none\") && (O._inheritedClipPathId = `satori_cp-${r}`, O._inheritedMaskId = `satori_om-${r}`), w.maskImage && (O._inheritedMaskId = `satori_mi-${r}`), w.backgroundClip === \"text\") {\n    let N = { value: \"\" };\n    O._inheritedBackgroundClipTextPath = N, w._inheritedBackgroundClipTextPath = N;\n  }\n  let L = nu(F), Y = [], se = 0, ae = [];\n  for (let N of L) {\n    let fe = jt(N, { id: r + \"-\" + se++, parentStyle: w, inheritedStyle: O, isInheritingTransform: true, parent: C, font: u, embedFont: l, debug: s, graphemeImages: f, canLoadAdditionalAssets: d, locale: E, getTwStyles: h, onNodeDetected: t.onNodeDetected });\n    d ? ae.push(...(await fe.next()).value || []) : await fe.next(), Y.push(fe);\n  }\n  yield ae;\n  for (let N of Y)\n    await N.next();\n  let [le, q] = yield, { left: $, top: J, width: he, height: X } = C.getComputedLayout();\n  $ += le, J += q;\n  let re = \"\", ce = \"\", be = \"\", { children: I, ...B } = p;\n  if ((W = t.onNodeDetected) == null || W.call(t, { left: $, top: J, width: he, height: X, type: m, props: B, key: e.key, textContent: yt(I) ? void 0 : I }), m === \"img\") {\n    let N = w.__src;\n    ce = await Gt({ id: r, left: $, top: J, width: he, height: X, src: N, isInheritingTransform: R, debug: s }, w, O);\n  } else if (m === \"svg\") {\n    let N = w.color, fe = await Du(e, N);\n    ce = await Gt({ id: r, left: $, top: J, width: he, height: X, src: fe, isInheritingTransform: R, debug: s }, w, O);\n  } else {\n    let N = D == null ? void 0 : D.display;\n    if (m === \"div\" && F && typeof F != \"string\" && N !== \"flex\" && N !== \"none\")\n      throw new Error('Expected <div> to have explicit \"display: flex\" or \"display: none\" if it has more than one child node.');\n    ce = await Gt({ id: r, left: $, top: J, width: he, height: X, isInheritingTransform: R, debug: s }, w, O);\n  }\n  for (let N of Y)\n    re += (await N.next([$, J])).value;\n  return w._inheritedBackgroundClipTextPath && (be += k(\"clipPath\", { id: `satori_bct-${r}`, \"clip-path\": w._inheritedClipPathId ? `url(#${w._inheritedClipPathId})` : void 0 }, w._inheritedBackgroundClipTextPath.value)), be + ce + re;\n}\nc();\nvar zu = \"unknown\";\nfunction Gf(e, t, [n, r], [i, o]) {\n  if (n !== i)\n    return n ? !i || n === e ? -1 : i === e ? 1 : e === 400 && n === 500 || e === 500 && n === 400 ? -1 : e === 400 && i === 500 || e === 500 && i === 400 ? 1 : e < 400 ? n < e && i < e ? i - n : n < e ? -1 : i < e ? 1 : n - i : e < n && e < i ? n - i : e < n ? -1 : e < i ? 1 : i - n : 1;\n  if (r !== o) {\n    if (r === t)\n      return -1;\n    if (o === t)\n      return 1;\n  }\n  return -1;\n}\nvar Ht = class {\n  constructor(t) {\n    this.fonts = /* @__PURE__ */ new Map();\n    this.addFonts(t);\n  }\n  get({ name: t, weight: n, style: r }) {\n    if (!this.fonts.has(t))\n      return null;\n    n === \"normal\" && (n = 400), n === \"bold\" && (n = 700), typeof n == \"string\" && (n = Number.parseInt(n, 10));\n    let i = [...this.fonts.get(t)], o = i[0];\n    for (let u = 1; u < i.length; u++) {\n      let [, s, a] = o, [, l, f] = i[u];\n      Gf(n, r, [s, a], [l, f]) > 0 && (o = i[u]);\n    }\n    return o[0];\n  }\n  addFonts(t) {\n    for (let n of t) {\n      let { name: r, data: i, lang: o } = n;\n      if (o && !Wu(o))\n        throw new Error(`Invalid value for props \\`lang\\`: \"${o}\". The value must be one of the following: ${Kr.join(\", \")}.`);\n      let u = o ?? zu, s = opentype_module_default.parse(\"buffer\" in i ? i.buffer.slice(i.byteOffset, i.byteOffset + i.byteLength) : i, { lowMemory: true }), a = s.charToGlyphIndex;\n      s.charToGlyphIndex = (f) => {\n        let d = a.call(s, f);\n        return d === 0 && s._trackBrokenChars && s._trackBrokenChars.push(f), d;\n      }, this.defaultFont || (this.defaultFont = s);\n      let l = `${r.toLowerCase()}_${u}`;\n      this.fonts.has(l) || this.fonts.set(l, []), this.fonts.get(l).push([s, n.weight, n.style]);\n    }\n  }\n  getEngine(t = 16, n = 1.2, { fontFamily: r = \"sans-serif\", fontWeight: i = 400, fontStyle: o = \"normal\" }, u) {\n    if (!this.fonts.size)\n      throw new Error(\"No fonts are loaded. At least one font is required to calculate the layout.\");\n    r = (Array.isArray(r) ? r : [r]).map((v) => v.toLowerCase());\n    let s = [];\n    r.forEach((v) => {\n      let E = this.get({ name: v, weight: i, style: o });\n      if (E) {\n        s.push(E);\n        return;\n      }\n      let C = this.get({ name: v + \"_unknown\", weight: i, style: o });\n      if (C) {\n        s.push(C);\n        return;\n      }\n    });\n    let a = Array.from(this.fonts.keys()), l = [], f = [], d = [];\n    for (let v of a)\n      if (!r.includes(v))\n        if (u) {\n          let E = jf(v);\n          E ? E === u ? l.push(this.get({ name: v, weight: i, style: o })) : f.push(this.get({ name: v, weight: i, style: o })) : d.push(this.get({ name: v, weight: i, style: o }));\n        } else\n          d.push(this.get({ name: v, weight: i, style: o }));\n    let h = /* @__PURE__ */ new Map(), m = (v, E = true) => {\n      let C = [...s, ...d, ...l, ...E ? f : []];\n      if (typeof v > \"u\")\n        return E ? C[C.length - 1] : void 0;\n      let w = v.charCodeAt(0);\n      if (h.has(w))\n        return h.get(w);\n      let O = C.find((R, L) => !!R.charToGlyphIndex(v) || E && L === C.length - 1);\n      return O && h.set(w, O), O;\n    }, p = (v, E = false) => {\n      var w, O;\n      return ((E ? (O = (w = v.tables) == null ? void 0 : w.os2) == null ? void 0 : O.sTypoAscender : 0) || v.ascender) / v.unitsPerEm * t;\n    }, D = (v, E = false) => {\n      var w, O;\n      return ((E ? (O = (w = v.tables) == null ? void 0 : w.os2) == null ? void 0 : O.sTypoDescender : 0) || v.descender) / v.unitsPerEm * t;\n    }, F = (v) => m(v, false), b = { has: (v) => {\n      if (v === `\n`)\n        return true;\n      let E = F(v);\n      return E ? (E._trackBrokenChars = [], E.stringToGlyphs(v), E._trackBrokenChars.length ? (E._trackBrokenChars = void 0, false) : true) : false;\n    }, baseline: (v, E = typeof v > \"u\" ? s[0] : m(v)) => {\n      let C = p(E, true), w = D(E, true), O = b.height(v, E), { yMax: R, yMin: L } = E.tables.head, Y = C - w, se = (R / (R - L) - 1) * Y;\n      return O * ((1.2 / n + 1) / 2) + se;\n    }, height: (v, E = typeof v > \"u\" ? s[0] : m(v)) => (p(E) - D(E)) * (n / 1.2), measure: (v, E) => this.measure(m, v, E), getSVG: (v, E) => this.getSVG(m, v, E) };\n    return b;\n  }\n  patchFontFallbackResolver(t, n) {\n    let r = [];\n    t._trackBrokenChars = r;\n    let i = t.stringToGlyphs;\n    return t.stringToGlyphs = (o, ...u) => {\n      let s = i.call(t, o, ...u);\n      for (let a = 0; a < s.length; a++)\n        if (s[a].unicode === void 0) {\n          let l = r.shift(), f = n(l);\n          if (f !== t) {\n            let d = f.charToGlyph(l), h = t.unitsPerEm / f.unitsPerEm, m = new opentype_module_default.Path();\n            m.unitsPerEm = t.unitsPerEm, m.commands = d.path.commands.map((D) => {\n              let F = { ...D };\n              for (let b in F)\n                typeof F[b] == \"number\" && (F[b] *= h);\n              return F;\n            });\n            let p = new opentype_module_default.Glyph({ ...d, advanceWidth: d.advanceWidth * h, xMin: d.xMin * h, xMax: d.xMax * h, yMin: d.yMin * h, yMax: d.yMax * h, path: m });\n            s[a] = p;\n          }\n        }\n      return s;\n    }, () => {\n      t.stringToGlyphs = i, t._trackBrokenChars = void 0;\n    };\n  }\n  measure(t, n, { fontSize: r, letterSpacing: i = 0 }) {\n    let o = t(n), u = this.patchFontFallbackResolver(o, t);\n    try {\n      return o.getAdvanceWidth(n, r, { letterSpacing: i / r });\n    } finally {\n      u();\n    }\n  }\n  getSVG(t, n, { fontSize: r, top: i, left: o, letterSpacing: u = 0 }) {\n    let s = t(n), a = this.patchFontFallbackResolver(s, t);\n    try {\n      return r === 0 ? \"\" : s.getPath(n.replace(/\\n/g, \"\"), o, i, r, { letterSpacing: u / r }).toPathData(1);\n    } finally {\n      a();\n    }\n  }\n};\nfunction jf(e) {\n  let t = e.split(\"_\"), n = t[t.length - 1];\n  return n === zu ? void 0 : n;\n}\nc();\nfunction Xn({ width: e, height: t, content: n }) {\n  return k(\"svg\", { width: e, height: t, viewBox: `0 0 ${e} ${t}`, xmlns: \"http://www.w3.org/2000/svg\" }, n);\n}\nc();\nc();\nvar Fl = Bl(Za());\nc();\nc();\nc();\nc();\nvar Om = [\"ios\", \"android\", \"windows\", \"macos\", \"web\"];\nfunction tl(e) {\n  return Om.includes(e);\n}\nvar Pm = [\"portrait\", \"landscape\"];\nfunction rl(e) {\n  return Pm.includes(e);\n}\nvar el;\n(function(e) {\n  e.fontSize = \"fontSize\", e.lineHeight = \"lineHeight\";\n})(el || (el = {}));\nvar H;\n(function(e) {\n  e.rem = \"rem\", e.em = \"em\", e.px = \"px\", e.percent = \"%\", e.vw = \"vw\", e.vh = \"vh\", e.none = \"<no-css-unit>\";\n})(H || (H = {}));\nfunction Fo(e) {\n  return typeof e == \"string\";\n}\nfunction wo(e) {\n  return typeof e == \"object\";\n}\nvar Eo;\nfunction g(e) {\n  return { kind: \"complete\", style: e };\n}\nfunction pe(e, t = {}) {\n  let { fractions: n } = t;\n  if (n && e.includes(\"/\")) {\n    let [o = \"\", u = \"\"] = e.split(\"/\", 2), s = pe(o), a = pe(u);\n    return !s || !a ? null : [s[0] / a[0], a[1]];\n  }\n  let r = parseFloat(e);\n  if (Number.isNaN(r))\n    return null;\n  let i = e.match(/(([a-z]{2,}|%))$/);\n  if (!i)\n    return [r, H.none];\n  switch (i == null ? void 0 : i[1]) {\n    case \"rem\":\n      return [r, H.rem];\n    case \"px\":\n      return [r, H.px];\n    case \"em\":\n      return [r, H.em];\n    case \"%\":\n      return [r, H.percent];\n    case \"vw\":\n      return [r, H.vw];\n    case \"vh\":\n      return [r, H.vh];\n    default:\n      return null;\n  }\n}\nfunction Ve(e, t, n = {}) {\n  let r = qe(t, n);\n  return r === null ? null : g({ [e]: r });\n}\nfunction Dn(e, t, n) {\n  let r = qe(t);\n  return r !== null && (n[e] = r), n;\n}\nfunction il(e, t) {\n  let n = qe(t);\n  return n === null ? null : { [e]: n };\n}\nfunction qe(e, t = {}) {\n  if (e === void 0)\n    return null;\n  let n = pe(String(e), t);\n  return n ? nt(...n, t) : null;\n}\nfunction nt(e, t, n = {}) {\n  let { isNegative: r, device: i } = n;\n  switch (t) {\n    case H.rem:\n      return e * 16 * (r ? -1 : 1);\n    case H.px:\n      return e * (r ? -1 : 1);\n    case H.percent:\n      return `${r ? \"-\" : \"\"}${e}%`;\n    case H.none:\n      return e * (r ? -1 : 1);\n    case H.vw:\n      return i != null && i.windowDimensions ? i.windowDimensions.width * (e / 100) : (Ce(\"`vw` CSS unit requires configuration with `useDeviceContext()`\"), null);\n    case H.vh:\n      return i != null && i.windowDimensions ? i.windowDimensions.height * (e / 100) : (Ce(\"`vh` CSS unit requires configuration with `useDeviceContext()`\"), null);\n    default:\n      return null;\n  }\n}\nfunction Co(e) {\n  let t = pe(e);\n  if (!t)\n    return null;\n  let [n, r] = t;\n  switch (r) {\n    case H.rem:\n      return n * 16;\n    case H.px:\n      return n;\n    default:\n      return null;\n  }\n}\nvar Im = { t: \"Top\", tr: \"TopRight\", tl: \"TopLeft\", b: \"Bottom\", br: \"BottomRight\", bl: \"BottomLeft\", l: \"Left\", r: \"Right\", x: \"Horizontal\", y: \"Vertical\" };\nfunction _o(e) {\n  return Im[e ?? \"\"] || \"All\";\n}\nfunction So(e) {\n  let t = \"All\";\n  return [e.replace(/^-(t|b|r|l|tr|tl|br|bl)(-|$)/, (r, i) => (t = _o(i), \"\")), t];\n}\nfunction dt(e, t = {}) {\n  if (e.includes(\"/\")) {\n    let n = nl(e, { ...t, fractions: true });\n    if (n)\n      return n;\n  }\n  return e[0] === \"[\" && (e = e.slice(1, -1)), nl(e, t);\n}\nfunction Ie(e, t, n = {}) {\n  let r = dt(t, n);\n  return r === null ? null : g({ [e]: r });\n}\nfunction nl(e, t = {}) {\n  if (e === \"px\")\n    return 1;\n  let n = pe(e, t);\n  if (!n)\n    return null;\n  let [r, i] = n;\n  return t.fractions && (i = H.percent, r *= 100), i === H.none && (r = r / 4, i = H.rem), nt(r, i, t);\n}\nfunction Bm(...e) {\n  console.warn(...e);\n}\nfunction Rm(...e) {\n}\nvar Ce = typeof process > \"u\" || ((Eo = process == null ? void 0 : process.env) === null || Eo === void 0 ? void 0 : Eo.JEST_WORKER_ID) === void 0 ? Bm : Rm;\nvar Lm = [[\"aspect-square\", g({ aspectRatio: 1 })], [\"aspect-video\", g({ aspectRatio: 16 / 9 })], [\"items-center\", g({ alignItems: \"center\" })], [\"items-start\", g({ alignItems: \"flex-start\" })], [\"items-end\", g({ alignItems: \"flex-end\" })], [\"items-baseline\", g({ alignItems: \"baseline\" })], [\"items-stretch\", g({ alignItems: \"stretch\" })], [\"justify-start\", g({ justifyContent: \"flex-start\" })], [\"justify-end\", g({ justifyContent: \"flex-end\" })], [\"justify-center\", g({ justifyContent: \"center\" })], [\"justify-between\", g({ justifyContent: \"space-between\" })], [\"justify-around\", g({ justifyContent: \"space-around\" })], [\"justify-evenly\", g({ justifyContent: \"space-evenly\" })], [\"content-start\", g({ alignContent: \"flex-start\" })], [\"content-end\", g({ alignContent: \"flex-end\" })], [\"content-between\", g({ alignContent: \"space-between\" })], [\"content-around\", g({ alignContent: \"space-around\" })], [\"content-stretch\", g({ alignContent: \"stretch\" })], [\"content-center\", g({ alignContent: \"center\" })], [\"self-auto\", g({ alignSelf: \"auto\" })], [\"self-start\", g({ alignSelf: \"flex-start\" })], [\"self-end\", g({ alignSelf: \"flex-end\" })], [\"self-center\", g({ alignSelf: \"center\" })], [\"self-stretch\", g({ alignSelf: \"stretch\" })], [\"self-baseline\", g({ alignSelf: \"baseline\" })], [\"direction-inherit\", g({ direction: \"inherit\" })], [\"direction-ltr\", g({ direction: \"ltr\" })], [\"direction-rtl\", g({ direction: \"rtl\" })], [\"hidden\", g({ display: \"none\" })], [\"flex\", g({ display: \"flex\" })], [\"flex-row\", g({ flexDirection: \"row\" })], [\"flex-row-reverse\", g({ flexDirection: \"row-reverse\" })], [\"flex-col\", g({ flexDirection: \"column\" })], [\"flex-col-reverse\", g({ flexDirection: \"column-reverse\" })], [\"flex-wrap\", g({ flexWrap: \"wrap\" })], [\"flex-wrap-reverse\", g({ flexWrap: \"wrap-reverse\" })], [\"flex-nowrap\", g({ flexWrap: \"nowrap\" })], [\"flex-auto\", g({ flexGrow: 1, flexShrink: 1, flexBasis: \"auto\" })], [\"flex-initial\", g({ flexGrow: 0, flexShrink: 1, flexBasis: \"auto\" })], [\"flex-none\", g({ flexGrow: 0, flexShrink: 0, flexBasis: \"auto\" })], [\"overflow-hidden\", g({ overflow: \"hidden\" })], [\"overflow-visible\", g({ overflow: \"visible\" })], [\"overflow-scroll\", g({ overflow: \"scroll\" })], [\"absolute\", g({ position: \"absolute\" })], [\"relative\", g({ position: \"relative\" })], [\"italic\", g({ fontStyle: \"italic\" })], [\"not-italic\", g({ fontStyle: \"normal\" })], [\"oldstyle-nums\", wr(\"oldstyle-nums\")], [\"small-caps\", wr(\"small-caps\")], [\"lining-nums\", wr(\"lining-nums\")], [\"tabular-nums\", wr(\"tabular-nums\")], [\"proportional-nums\", wr(\"proportional-nums\")], [\"font-thin\", g({ fontWeight: \"100\" })], [\"font-100\", g({ fontWeight: \"100\" })], [\"font-extralight\", g({ fontWeight: \"200\" })], [\"font-200\", g({ fontWeight: \"200\" })], [\"font-light\", g({ fontWeight: \"300\" })], [\"font-300\", g({ fontWeight: \"300\" })], [\"font-normal\", g({ fontWeight: \"normal\" })], [\"font-400\", g({ fontWeight: \"400\" })], [\"font-medium\", g({ fontWeight: \"500\" })], [\"font-500\", g({ fontWeight: \"500\" })], [\"font-semibold\", g({ fontWeight: \"600\" })], [\"font-600\", g({ fontWeight: \"600\" })], [\"font-bold\", g({ fontWeight: \"bold\" })], [\"font-700\", g({ fontWeight: \"700\" })], [\"font-extrabold\", g({ fontWeight: \"800\" })], [\"font-800\", g({ fontWeight: \"800\" })], [\"font-black\", g({ fontWeight: \"900\" })], [\"font-900\", g({ fontWeight: \"900\" })], [\"include-font-padding\", g({ includeFontPadding: true })], [\"remove-font-padding\", g({ includeFontPadding: false })], [\"max-w-none\", g({ maxWidth: \"99999%\" })], [\"text-left\", g({ textAlign: \"left\" })], [\"text-center\", g({ textAlign: \"center\" })], [\"text-right\", g({ textAlign: \"right\" })], [\"text-justify\", g({ textAlign: \"justify\" })], [\"text-auto\", g({ textAlign: \"auto\" })], [\"underline\", g({ textDecorationLine: \"underline\" })], [\"line-through\", g({ textDecorationLine: \"line-through\" })], [\"no-underline\", g({ textDecorationLine: \"none\" })], [\"uppercase\", g({ textTransform: \"uppercase\" })], [\"lowercase\", g({ textTransform: \"lowercase\" })], [\"capitalize\", g({ textTransform: \"capitalize\" })], [\"normal-case\", g({ textTransform: \"none\" })], [\"w-auto\", g({ width: \"auto\" })], [\"h-auto\", g({ height: \"auto\" })], [\"shadow-sm\", g({ shadowOffset: { width: 1, height: 1 }, shadowColor: \"#000\", shadowRadius: 1, shadowOpacity: 0.025, elevation: 1 })], [\"shadow\", g({ shadowOffset: { width: 1, height: 1 }, shadowColor: \"#000\", shadowRadius: 1, shadowOpacity: 0.075, elevation: 2 })], [\"shadow-md\", g({ shadowOffset: { width: 1, height: 1 }, shadowColor: \"#000\", shadowRadius: 3, shadowOpacity: 0.125, elevation: 3 })], [\"shadow-lg\", g({ shadowOffset: { width: 1, height: 1 }, shadowColor: \"#000\", shadowOpacity: 0.15, shadowRadius: 8, elevation: 8 })], [\"shadow-xl\", g({ shadowOffset: { width: 1, height: 1 }, shadowColor: \"#000\", shadowOpacity: 0.19, shadowRadius: 20, elevation: 12 })], [\"shadow-2xl\", g({ shadowOffset: { width: 1, height: 1 }, shadowColor: \"#000\", shadowOpacity: 0.25, shadowRadius: 30, elevation: 16 })], [\"shadow-none\", g({ shadowOffset: { width: 0, height: 0 }, shadowColor: \"#000\", shadowRadius: 0, shadowOpacity: 0, elevation: 0 })]];\nvar ko = Lm;\nfunction wr(e) {\n  return { kind: \"dependent\", complete(t) {\n    (!t.fontVariant || !Array.isArray(t.fontVariant)) && (t.fontVariant = []), t.fontVariant.push(e);\n  } };\n}\nvar Er = class {\n  constructor(t) {\n    this.ir = new Map(ko), this.styles = /* @__PURE__ */ new Map(), this.prefixes = /* @__PURE__ */ new Map(), this.ir = new Map([...ko, ...t ?? []]);\n  }\n  getStyle(t) {\n    return this.styles.get(t);\n  }\n  setStyle(t, n) {\n    this.styles.set(t, n);\n  }\n  getIr(t) {\n    return this.ir.get(t);\n  }\n  setIr(t, n) {\n    this.ir.set(t, n);\n  }\n  getPrefixMatch(t) {\n    return this.prefixes.get(t);\n  }\n  setPrefixMatch(t, n) {\n    this.prefixes.set(t, n);\n  }\n};\nc();\nc();\nfunction To(e, t, n = {}) {\n  let r = t == null ? void 0 : t[e];\n  if (!r)\n    return Ie(\"fontSize\", e, n);\n  if (typeof r == \"string\")\n    return Ve(\"fontSize\", r);\n  let i = {}, [o, u] = r, s = il(\"fontSize\", o);\n  if (s && (i = s), typeof u == \"string\")\n    return g(Dn(\"lineHeight\", ol(u, i), i));\n  let { lineHeight: a, letterSpacing: l } = u;\n  return a && Dn(\"lineHeight\", ol(a, i), i), l && Dn(\"letterSpacing\", l, i), g(i);\n}\nfunction ol(e, t) {\n  let n = pe(e);\n  if (n) {\n    let [r, i] = n;\n    if ((i === H.none || i === H.em) && typeof t.fontSize == \"number\")\n      return t.fontSize * r;\n  }\n  return e;\n}\nc();\nfunction Ao(e, t) {\n  var n;\n  let r = (n = t == null ? void 0 : t[e]) !== null && n !== void 0 ? n : e.startsWith(\"[\") ? e.slice(1, -1) : e, i = pe(r);\n  if (!i)\n    return null;\n  let [o, u] = i;\n  if (u === H.none)\n    return { kind: \"dependent\", complete(a) {\n      if (typeof a.fontSize != \"number\")\n        return \"relative line-height utilities require that font-size be set\";\n      a.lineHeight = a.fontSize * o;\n    } };\n  let s = nt(o, u);\n  return s !== null ? g({ lineHeight: s }) : null;\n}\nc();\nfunction Oo(e, t, n, r, i) {\n  let o = \"\";\n  if (r[0] === \"[\")\n    o = r.slice(1, -1);\n  else {\n    let l = i == null ? void 0 : i[r];\n    if (l)\n      o = l;\n    else {\n      let f = dt(r);\n      return f && typeof f == \"number\" ? ul(f, H.px, t, e) : null;\n    }\n  }\n  if (o === \"auto\")\n    return sl(t, e, \"auto\");\n  let u = pe(o);\n  if (!u)\n    return null;\n  let [s, a] = u;\n  return n && (s = -s), ul(s, a, t, e);\n}\nfunction ul(e, t, n, r) {\n  let i = nt(e, t);\n  return i === null ? null : sl(n, r, i);\n}\nfunction sl(e, t, n) {\n  switch (e) {\n    case \"All\":\n      return { kind: \"complete\", style: { [`${t}Top`]: n, [`${t}Right`]: n, [`${t}Bottom`]: n, [`${t}Left`]: n } };\n    case \"Bottom\":\n    case \"Top\":\n    case \"Left\":\n    case \"Right\":\n      return { kind: \"complete\", style: { [`${t}${e}`]: n } };\n    case \"Vertical\":\n      return { kind: \"complete\", style: { [`${t}Top`]: n, [`${t}Bottom`]: n } };\n    case \"Horizontal\":\n      return { kind: \"complete\", style: { [`${t}Left`]: n, [`${t}Right`]: n } };\n    default:\n      return null;\n  }\n}\nc();\nfunction Po(e) {\n  if (!e)\n    return {};\n  let t = Object.entries(e).reduce((i, [o, u]) => {\n    let s = [0, 1 / 0, 0], a = typeof u == \"string\" ? { min: u } : u, l = a.min ? Co(a.min) : 0;\n    l === null ? Ce(`invalid screen config value: ${o}->min: ${a.min}`) : s[0] = l;\n    let f = a.max ? Co(a.max) : 1 / 0;\n    return f === null ? Ce(`invalid screen config value: ${o}->max: ${a.max}`) : s[1] = f, i[o] = s, i;\n  }, {}), n = Object.values(t);\n  n.sort((i, o) => {\n    let [u, s] = i, [a, l] = o;\n    return s === 1 / 0 || l === 1 / 0 ? u - a : s - l;\n  });\n  let r = 0;\n  return n.forEach((i) => i[2] = r++), t;\n}\nc();\nfunction Io(e, t) {\n  let n = t == null ? void 0 : t[e];\n  if (!n)\n    return null;\n  if (typeof n == \"string\")\n    return g({ fontFamily: n });\n  let r = n[0];\n  return r ? g({ fontFamily: r }) : null;\n}\nc();\nfunction pt(e, t, n) {\n  if (!n)\n    return null;\n  let r;\n  t.includes(\"/\") && ([t = \"\", r] = t.split(\"/\", 2));\n  let i = \"\";\n  if (t.startsWith(\"[#\") || t.startsWith(\"[rgb\") ? i = t.slice(1, -1) : i = fl2(t, n), !i)\n    return null;\n  if (r) {\n    let o = Number(r);\n    if (!Number.isNaN(o))\n      return i = al(i, o / 100), g({ [gn[e].color]: i });\n  }\n  return { kind: \"dependent\", complete(o) {\n    let u = gn[e].opacity, s = o[u];\n    typeof s == \"number\" && (i = al(i, s)), o[gn[e].color] = i;\n  } };\n}\nfunction Cr(e, t) {\n  let n = parseInt(t, 10);\n  if (Number.isNaN(n))\n    return null;\n  let r = n / 100, i = { [gn[e].opacity]: r };\n  return { kind: \"complete\", style: i };\n}\nfunction al(e, t) {\n  return e.startsWith(\"#\") ? e = Mm(e) : e.startsWith(\"rgb(\") && (e = e.replace(/^rgb\\(/, \"rgba(\").replace(/\\)$/, \", 1)\")), e.replace(/, ?\\d*\\.?(\\d+)\\)$/, `, ${t})`);\n}\nfunction ll(e) {\n  for (let t in e)\n    t.startsWith(\"__opacity_\") && delete e[t];\n}\nvar gn = { bg: { opacity: \"__opacity_bg\", color: \"backgroundColor\" }, text: { opacity: \"__opacity_text\", color: \"color\" }, border: { opacity: \"__opacity_border\", color: \"borderColor\" }, borderTop: { opacity: \"__opacity_border\", color: \"borderTopColor\" }, borderBottom: { opacity: \"__opacity_border\", color: \"borderBottomColor\" }, borderLeft: { opacity: \"__opacity_border\", color: \"borderLeftColor\" }, borderRight: { opacity: \"__opacity_border\", color: \"borderRightColor\" }, shadow: { opacity: \"__opacity_shadow\", color: \"shadowColor\" }, tint: { opacity: \"__opacity_tint\", color: \"tintColor\" } };\nfunction Mm(e) {\n  let t = e;\n  e = e.replace(Nm, (u, s, a, l) => s + s + a + a + l + l);\n  let n = $m.exec(e);\n  if (!n)\n    return Ce(`invalid config hex color value: ${t}`), \"rgba(0, 0, 0, 1)\";\n  let r = parseInt(n[1], 16), i = parseInt(n[2], 16), o = parseInt(n[3], 16);\n  return `rgba(${r}, ${i}, ${o}, 1)`;\n}\nfunction fl2(e, t) {\n  let n = t[e];\n  if (Fo(n))\n    return n;\n  if (wo(n) && Fo(n.DEFAULT))\n    return n.DEFAULT;\n  let [r = \"\", ...i] = e.split(\"-\");\n  for (; r !== e; ) {\n    let o = t[r];\n    if (wo(o))\n      return fl2(i.join(\"-\"), o);\n    if (i.length === 0)\n      return \"\";\n    r = `${r}-${i.shift()}`;\n  }\n  return \"\";\n}\nvar Nm = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar $m = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\nc();\nfunction dl(e, t) {\n  let [n, r] = So(e);\n  if (n.match(/^(-?(\\d)+)?$/))\n    return Wm(n, r, t == null ? void 0 : t.borderWidth);\n  if (n = n.replace(/^-/, \"\"), [\"dashed\", \"solid\", \"dotted\"].includes(n))\n    return g({ borderStyle: n });\n  let o = \"border\";\n  switch (r) {\n    case \"Bottom\":\n      o = \"borderBottom\";\n      break;\n    case \"Top\":\n      o = \"borderTop\";\n      break;\n    case \"Left\":\n      o = \"borderLeft\";\n      break;\n    case \"Right\":\n      o = \"borderRight\";\n      break;\n  }\n  let u = pt(o, n, t == null ? void 0 : t.borderColor);\n  if (u)\n    return u;\n  let s = `border${r === \"All\" ? \"\" : r}Width`;\n  n = n.replace(/^-/, \"\");\n  let a = n.slice(1, -1), l = Ie(s, a);\n  return typeof (l == null ? void 0 : l.style[s]) != \"number\" ? null : l;\n}\nfunction Wm(e, t, n) {\n  if (!n)\n    return null;\n  e = e.replace(/^-/, \"\");\n  let i = n[e === \"\" ? \"DEFAULT\" : e];\n  if (i === void 0)\n    return null;\n  let o = `border${t === \"All\" ? \"\" : t}Width`;\n  return Ve(o, i);\n}\nfunction pl(e, t) {\n  if (!t)\n    return null;\n  let [n, r] = So(e);\n  n = n.replace(/^-/, \"\"), n === \"\" && (n = \"DEFAULT\");\n  let i = `border${r === \"All\" ? \"\" : r}Radius`, o = t[n];\n  if (o)\n    return cl(Ve(i, o));\n  let u = Ie(i, n);\n  return typeof (u == null ? void 0 : u.style[i]) != \"number\" ? null : cl(u);\n}\nfunction cl(e) {\n  if ((e == null ? void 0 : e.kind) !== \"complete\")\n    return e;\n  let t = e.style.borderTopRadius;\n  t !== void 0 && (e.style.borderTopLeftRadius = t, e.style.borderTopRightRadius = t, delete e.style.borderTopRadius);\n  let n = e.style.borderBottomRadius;\n  n !== void 0 && (e.style.borderBottomLeftRadius = n, e.style.borderBottomRightRadius = n, delete e.style.borderBottomRadius);\n  let r = e.style.borderLeftRadius;\n  r !== void 0 && (e.style.borderBottomLeftRadius = r, e.style.borderTopLeftRadius = r, delete e.style.borderLeftRadius);\n  let i = e.style.borderRightRadius;\n  return i !== void 0 && (e.style.borderBottomRightRadius = i, e.style.borderTopRightRadius = i, delete e.style.borderRightRadius), e;\n}\nc();\nfunction St(e, t, n, r) {\n  let i = null;\n  e === \"inset\" && (t = t.replace(/^(x|y)-/, (s, a) => (i = a === \"x\" ? \"x\" : \"y\", \"\")));\n  let o = r == null ? void 0 : r[t];\n  if (o) {\n    let s = qe(o, { isNegative: n });\n    if (s !== null)\n      return hl(e, i, s);\n  }\n  let u = dt(t, { isNegative: n });\n  return u !== null ? hl(e, i, u) : null;\n}\nfunction hl(e, t, n) {\n  if (e !== \"inset\")\n    return g({ [e]: n });\n  switch (t) {\n    case null:\n      return g({ top: n, left: n, right: n, bottom: n });\n    case \"y\":\n      return g({ top: n, bottom: n });\n    case \"x\":\n      return g({ left: n, right: n });\n  }\n}\nc();\nfunction _r(e, t, n) {\n  var r;\n  t = t.replace(/^-/, \"\");\n  let i = t === \"\" ? \"DEFAULT\" : t, o = Number((r = n == null ? void 0 : n[i]) !== null && r !== void 0 ? r : t);\n  return Number.isNaN(o) ? null : g({ [`flex${e}`]: o });\n}\nfunction ml(e, t) {\n  var n, r;\n  if (e = (t == null ? void 0 : t[e]) || e, [\"min-content\", \"revert\", \"unset\"].includes(e))\n    return null;\n  if (e.match(/^\\d+(\\.\\d+)?$/))\n    return g({ flexGrow: Number(e), flexBasis: \"0%\" });\n  let i = e.match(/^(\\d+)\\s+(\\d+)$/);\n  if (i)\n    return g({ flexGrow: Number(i[1]), flexShrink: Number(i[2]) });\n  if (i = e.match(/^(\\d+)\\s+([^ ]+)$/), i) {\n    let o = qe((n = i[2]) !== null && n !== void 0 ? n : \"\");\n    return o ? g({ flexGrow: Number(i[1]), flexBasis: o }) : null;\n  }\n  if (i = e.match(/^(\\d+)\\s+(\\d+)\\s+(.+)$/), i) {\n    let o = qe((r = i[3]) !== null && r !== void 0 ? r : \"\");\n    return o ? g({ flexGrow: Number(i[1]), flexShrink: Number(i[2]), flexBasis: o }) : null;\n  }\n  return null;\n}\nc();\nfunction Bo(e, t, n = {}, r) {\n  let i = r == null ? void 0 : r[t];\n  return i !== void 0 ? Ve(e, i, n) : Ie(e, t, n);\n}\nfunction Sr(e, t, n = {}, r) {\n  let i = qe(r == null ? void 0 : r[t], n);\n  return i ? g({ [e]: i }) : (t === \"screen\" && (t = e.includes(\"Width\") ? \"100vw\" : \"100vh\"), Ie(e, t, n));\n}\nc();\nfunction Dl(e, t, n) {\n  let r = n == null ? void 0 : n[e];\n  if (r) {\n    let i = pe(r, { isNegative: t });\n    if (!i)\n      return null;\n    let [o, u] = i;\n    if (u === H.em)\n      return qm(o);\n    if (u === H.percent)\n      return Ce(\"percentage-based letter-spacing configuration currently unsupported, switch to `em`s, or open an issue if you'd like to see support added.\"), null;\n    let s = nt(o, u, { isNegative: t });\n    return s !== null ? g({ letterSpacing: s }) : null;\n  }\n  return Ie(\"letterSpacing\", e, { isNegative: t });\n}\nfunction qm(e) {\n  return { kind: \"dependent\", complete(t) {\n    let n = t.fontSize;\n    if (typeof n != \"number\" || Number.isNaN(n))\n      return \"tracking-X relative letter spacing classes require font-size to be set\";\n    t.letterSpacing = Math.round((e * n + Number.EPSILON) * 100) / 100;\n  } };\n}\nc();\nfunction gl(e, t) {\n  let n = t == null ? void 0 : t[e];\n  if (n) {\n    let i = pe(String(n));\n    if (i)\n      return g({ opacity: i[0] });\n  }\n  let r = pe(e);\n  return r ? g({ opacity: r[0] / 100 }) : null;\n}\nc();\nfunction bl(e) {\n  let t = parseInt(e, 10);\n  return Number.isNaN(t) ? null : { kind: \"complete\", style: { shadowOpacity: t / 100 } };\n}\nfunction vl(e) {\n  if (e.includes(\"/\")) {\n    let [n = \"\", r = \"\"] = e.split(\"/\", 2), i = Ro(n), o = Ro(r);\n    return i === null || o === null ? null : { kind: \"complete\", style: { shadowOffset: { width: i, height: o } } };\n  }\n  let t = Ro(e);\n  return t === null ? null : { kind: \"complete\", style: { shadowOffset: { width: t, height: t } } };\n}\nfunction Ro(e) {\n  let t = dt(e);\n  return typeof t == \"number\" ? t : null;\n}\nvar kt = class {\n  constructor(t, n = {}, r, i, o) {\n    var u, s, a, l, f, d;\n    this.config = n, this.cache = r, this.position = 0, this.isNull = false, this.isNegative = false, this.context = {}, this.context.device = i;\n    let h = t.trim().split(\":\"), m = [];\n    h.length === 1 ? this.string = t : (this.string = (u = h.pop()) !== null && u !== void 0 ? u : \"\", m = h), this.char = this.string[0];\n    let p = Po((s = this.config.theme) === null || s === void 0 ? void 0 : s.screens);\n    for (let D of m)\n      if (p[D]) {\n        let F = (a = p[D]) === null || a === void 0 ? void 0 : a[2];\n        F !== void 0 && (this.order = ((l = this.order) !== null && l !== void 0 ? l : 0) + F);\n        let b = (f = i.windowDimensions) === null || f === void 0 ? void 0 : f.width;\n        if (b) {\n          let [v, E] = (d = p[D]) !== null && d !== void 0 ? d : [0, 0];\n          (b <= v || b > E) && (this.isNull = true);\n        } else\n          this.isNull = true;\n      } else\n        tl(D) ? this.isNull = D !== o : rl(D) ? i.windowDimensions ? (i.windowDimensions.width > i.windowDimensions.height ? \"landscape\" : \"portrait\") !== D ? this.isNull = true : this.incrementOrder() : this.isNull = true : D === \"retina\" ? i.pixelDensity === 2 ? this.incrementOrder() : this.isNull = true : D === \"dark\" ? i.colorScheme !== \"dark\" ? this.isNull = true : this.incrementOrder() : this.handlePossibleArbitraryBreakpointPrefix(D) || (this.isNull = true);\n  }\n  parse() {\n    if (this.isNull)\n      return { kind: \"null\" };\n    let t = this.cache.getIr(this.rest);\n    if (t)\n      return t;\n    this.parseIsNegative();\n    let n = this.parseUtility();\n    return n ? this.order !== void 0 ? { kind: \"ordered\", order: this.order, styleIr: n } : n : { kind: \"null\" };\n  }\n  parseUtility() {\n    var t, n, r, i, o;\n    let u = this.config.theme, s = null;\n    switch (this.char) {\n      case \"m\":\n      case \"p\": {\n        let a = this.peekSlice(1, 3).match(/^(t|b|r|l|x|y)?-/);\n        if (a) {\n          let l = this.char === \"m\" ? \"margin\" : \"padding\";\n          this.advance(((n = (t = a[0]) === null || t === void 0 ? void 0 : t.length) !== null && n !== void 0 ? n : 0) + 1);\n          let f = _o(a[1]), d = Oo(l, f, this.isNegative, this.rest, (r = this.config.theme) === null || r === void 0 ? void 0 : r[l]);\n          if (d)\n            return d;\n        }\n      }\n    }\n    if (this.consumePeeked(\"h-\") && (s = Bo(\"height\", this.rest, this.context, u == null ? void 0 : u.height), s) || this.consumePeeked(\"w-\") && (s = Bo(\"width\", this.rest, this.context, u == null ? void 0 : u.width), s) || this.consumePeeked(\"min-w-\") && (s = Sr(\"minWidth\", this.rest, this.context, u == null ? void 0 : u.minWidth), s) || this.consumePeeked(\"min-h-\") && (s = Sr(\"minHeight\", this.rest, this.context, u == null ? void 0 : u.minHeight), s) || this.consumePeeked(\"max-w-\") && (s = Sr(\"maxWidth\", this.rest, this.context, u == null ? void 0 : u.maxWidth), s) || this.consumePeeked(\"max-h-\") && (s = Sr(\"maxHeight\", this.rest, this.context, u == null ? void 0 : u.maxHeight), s) || this.consumePeeked(\"leading-\") && (s = Ao(this.rest, u == null ? void 0 : u.lineHeight), s) || this.consumePeeked(\"text-\") && (s = To(this.rest, u == null ? void 0 : u.fontSize, this.context), s || (s = pt(\"text\", this.rest, u == null ? void 0 : u.textColor), s) || this.consumePeeked(\"opacity-\") && (s = Cr(\"text\", this.rest), s)) || this.consumePeeked(\"font-\") && (s = Io(this.rest, u == null ? void 0 : u.fontFamily), s) || this.consumePeeked(\"aspect-\") && (this.consumePeeked(\"ratio-\") && Ce(\"`aspect-ratio-{ratio}` is deprecated, use `aspect-{ratio}` instead\"), s = Ve(\"aspectRatio\", this.rest, { fractions: true }), s) || this.consumePeeked(\"tint-\") && (s = pt(\"tint\", this.rest, u == null ? void 0 : u.colors), s) || this.consumePeeked(\"bg-\") && (s = pt(\"bg\", this.rest, u == null ? void 0 : u.backgroundColor), s || this.consumePeeked(\"opacity-\") && (s = Cr(\"bg\", this.rest), s)) || this.consumePeeked(\"border\") && (s = dl(this.rest, u), s || this.consumePeeked(\"-opacity-\") && (s = Cr(\"border\", this.rest), s)) || this.consumePeeked(\"rounded\") && (s = pl(this.rest, u == null ? void 0 : u.borderRadius), s) || this.consumePeeked(\"bottom-\") && (s = St(\"bottom\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"top-\") && (s = St(\"top\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"left-\") && (s = St(\"left\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"right-\") && (s = St(\"right\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"inset-\") && (s = St(\"inset\", this.rest, this.isNegative, u == null ? void 0 : u.inset), s) || this.consumePeeked(\"flex-\") && (this.consumePeeked(\"grow\") ? s = _r(\"Grow\", this.rest, u == null ? void 0 : u.flexGrow) : this.consumePeeked(\"shrink\") ? s = _r(\"Shrink\", this.rest, u == null ? void 0 : u.flexShrink) : s = ml(this.rest, u == null ? void 0 : u.flex), s) || this.consumePeeked(\"grow\") && (s = _r(\"Grow\", this.rest, u == null ? void 0 : u.flexGrow), s) || this.consumePeeked(\"shrink\") && (s = _r(\"Shrink\", this.rest, u == null ? void 0 : u.flexShrink), s) || this.consumePeeked(\"shadow-color-opacity-\") && (s = Cr(\"shadow\", this.rest), s) || this.consumePeeked(\"shadow-opacity-\") && (s = bl(this.rest), s) || this.consumePeeked(\"shadow-offset-\") && (s = vl(this.rest), s) || this.consumePeeked(\"shadow-radius-\") && (s = Ie(\"shadowRadius\", this.rest), s) || this.consumePeeked(\"shadow-\") && (s = pt(\"shadow\", this.rest, u == null ? void 0 : u.colors), s))\n      return s;\n    if (this.consumePeeked(\"elevation-\")) {\n      let a = parseInt(this.rest, 10);\n      if (!Number.isNaN(a))\n        return g({ elevation: a });\n    }\n    if (this.consumePeeked(\"opacity-\") && (s = gl(this.rest, u == null ? void 0 : u.opacity), s) || this.consumePeeked(\"tracking-\") && (s = Dl(this.rest, this.isNegative, u == null ? void 0 : u.letterSpacing), s))\n      return s;\n    if (this.consumePeeked(\"z-\")) {\n      let a = Number((o = (i = u == null ? void 0 : u.zIndex) === null || i === void 0 ? void 0 : i[this.rest]) !== null && o !== void 0 ? o : this.rest);\n      if (!Number.isNaN(a))\n        return g({ zIndex: a });\n    }\n    return Ce(`\\`${this.rest}\\` unknown or invalid utility`), null;\n  }\n  handlePossibleArbitraryBreakpointPrefix(t) {\n    var n;\n    if (t[0] !== \"m\")\n      return false;\n    let r = t.match(/^(min|max)-(w|h)-\\[([^\\]]+)\\]$/);\n    if (!r)\n      return false;\n    if (!(!((n = this.context.device) === null || n === void 0) && n.windowDimensions))\n      return this.isNull = true, true;\n    let i = this.context.device.windowDimensions, [, o = \"\", u = \"\", s = \"\"] = r, a = u === \"w\" ? i.width : i.height, l = pe(s, this.context);\n    if (l === null)\n      return this.isNull = true, true;\n    let [f, d] = l;\n    return d !== \"px\" && (this.isNull = true), (o === \"min\" ? a >= f : a <= f) ? this.incrementOrder() : this.isNull = true, true;\n  }\n  advance(t = 1) {\n    this.position += t, this.char = this.string[this.position];\n  }\n  get rest() {\n    return this.peekSlice(0, this.string.length);\n  }\n  peekSlice(t, n) {\n    return this.string.slice(this.position + t, this.position + n);\n  }\n  consumePeeked(t) {\n    return this.peekSlice(0, t.length) === t ? (this.advance(t.length), true) : false;\n  }\n  parseIsNegative() {\n    this.char === \"-\" && (this.advance(), this.isNegative = true, this.context.isNegative = true);\n  }\n  incrementOrder() {\n    var t;\n    this.order = ((t = this.order) !== null && t !== void 0 ? t : 0) + 1;\n  }\n};\nc();\nfunction yl(e) {\n  let t = [], n = null;\n  return e.forEach((r) => {\n    if (typeof r == \"string\")\n      t = [...t, ...Lo(r)];\n    else if (Array.isArray(r))\n      t = [...t, ...r.flatMap(Lo)];\n    else if (typeof r == \"object\" && r !== null)\n      for (let [i, o] of Object.entries(r))\n        typeof o == \"boolean\" ? t = [...t, ...o ? Lo(i) : []] : n ? n[i] = o : n = { [i]: o };\n  }), [t.filter(Boolean).filter(Um), n];\n}\nfunction Lo(e) {\n  return e.trim().split(/\\s+/);\n}\nfunction Um(e, t, n) {\n  return n.indexOf(e) === t;\n}\nc();\nfunction xl(e) {\n  var t;\n  return (t = e == null ? void 0 : e.reduce((n, r) => ({ ...n, ...zm(r.handler) }), {})) !== null && t !== void 0 ? t : {};\n}\nfunction zm(e) {\n  let t = {};\n  return e({ addUtilities: (n) => {\n    t = n;\n  }, ...Gm }), t;\n}\nfunction Ue(e) {\n  throw new Error(`tailwindcss plugin function argument object prop \"${e}\" not implemented`);\n}\nvar Gm = { addComponents: Ue, addBase: Ue, addVariant: Ue, e: Ue, prefix: Ue, theme: Ue, variants: Ue, config: Ue, corePlugins: Ue, matchUtilities: Ue, postcss: null };\nfunction wl(e, t) {\n  let n = (0, Fl.default)(jm(e)), r = {}, i = xl(n.plugins), o = {}, u = Object.entries(i).map(([p, D]) => typeof D == \"string\" ? (o[p] = D, [p, { kind: \"null\" }]) : [p, g(D)]).filter(([, p]) => p.kind !== \"null\");\n  function s() {\n    return [r.windowDimensions ? `w${r.windowDimensions.width}` : false, r.windowDimensions ? `h${r.windowDimensions.height}` : false, r.fontScale ? `fs${r.fontScale}` : false, r.colorScheme === \"dark\" ? \"dark\" : false, r.pixelDensity === 2 ? \"retina\" : false].filter(Boolean).join(\"--\") || \"default\";\n  }\n  let a = s(), l = {};\n  function f() {\n    let p = l[a];\n    if (p)\n      return p;\n    let D = new Er(u);\n    return l[a] = D, D;\n  }\n  function d(...p) {\n    let D = f(), F = {}, b = [], v = [], [E, C] = yl(p), w = E.join(\" \"), O = D.getStyle(w);\n    if (O)\n      return { ...O, ...C || {} };\n    for (let R of E) {\n      let L = D.getIr(R);\n      if (!L && R in o) {\n        let se = d(o[R]);\n        D.setIr(R, g(se)), F = { ...F, ...se };\n        continue;\n      }\n      switch (L = new kt(R, n, D, r, t).parse(), L.kind) {\n        case \"complete\":\n          F = { ...F, ...L.style }, D.setIr(R, L);\n          break;\n        case \"dependent\":\n          b.push(L);\n          break;\n        case \"ordered\":\n          v.push(L);\n          break;\n        case \"null\":\n          D.setIr(R, L);\n          break;\n      }\n    }\n    if (v.length > 0) {\n      v.sort((R, L) => R.order - L.order);\n      for (let R of v)\n        switch (R.styleIr.kind) {\n          case \"complete\":\n            F = { ...F, ...R.styleIr.style };\n            break;\n          case \"dependent\":\n            b.push(R.styleIr);\n            break;\n        }\n    }\n    if (b.length > 0) {\n      for (let R of b) {\n        let L = R.complete(F);\n        L && Ce(L);\n      }\n      ll(F);\n    }\n    return w !== \"\" && D.setStyle(w, F), C && (F = { ...F, ...C }), F;\n  }\n  function h(p) {\n    let D = d(p.split(/\\s+/g).map((F) => F.replace(/^(bg|text|border)-/, \"\")).map((F) => `bg-${F}`).join(\" \"));\n    return typeof D.backgroundColor == \"string\" ? D.backgroundColor : void 0;\n  }\n  let m = (p, ...D) => {\n    let F = \"\";\n    return p.forEach((b, v) => {\n      var E;\n      F += b + ((E = D[v]) !== null && E !== void 0 ? E : \"\");\n    }), d(F);\n  };\n  return m.style = d, m.color = h, m.prefixMatch = (...p) => {\n    let D = p.sort().join(\":\"), F = f(), b = F.getPrefixMatch(D);\n    if (b !== void 0)\n      return b;\n    let C = new kt(`${D}:flex`, n, F, r, t).parse().kind !== \"null\";\n    return F.setPrefixMatch(D, C), C;\n  }, m.setWindowDimensions = (p) => {\n    r.windowDimensions = p, a = s();\n  }, m.setFontScale = (p) => {\n    r.fontScale = p, a = s();\n  }, m.setPixelDensity = (p) => {\n    r.pixelDensity = p, a = s();\n  }, m.setColorScheme = (p) => {\n    r.colorScheme = p, a = s();\n  }, m;\n}\nfunction jm(e) {\n  return { ...e, content: [\"_no_warnings_please\"] };\n}\nvar Vm = { handler: ({ addUtilities: e }) => {\n  e({ \"shadow-sm\": { boxShadow: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\" }, shadow: { boxShadow: \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\" }, \"shadow-md\": { boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\" }, \"shadow-lg\": { boxShadow: \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\" }, \"shadow-xl\": { boxShadow: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\" }, \"shadow-2xl\": { boxShadow: \"0 25px 50px -12px rgb(0 0 0 / 0.25)\" }, \"shadow-inner\": { boxShadow: \"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\" }, \"shadow-none\": { boxShadow: \"0 0 #0000\" } });\n} };\nfunction Ym(e) {\n  return wl({ ...e, plugins: [...(e == null ? void 0 : e.plugins) ?? [], Vm] }, \"web\");\n}\nvar bn;\nfunction Mo({ width: e, height: t, config: n }) {\n  return bn || (bn = Ym(n)), bn.setWindowDimensions({ width: +e, height: +t }), bn;\n}\nvar No = /* @__PURE__ */ new WeakMap();\nasync function Cl(e, t) {\n  let n = await Ge();\n  if (!n || !n.Node)\n    throw new Error(\"Satori is not initialized: expect `yoga` to be loaded, got \" + n);\n  t.fonts = t.fonts || [];\n  let r;\n  No.has(t.fonts) ? r = No.get(t.fonts) : No.set(t.fonts, r = new Ht(t.fonts));\n  let i = \"width\" in t ? t.width : void 0, o = \"height\" in t ? t.height : void 0, u = n.Node.create();\n  i && u.setWidth(i), o && u.setHeight(o), u.setFlexDirection(n.FLEX_DIRECTION_ROW), u.setFlexWrap(n.WRAP_WRAP), u.setAlignContent(n.ALIGN_AUTO), u.setAlignItems(n.ALIGN_FLEX_START), u.setJustifyContent(n.JUSTIFY_FLEX_START), u.setOverflow(n.OVERFLOW_HIDDEN);\n  let s = { ...t.graphemeImages }, a = /* @__PURE__ */ new Set();\n  $e.clear(), await mu(e);\n  let l = jt(e, { id: \"id\", parentStyle: {}, inheritedStyle: { fontSize: 16, fontWeight: \"normal\", fontFamily: \"serif\", fontStyle: \"normal\", lineHeight: 1.2, color: \"black\", opacity: 1, whiteSpace: \"normal\", _viewportWidth: i, _viewportHeight: o }, parent: u, font: r, embedFont: t.embedFont, debug: t.debug, graphemeImages: s, canLoadAdditionalAssets: !!t.loadAdditionalAsset, onNodeDetected: t.onNodeDetected, getTwStyles: (p, D) => {\n    let b = { ...Mo({ width: i, height: o, config: t.tailwindConfig })([p]) };\n    return typeof b.lineHeight == \"number\" && (b.lineHeight = b.lineHeight / (+b.fontSize || D.fontSize || 16)), b.shadowColor && b.boxShadow && (b.boxShadow = b.boxShadow.replace(/rgba?\\([^)]+\\)/, b.shadowColor)), b;\n  } }), f = (await l.next()).value;\n  if (t.loadAdditionalAsset && f.length) {\n    let p = Xm(f), D = [], F = {};\n    await Promise.all(Object.entries(p).flatMap(([b, v]) => v.map((E) => {\n      let C = `${b}_${E}`;\n      return a.has(C) ? null : (a.add(C), t.loadAdditionalAsset(b, E).then((w) => {\n        typeof w == \"string\" ? F[E] = w : w && (Array.isArray(w) ? D.push(...w) : D.push(w));\n      }));\n    }))), r.addFonts(D), Object.assign(s, F);\n  }\n  await l.next(), u.calculateLayout(i, o, n.DIRECTION_LTR);\n  let d = (await l.next([0, 0])).value, h = u.getComputedWidth(), m = u.getComputedHeight();\n  return u.freeRecursive(), Xn({ width: h, height: m, content: d });\n}\nfunction Xm(e) {\n  let t = {}, n = {};\n  for (let { word: r, locale: i } of e) {\n    let o = qu(r, i).join(\"|\");\n    n[o] = n[o] || \"\", n[o] += r;\n  }\n  return Object.keys(n).forEach((r) => {\n    t[r] = t[r] || [], r === \"emoji\" ? t[r].push(...El(Se(n[r], \"grapheme\"))) : (t[r][0] = t[r][0] || \"\", t[r][0] += El(Se(n[r], \"grapheme\", r === \"unknown\" ? void 0 : r)).join(\"\"));\n  }), t;\n}\nfunction El(e) {\n  return Array.from(new Set(e));\n}\n\n// node_modules/.pnpm/yoga-wasm-web@0.3.3/node_modules/yoga-wasm-web/dist/wrapAsm-f766f97f.js\nvar YGEnums = {};\nvar ALIGN_AUTO = YGEnums.ALIGN_AUTO = 0;\nvar ALIGN_FLEX_START = YGEnums.ALIGN_FLEX_START = 1;\nvar ALIGN_CENTER = YGEnums.ALIGN_CENTER = 2;\nvar ALIGN_FLEX_END = YGEnums.ALIGN_FLEX_END = 3;\nvar ALIGN_STRETCH = YGEnums.ALIGN_STRETCH = 4;\nvar ALIGN_BASELINE = YGEnums.ALIGN_BASELINE = 5;\nvar ALIGN_SPACE_BETWEEN = YGEnums.ALIGN_SPACE_BETWEEN = 6;\nvar ALIGN_SPACE_AROUND = YGEnums.ALIGN_SPACE_AROUND = 7;\nvar DIMENSION_WIDTH = YGEnums.DIMENSION_WIDTH = 0;\nvar DIMENSION_HEIGHT = YGEnums.DIMENSION_HEIGHT = 1;\nvar DIRECTION_INHERIT = YGEnums.DIRECTION_INHERIT = 0;\nvar DIRECTION_LTR = YGEnums.DIRECTION_LTR = 1;\nvar DIRECTION_RTL = YGEnums.DIRECTION_RTL = 2;\nvar DISPLAY_FLEX = YGEnums.DISPLAY_FLEX = 0;\nvar DISPLAY_NONE = YGEnums.DISPLAY_NONE = 1;\nvar EDGE_LEFT = YGEnums.EDGE_LEFT = 0;\nvar EDGE_TOP = YGEnums.EDGE_TOP = 1;\nvar EDGE_RIGHT = YGEnums.EDGE_RIGHT = 2;\nvar EDGE_BOTTOM = YGEnums.EDGE_BOTTOM = 3;\nvar EDGE_START = YGEnums.EDGE_START = 4;\nvar EDGE_END = YGEnums.EDGE_END = 5;\nvar EDGE_HORIZONTAL = YGEnums.EDGE_HORIZONTAL = 6;\nvar EDGE_VERTICAL = YGEnums.EDGE_VERTICAL = 7;\nvar EDGE_ALL = YGEnums.EDGE_ALL = 8;\nvar EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS = YGEnums.EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS = 0;\nvar EXPERIMENTAL_FEATURE_ABSOLUTE_PERCENTAGE_AGAINST_PADDING_EDGE = YGEnums.EXPERIMENTAL_FEATURE_ABSOLUTE_PERCENTAGE_AGAINST_PADDING_EDGE = 1;\nvar EXPERIMENTAL_FEATURE_FIX_ABSOLUTE_TRAILING_COLUMN_MARGIN = YGEnums.EXPERIMENTAL_FEATURE_FIX_ABSOLUTE_TRAILING_COLUMN_MARGIN = 2;\nvar FLEX_DIRECTION_COLUMN = YGEnums.FLEX_DIRECTION_COLUMN = 0;\nvar FLEX_DIRECTION_COLUMN_REVERSE = YGEnums.FLEX_DIRECTION_COLUMN_REVERSE = 1;\nvar FLEX_DIRECTION_ROW = YGEnums.FLEX_DIRECTION_ROW = 2;\nvar FLEX_DIRECTION_ROW_REVERSE = YGEnums.FLEX_DIRECTION_ROW_REVERSE = 3;\nvar GUTTER_COLUMN = YGEnums.GUTTER_COLUMN = 0;\nvar GUTTER_ROW = YGEnums.GUTTER_ROW = 1;\nvar GUTTER_ALL = YGEnums.GUTTER_ALL = 2;\nvar JUSTIFY_FLEX_START = YGEnums.JUSTIFY_FLEX_START = 0;\nvar JUSTIFY_CENTER = YGEnums.JUSTIFY_CENTER = 1;\nvar JUSTIFY_FLEX_END = YGEnums.JUSTIFY_FLEX_END = 2;\nvar JUSTIFY_SPACE_BETWEEN = YGEnums.JUSTIFY_SPACE_BETWEEN = 3;\nvar JUSTIFY_SPACE_AROUND = YGEnums.JUSTIFY_SPACE_AROUND = 4;\nvar JUSTIFY_SPACE_EVENLY = YGEnums.JUSTIFY_SPACE_EVENLY = 5;\nvar LOG_LEVEL_ERROR = YGEnums.LOG_LEVEL_ERROR = 0;\nvar LOG_LEVEL_WARN = YGEnums.LOG_LEVEL_WARN = 1;\nvar LOG_LEVEL_INFO = YGEnums.LOG_LEVEL_INFO = 2;\nvar LOG_LEVEL_DEBUG = YGEnums.LOG_LEVEL_DEBUG = 3;\nvar LOG_LEVEL_VERBOSE = YGEnums.LOG_LEVEL_VERBOSE = 4;\nvar LOG_LEVEL_FATAL = YGEnums.LOG_LEVEL_FATAL = 5;\nvar MEASURE_MODE_UNDEFINED = YGEnums.MEASURE_MODE_UNDEFINED = 0;\nvar MEASURE_MODE_EXACTLY = YGEnums.MEASURE_MODE_EXACTLY = 1;\nvar MEASURE_MODE_AT_MOST = YGEnums.MEASURE_MODE_AT_MOST = 2;\nvar NODE_TYPE_DEFAULT = YGEnums.NODE_TYPE_DEFAULT = 0;\nvar NODE_TYPE_TEXT = YGEnums.NODE_TYPE_TEXT = 1;\nvar OVERFLOW_VISIBLE = YGEnums.OVERFLOW_VISIBLE = 0;\nvar OVERFLOW_HIDDEN = YGEnums.OVERFLOW_HIDDEN = 1;\nvar OVERFLOW_SCROLL = YGEnums.OVERFLOW_SCROLL = 2;\nvar POSITION_TYPE_STATIC = YGEnums.POSITION_TYPE_STATIC = 0;\nvar POSITION_TYPE_RELATIVE = YGEnums.POSITION_TYPE_RELATIVE = 1;\nvar POSITION_TYPE_ABSOLUTE = YGEnums.POSITION_TYPE_ABSOLUTE = 2;\nvar PRINT_OPTIONS_LAYOUT = YGEnums.PRINT_OPTIONS_LAYOUT = 1;\nvar PRINT_OPTIONS_STYLE = YGEnums.PRINT_OPTIONS_STYLE = 2;\nvar PRINT_OPTIONS_CHILDREN = YGEnums.PRINT_OPTIONS_CHILDREN = 4;\nvar UNIT_UNDEFINED = YGEnums.UNIT_UNDEFINED = 0;\nvar UNIT_POINT = YGEnums.UNIT_POINT = 1;\nvar UNIT_PERCENT = YGEnums.UNIT_PERCENT = 2;\nvar UNIT_AUTO = YGEnums.UNIT_AUTO = 3;\nvar WRAP_NO_WRAP = YGEnums.WRAP_NO_WRAP = 0;\nvar WRAP_WRAP = YGEnums.WRAP_WRAP = 1;\nvar WRAP_WRAP_REVERSE = YGEnums.WRAP_WRAP_REVERSE = 2;\nvar wrapAsm = (E) => {\n  function _(E2, _2, T2) {\n    let N2 = E2[_2];\n    E2[_2] = function(...E3) {\n      return T2.call(this, N2, ...E3);\n    };\n  }\n  for (let T2 of [\"setPosition\", \"setMargin\", \"setFlexBasis\", \"setWidth\", \"setHeight\", \"setMinWidth\", \"setMinHeight\", \"setMaxWidth\", \"setMaxHeight\", \"setPadding\"]) {\n    let N2 = { [YGEnums.UNIT_POINT]: E.Node.prototype[T2], [YGEnums.UNIT_PERCENT]: E.Node.prototype[`${T2}Percent`], [YGEnums.UNIT_AUTO]: E.Node.prototype[`${T2}Auto`] };\n    _(E.Node.prototype, T2, function(E2, ..._2) {\n      let I, L;\n      let O = _2.pop();\n      if (O === \"auto\")\n        I = YGEnums.UNIT_AUTO, L = void 0;\n      else if (typeof O == \"object\")\n        I = O.unit, L = O.valueOf();\n      else if (I = typeof O == \"string\" && O.endsWith(\"%\") ? YGEnums.UNIT_PERCENT : YGEnums.UNIT_POINT, L = parseFloat(O), !Number.isNaN(O) && Number.isNaN(L))\n        throw Error(`Invalid value ${O} for ${T2}`);\n      if (!N2[I])\n        throw Error(`Failed to execute \"${T2}\": Unsupported unit '${O}'`);\n      return L !== void 0 ? N2[I].call(this, ..._2, L) : N2[I].call(this, ..._2);\n    });\n  }\n  function T(_2) {\n    return E.MeasureCallback.implement({ measure: (...E2) => {\n      let { width: T2, height: N2 } = _2(...E2);\n      return { width: T2 ?? NaN, height: N2 ?? NaN };\n    } });\n  }\n  function N(_2) {\n    return E.DirtiedCallback.implement({ dirtied: _2 });\n  }\n  return _(E.Node.prototype, \"setMeasureFunc\", function(E2, _2) {\n    return _2 ? E2.call(this, T(_2)) : this.unsetMeasureFunc();\n  }), _(E.Node.prototype, \"setDirtiedFunc\", function(E2, _2) {\n    E2.call(this, N(_2));\n  }), _(E.Config.prototype, \"free\", function() {\n    E.Config.destroy(this);\n  }), _(E.Node, \"create\", (_2, T2) => T2 ? E.Node.createWithConfig(T2) : E.Node.createDefault()), _(E.Node.prototype, \"free\", function() {\n    E.Node.destroy(this);\n  }), _(E.Node.prototype, \"freeRecursive\", function() {\n    for (let E2 = 0, _2 = this.getChildCount(); E2 < _2; ++E2)\n      this.getChild(0).freeRecursive();\n    this.free();\n  }), _(E.Node.prototype, \"calculateLayout\", function(E2, _2 = NaN, T2 = NaN, N2 = YGEnums.DIRECTION_LTR) {\n    return E2.call(this, _2, T2, N2);\n  }), { Config: E.Config, Node: E.Node, ...YGEnums };\n};\n\n// node_modules/.pnpm/yoga-wasm-web@0.3.3/node_modules/yoga-wasm-web/dist/index.js\nvar yoga = (() => {\n  var n = typeof document != \"undefined\" && document.currentScript ? document.currentScript.src : void 0;\n  return function(t = {}) {\n    u || (u = t !== void 0 ? t : {}), u.ready = new Promise(function(n2, t2) {\n      c2 = n2, f = t2;\n    });\n    var r, e, a = Object.assign({}, u), i = \"\";\n    typeof document != \"undefined\" && document.currentScript && (i = document.currentScript.src), n && (i = n), i = i.indexOf(\"blob:\") !== 0 ? i.substr(0, i.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1) : \"\";\n    var o = console.log.bind(console), s = console.warn.bind(console);\n    Object.assign(u, a), a = null, typeof WebAssembly != \"object\" && w(\"no native wasm support detected\");\n    var u, c2, f, l, h = false;\n    function p(n2, t2, r2) {\n      r2 = t2 + r2;\n      for (var e2 = \"\"; !(t2 >= r2); ) {\n        var a2 = n2[t2++];\n        if (!a2)\n          break;\n        if (128 & a2) {\n          var i2 = 63 & n2[t2++];\n          if ((224 & a2) == 192)\n            e2 += String.fromCharCode((31 & a2) << 6 | i2);\n          else {\n            var o2 = 63 & n2[t2++];\n            65536 > (a2 = (240 & a2) == 224 ? (15 & a2) << 12 | i2 << 6 | o2 : (7 & a2) << 18 | i2 << 12 | o2 << 6 | 63 & n2[t2++]) ? e2 += String.fromCharCode(a2) : (a2 -= 65536, e2 += String.fromCharCode(55296 | a2 >> 10, 56320 | 1023 & a2));\n          }\n        } else\n          e2 += String.fromCharCode(a2);\n      }\n      return e2;\n    }\n    function v() {\n      var n2 = l.buffer;\n      u.HEAP8 = d = new Int8Array(n2), u.HEAP16 = m = new Int16Array(n2), u.HEAP32 = g2 = new Int32Array(n2), u.HEAPU8 = y = new Uint8Array(n2), u.HEAPU16 = E = new Uint16Array(n2), u.HEAPU32 = _ = new Uint32Array(n2), u.HEAPF32 = T = new Float32Array(n2), u.HEAPF64 = L = new Float64Array(n2);\n    }\n    var d, y, m, E, g2, _, T, L, A, O = [], P2 = [], b = [], N = 0, I = null;\n    function w(n2) {\n      throw s(n2 = \"Aborted(\" + n2 + \")\"), h = true, f(n2 = new WebAssembly.RuntimeError(n2 + \". Build with -sASSERTIONS for more info.\")), n2;\n    }\n    function S() {\n      return r.startsWith(\"data:application/octet-stream;base64,\");\n    }\n    function R() {\n      try {\n        throw \"both async and sync fetching of the wasm failed\";\n      } catch (n2) {\n        w(n2);\n      }\n    }\n    function C(n2) {\n      for (; 0 < n2.length; )\n        n2.shift()(u);\n    }\n    function W(n2) {\n      if (n2 === void 0)\n        return \"_unknown\";\n      var t2 = (n2 = n2.replace(/[^a-zA-Z0-9_]/g, \"$\")).charCodeAt(0);\n      return 48 <= t2 && 57 >= t2 ? \"_\" + n2 : n2;\n    }\n    function U(n2, t2) {\n      return n2 = W(n2), function() {\n        return t2.apply(this, arguments);\n      };\n    }\n    r = \"yoga.wasm\", S() || (r = i + r);\n    var M = [{}, { value: void 0 }, { value: null }, { value: true }, { value: false }], F = [];\n    function D(n2) {\n      var t2 = Error, r2 = U(n2, function(t3) {\n        this.name = n2, this.message = t3, (t3 = Error(t3).stack) !== void 0 && (this.stack = this.toString() + \"\\n\" + t3.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n      });\n      return r2.prototype = Object.create(t2.prototype), r2.prototype.constructor = r2, r2.prototype.toString = function() {\n        return this.message === void 0 ? this.name : this.name + \": \" + this.message;\n      }, r2;\n    }\n    var k2 = void 0;\n    function V(n2) {\n      throw new k2(n2);\n    }\n    var j = (n2) => (n2 || V(\"Cannot use deleted val. handle = \" + n2), M[n2].value), G2 = (n2) => {\n      switch (n2) {\n        case void 0:\n          return 1;\n        case null:\n          return 2;\n        case true:\n          return 3;\n        case false:\n          return 4;\n        default:\n          var t2 = F.length ? F.pop() : M.length;\n          return M[t2] = { fa: 1, value: n2 }, t2;\n      }\n    }, Y = void 0, X = void 0;\n    function B(n2) {\n      for (var t2 = \"\"; y[n2]; )\n        t2 += X[y[n2++]];\n      return t2;\n    }\n    var H2 = [];\n    function x() {\n      for (; H2.length; ) {\n        var n2 = H2.pop();\n        n2.L.Z = false, n2.delete();\n      }\n    }\n    var z = void 0, $ = {};\n    function Z(n2, t2) {\n      for (t2 === void 0 && V(\"ptr should not be undefined\"); n2.P; )\n        t2 = n2.aa(t2), n2 = n2.P;\n      return t2;\n    }\n    var J = {};\n    function q(n2) {\n      var t2 = B(n2 = nz(n2));\n      return nZ(n2), t2;\n    }\n    function K(n2, t2) {\n      var r2 = J[n2];\n      return r2 === void 0 && V(t2 + \" has unknown type \" + q(n2)), r2;\n    }\n    function Q() {\n    }\n    var nn = false;\n    function nt2(n2) {\n      --n2.count.value, n2.count.value === 0 && (n2.S ? n2.T.V(n2.S) : n2.O.M.V(n2.N));\n    }\n    var nr = {}, ne = void 0;\n    function na2(n2) {\n      throw new ne(n2);\n    }\n    function ni(n2, t2) {\n      return t2.O && t2.N || na2(\"makeClassHandle requires ptr and ptrType\"), !!t2.T != !!t2.S && na2(\"Both smartPtrType and smartPtr must be specified\"), t2.count = { value: 1 }, no2(Object.create(n2, { L: { value: t2 } }));\n    }\n    function no2(n2) {\n      return typeof FinalizationRegistry == \"undefined\" ? (no2 = (n3) => n3, n2) : (nn = new FinalizationRegistry((n3) => {\n        nt2(n3.L);\n      }), no2 = (n3) => {\n        var t2 = n3.L;\n        return t2.S && nn.register(n3, { L: t2 }, n3), n3;\n      }, Q = (n3) => {\n        nn.unregister(n3);\n      }, no2(n2));\n    }\n    var ns = {};\n    function nu2(n2) {\n      for (; n2.length; ) {\n        var t2 = n2.pop();\n        n2.pop()(t2);\n      }\n    }\n    function nc(n2) {\n      return this.fromWireType(g2[n2 >> 2]);\n    }\n    var nf2 = {}, nl2 = {};\n    function nh(n2, t2, r2) {\n      function e2(t3) {\n        (t3 = r2(t3)).length !== n2.length && na2(\"Mismatched type converter count\");\n        for (var e3 = 0; e3 < n2.length; ++e3)\n          nv(n2[e3], t3[e3]);\n      }\n      n2.forEach(function(n3) {\n        nl2[n3] = t2;\n      });\n      var a2 = Array(t2.length), i2 = [], o2 = 0;\n      t2.forEach((n3, t3) => {\n        J.hasOwnProperty(n3) ? a2[t3] = J[n3] : (i2.push(n3), nf2.hasOwnProperty(n3) || (nf2[n3] = []), nf2[n3].push(() => {\n          a2[t3] = J[n3], ++o2 === i2.length && e2(a2);\n        }));\n      }), i2.length === 0 && e2(a2);\n    }\n    function np(n2) {\n      switch (n2) {\n        case 1:\n          return 0;\n        case 2:\n          return 1;\n        case 4:\n          return 2;\n        case 8:\n          return 3;\n        default:\n          throw TypeError(\"Unknown type size: \" + n2);\n      }\n    }\n    function nv(n2, t2, r2 = {}) {\n      if (!(\"argPackAdvance\" in t2))\n        throw TypeError(\"registerType registeredInstance requires argPackAdvance\");\n      var e2 = t2.name;\n      if (n2 || V('type \"' + e2 + '\" must have a positive integer typeid pointer'), J.hasOwnProperty(n2)) {\n        if (r2.ta)\n          return;\n        V(\"Cannot register type '\" + e2 + \"' twice\");\n      }\n      J[n2] = t2, delete nl2[n2], nf2.hasOwnProperty(n2) && (t2 = nf2[n2], delete nf2[n2], t2.forEach((n3) => n3()));\n    }\n    function nd(n2) {\n      V(n2.L.O.M.name + \" instance already deleted\");\n    }\n    function ny() {\n    }\n    function nm(n2, t2, r2) {\n      if (n2[t2].R === void 0) {\n        var e2 = n2[t2];\n        n2[t2] = function() {\n          return n2[t2].R.hasOwnProperty(arguments.length) || V(\"Function '\" + r2 + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + n2[t2].R + \")!\"), n2[t2].R[arguments.length].apply(this, arguments);\n        }, n2[t2].R = [], n2[t2].R[e2.Y] = e2;\n      }\n    }\n    function nE(n2, t2, r2, e2, a2, i2, o2, s2) {\n      this.name = n2, this.constructor = t2, this.W = r2, this.V = e2, this.P = a2, this.oa = i2, this.aa = o2, this.ma = s2, this.ia = [];\n    }\n    function ng(n2, t2, r2) {\n      for (; t2 !== r2; )\n        t2.aa || V(\"Expected null or instance of \" + r2.name + \", got an instance of \" + t2.name), n2 = t2.aa(n2), t2 = t2.P;\n      return n2;\n    }\n    function n_(n2, t2) {\n      return t2 === null ? (this.da && V(\"null is not a valid \" + this.name), 0) : (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), ng(t2.L.N, t2.L.O.M, this.M));\n    }\n    function nT(n2, t2) {\n      if (t2 === null) {\n        if (this.da && V(\"null is not a valid \" + this.name), this.ca) {\n          var r2 = this.ea();\n          return n2 !== null && n2.push(this.V, r2), r2;\n        }\n        return 0;\n      }\n      if (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), !this.ba && t2.L.O.ba && V(\"Cannot convert argument of type \" + (t2.L.T ? t2.L.T.name : t2.L.O.name) + \" to parameter type \" + this.name), r2 = ng(t2.L.N, t2.L.O.M, this.M), this.ca)\n        switch (t2.L.S === void 0 && V(\"Passing raw pointer to smart pointer is illegal\"), this.Aa) {\n          case 0:\n            t2.L.T === this ? r2 = t2.L.S : V(\"Cannot convert argument of type \" + (t2.L.T ? t2.L.T.name : t2.L.O.name) + \" to parameter type \" + this.name);\n            break;\n          case 1:\n            r2 = t2.L.S;\n            break;\n          case 2:\n            if (t2.L.T === this)\n              r2 = t2.L.S;\n            else {\n              var e2 = t2.clone();\n              r2 = this.wa(r2, G2(function() {\n                e2.delete();\n              })), n2 !== null && n2.push(this.V, r2);\n            }\n            break;\n          default:\n            V(\"Unsupporting sharing policy\");\n        }\n      return r2;\n    }\n    function nL(n2, t2) {\n      return t2 === null ? (this.da && V(\"null is not a valid \" + this.name), 0) : (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), t2.L.O.ba && V(\"Cannot convert argument of type \" + t2.L.O.name + \" to parameter type \" + this.name), ng(t2.L.N, t2.L.O.M, this.M));\n    }\n    function nA(n2, t2, r2, e2) {\n      this.name = n2, this.M = t2, this.da = r2, this.ba = e2, this.ca = false, this.V = this.wa = this.ea = this.ja = this.Aa = this.va = void 0, t2.P !== void 0 ? this.toWireType = nT : (this.toWireType = e2 ? n_ : nL, this.U = null);\n    }\n    var nO = [];\n    function nP(n2) {\n      var t2 = nO[n2];\n      return t2 || (n2 >= nO.length && (nO.length = n2 + 1), nO[n2] = t2 = A.get(n2)), t2;\n    }\n    function nb(n2, t2) {\n      var r2, e2, a2 = (n2 = B(n2)).includes(\"j\") ? (r2 = n2, e2 = [], function() {\n        if (e2.length = 0, Object.assign(e2, arguments), r2.includes(\"j\")) {\n          var n3 = u[\"dynCall_\" + r2];\n          n3 = e2 && e2.length ? n3.apply(null, [t2].concat(e2)) : n3.call(null, t2);\n        } else\n          n3 = nP(t2).apply(null, e2);\n        return n3;\n      }) : nP(t2);\n      return typeof a2 != \"function\" && V(\"unknown function pointer with signature \" + n2 + \": \" + t2), a2;\n    }\n    var nN = void 0;\n    function nI(n2, t2) {\n      var r2 = [], e2 = {};\n      throw t2.forEach(function n3(t3) {\n        e2[t3] || J[t3] || (nl2[t3] ? nl2[t3].forEach(n3) : (r2.push(t3), e2[t3] = true));\n      }), new nN(n2 + \": \" + r2.map(q).join([\", \"]));\n    }\n    function nw(n2, t2, r2, e2, a2) {\n      var i2 = t2.length;\n      2 > i2 && V(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n      var o2 = t2[1] !== null && r2 !== null, s2 = false;\n      for (r2 = 1; r2 < t2.length; ++r2)\n        if (t2[r2] !== null && t2[r2].U === void 0) {\n          s2 = true;\n          break;\n        }\n      var u2 = t2[0].name !== \"void\", c3 = i2 - 2, f2 = Array(c3), l2 = [], h2 = [];\n      return function() {\n        if (arguments.length !== c3 && V(\"function \" + n2 + \" called with \" + arguments.length + \" arguments, expected \" + c3 + \" args!\"), h2.length = 0, l2.length = o2 ? 2 : 1, l2[0] = a2, o2) {\n          var r3 = t2[1].toWireType(h2, this);\n          l2[1] = r3;\n        }\n        for (var i3 = 0; i3 < c3; ++i3)\n          f2[i3] = t2[i3 + 2].toWireType(h2, arguments[i3]), l2.push(f2[i3]);\n        if (i3 = e2.apply(null, l2), s2)\n          nu2(h2);\n        else\n          for (var p2 = o2 ? 1 : 2; p2 < t2.length; p2++) {\n            var v2 = p2 === 1 ? r3 : f2[p2 - 2];\n            t2[p2].U !== null && t2[p2].U(v2);\n          }\n        return u2 ? t2[0].fromWireType(i3) : void 0;\n      };\n    }\n    function nS(n2, t2) {\n      for (var r2 = [], e2 = 0; e2 < n2; e2++)\n        r2.push(_[t2 + 4 * e2 >> 2]);\n      return r2;\n    }\n    function nR(n2) {\n      4 < n2 && --M[n2].fa == 0 && (M[n2] = void 0, F.push(n2));\n    }\n    function nC(n2) {\n      if (n2 === null)\n        return \"null\";\n      var t2 = typeof n2;\n      return t2 === \"object\" || t2 === \"array\" || t2 === \"function\" ? n2.toString() : \"\" + n2;\n    }\n    function nW(n2, t2) {\n      for (var r2 = \"\", e2 = 0; !(e2 >= t2 / 2); ++e2) {\n        var a2 = m[n2 + 2 * e2 >> 1];\n        if (a2 == 0)\n          break;\n        r2 += String.fromCharCode(a2);\n      }\n      return r2;\n    }\n    function nU(n2, t2, r2) {\n      if (r2 === void 0 && (r2 = 2147483647), 2 > r2)\n        return 0;\n      r2 -= 2;\n      var e2 = t2;\n      r2 = r2 < 2 * n2.length ? r2 / 2 : n2.length;\n      for (var a2 = 0; a2 < r2; ++a2)\n        m[t2 >> 1] = n2.charCodeAt(a2), t2 += 2;\n      return m[t2 >> 1] = 0, t2 - e2;\n    }\n    function nM(n2) {\n      return 2 * n2.length;\n    }\n    function nF(n2, t2) {\n      for (var r2 = 0, e2 = \"\"; !(r2 >= t2 / 4); ) {\n        var a2 = g2[n2 + 4 * r2 >> 2];\n        if (a2 == 0)\n          break;\n        ++r2, 65536 <= a2 ? (a2 -= 65536, e2 += String.fromCharCode(55296 | a2 >> 10, 56320 | 1023 & a2)) : e2 += String.fromCharCode(a2);\n      }\n      return e2;\n    }\n    function nD(n2, t2, r2) {\n      if (r2 === void 0 && (r2 = 2147483647), 4 > r2)\n        return 0;\n      var e2 = t2;\n      r2 = e2 + r2 - 4;\n      for (var a2 = 0; a2 < n2.length; ++a2) {\n        var i2 = n2.charCodeAt(a2);\n        if (55296 <= i2 && 57343 >= i2 && (i2 = 65536 + ((1023 & i2) << 10) | 1023 & n2.charCodeAt(++a2)), g2[t2 >> 2] = i2, (t2 += 4) + 4 > r2)\n          break;\n      }\n      return g2[t2 >> 2] = 0, t2 - e2;\n    }\n    function nk(n2) {\n      for (var t2 = 0, r2 = 0; r2 < n2.length; ++r2) {\n        var e2 = n2.charCodeAt(r2);\n        55296 <= e2 && 57343 >= e2 && ++r2, t2 += 4;\n      }\n      return t2;\n    }\n    var nV = {};\n    function nj(n2) {\n      var t2 = nV[n2];\n      return t2 === void 0 ? B(n2) : t2;\n    }\n    var nG = [], nY = [], nX = [null, [], []];\n    k2 = u.BindingError = D(\"BindingError\"), u.count_emval_handles = function() {\n      for (var n2 = 0, t2 = 5; t2 < M.length; ++t2)\n        M[t2] !== void 0 && ++n2;\n      return n2;\n    }, u.get_first_emval = function() {\n      for (var n2 = 5; n2 < M.length; ++n2)\n        if (M[n2] !== void 0)\n          return M[n2];\n      return null;\n    }, Y = u.PureVirtualError = D(\"PureVirtualError\");\n    for (var nB = Array(256), nH = 0; 256 > nH; ++nH)\n      nB[nH] = String.fromCharCode(nH);\n    X = nB, u.getInheritedInstanceCount = function() {\n      return Object.keys($).length;\n    }, u.getLiveInheritedInstances = function() {\n      var n2, t2 = [];\n      for (n2 in $)\n        $.hasOwnProperty(n2) && t2.push($[n2]);\n      return t2;\n    }, u.flushPendingDeletes = x, u.setDelayFunction = function(n2) {\n      z = n2, H2.length && z && z(x);\n    }, ne = u.InternalError = D(\"InternalError\"), ny.prototype.isAliasOf = function(n2) {\n      if (!(this instanceof ny && n2 instanceof ny))\n        return false;\n      var t2 = this.L.O.M, r2 = this.L.N, e2 = n2.L.O.M;\n      for (n2 = n2.L.N; t2.P; )\n        r2 = t2.aa(r2), t2 = t2.P;\n      for (; e2.P; )\n        n2 = e2.aa(n2), e2 = e2.P;\n      return t2 === e2 && r2 === n2;\n    }, ny.prototype.clone = function() {\n      if (this.L.N || nd(this), this.L.$)\n        return this.L.count.value += 1, this;\n      var n2 = no2, t2 = Object, r2 = t2.create, e2 = Object.getPrototypeOf(this), a2 = this.L;\n      return n2 = n2(r2.call(t2, e2, { L: { value: { count: a2.count, Z: a2.Z, $: a2.$, N: a2.N, O: a2.O, S: a2.S, T: a2.T } } })), n2.L.count.value += 1, n2.L.Z = false, n2;\n    }, ny.prototype.delete = function() {\n      this.L.N || nd(this), this.L.Z && !this.L.$ && V(\"Object already scheduled for deletion\"), Q(this), nt2(this.L), this.L.$ || (this.L.S = void 0, this.L.N = void 0);\n    }, ny.prototype.isDeleted = function() {\n      return !this.L.N;\n    }, ny.prototype.deleteLater = function() {\n      return this.L.N || nd(this), this.L.Z && !this.L.$ && V(\"Object already scheduled for deletion\"), H2.push(this), H2.length === 1 && z && z(x), this.L.Z = true, this;\n    }, nA.prototype.pa = function(n2) {\n      return this.ja && (n2 = this.ja(n2)), n2;\n    }, nA.prototype.ga = function(n2) {\n      this.V && this.V(n2);\n    }, nA.prototype.argPackAdvance = 8, nA.prototype.readValueFromPointer = nc, nA.prototype.deleteObject = function(n2) {\n      n2 !== null && n2.delete();\n    }, nA.prototype.fromWireType = function(n2) {\n      function t2() {\n        return this.ca ? ni(this.M.W, { O: this.va, N: e2, T: this, S: n2 }) : ni(this.M.W, { O: this, N: n2 });\n      }\n      var r2, e2 = this.pa(n2);\n      if (!e2)\n        return this.ga(n2), null;\n      var a2 = $[Z(this.M, e2)];\n      if (a2 !== void 0)\n        return a2.L.count.value === 0 ? (a2.L.N = e2, a2.L.S = n2, a2.clone()) : (a2 = a2.clone(), this.ga(n2), a2);\n      if (!(a2 = nr[a2 = this.M.oa(e2)]))\n        return t2.call(this);\n      a2 = this.ba ? a2.ka : a2.pointerType;\n      var i2 = function n3(t3, r3, e3) {\n        return r3 === e3 ? t3 : e3.P === void 0 ? null : (t3 = n3(t3, r3, e3.P)) === null ? null : e3.ma(t3);\n      }(e2, this.M, a2.M);\n      return i2 === null ? t2.call(this) : this.ca ? ni(a2.M.W, { O: a2, N: i2, T: this, S: n2 }) : ni(a2.M.W, { O: a2, N: i2 });\n    }, nN = u.UnboundTypeError = D(\"UnboundTypeError\");\n    var nx = { q: function(n2, t2, r2) {\n      n2 = B(n2), t2 = K(t2, \"wrapper\"), r2 = j(r2);\n      var e2 = [].slice, a2 = t2.M, i2 = a2.W, o2 = a2.P.W, s2 = a2.P.constructor;\n      for (var u2 in n2 = U(n2, function() {\n        a2.P.ia.forEach(function(n3) {\n          if (this[n3] === o2[n3])\n            throw new Y(\"Pure virtual function \" + n3 + \" must be implemented in JavaScript\");\n        }.bind(this)), Object.defineProperty(this, \"__parent\", { value: i2 }), this.__construct.apply(this, e2.call(arguments));\n      }), i2.__construct = function() {\n        this === i2 && V(\"Pass correct 'this' to __construct\");\n        var n3 = s2.implement.apply(void 0, [this].concat(e2.call(arguments)));\n        Q(n3);\n        var t3 = n3.L;\n        n3.notifyOnDestruction(), t3.$ = true, Object.defineProperties(this, { L: { value: t3 } }), no2(this), n3 = Z(a2, n3 = t3.N), $.hasOwnProperty(n3) ? V(\"Tried to register registered instance: \" + n3) : $[n3] = this;\n      }, i2.__destruct = function() {\n        this === i2 && V(\"Pass correct 'this' to __destruct\"), Q(this);\n        var n3 = this.L.N;\n        n3 = Z(a2, n3), $.hasOwnProperty(n3) ? delete $[n3] : V(\"Tried to unregister unregistered instance: \" + n3);\n      }, n2.prototype = Object.create(i2), r2)\n        n2.prototype[u2] = r2[u2];\n      return G2(n2);\n    }, l: function(n2) {\n      var t2 = ns[n2];\n      delete ns[n2];\n      var r2 = t2.ea, e2 = t2.V, a2 = t2.ha;\n      nh([n2], a2.map((n3) => n3.sa).concat(a2.map((n3) => n3.ya)), (n3) => {\n        var i2 = {};\n        return a2.forEach((t3, r3) => {\n          var e3 = n3[r3], o2 = t3.qa, s2 = t3.ra, u2 = n3[r3 + a2.length], c3 = t3.xa, f2 = t3.za;\n          i2[t3.na] = { read: (n4) => e3.fromWireType(o2(s2, n4)), write: (n4, t4) => {\n            var r4 = [];\n            c3(f2, n4, u2.toWireType(r4, t4)), nu2(r4);\n          } };\n        }), [{ name: t2.name, fromWireType: function(n4) {\n          var t3, r3 = {};\n          for (t3 in i2)\n            r3[t3] = i2[t3].read(n4);\n          return e2(n4), r3;\n        }, toWireType: function(n4, t3) {\n          for (var a3 in i2)\n            if (!(a3 in t3))\n              throw TypeError('Missing field:  \"' + a3 + '\"');\n          var o2 = r2();\n          for (a3 in i2)\n            i2[a3].write(o2, t3[a3]);\n          return n4 !== null && n4.push(e2, o2), o2;\n        }, argPackAdvance: 8, readValueFromPointer: nc, U: e2 }];\n      });\n    }, v: function() {\n    }, B: function(n2, t2, r2, e2, a2) {\n      var i2 = np(r2);\n      nv(n2, { name: t2 = B(t2), fromWireType: function(n3) {\n        return !!n3;\n      }, toWireType: function(n3, t3) {\n        return t3 ? e2 : a2;\n      }, argPackAdvance: 8, readValueFromPointer: function(n3) {\n        if (r2 === 1)\n          var e3 = d;\n        else if (r2 === 2)\n          e3 = m;\n        else if (r2 === 4)\n          e3 = g2;\n        else\n          throw TypeError(\"Unknown boolean type size: \" + t2);\n        return this.fromWireType(e3[n3 >> i2]);\n      }, U: null });\n    }, h: function(n2, t2, r2, e2, a2, i2, o2, s2, c3, f2, l2, h2, p2) {\n      l2 = B(l2), i2 = nb(a2, i2), s2 && (s2 = nb(o2, s2)), f2 && (f2 = nb(c3, f2)), p2 = nb(h2, p2);\n      var v2, d2 = W(l2);\n      v2 = function() {\n        nI(\"Cannot construct \" + l2 + \" due to unbound types\", [e2]);\n      }, u.hasOwnProperty(d2) ? (V(\"Cannot register public name '\" + d2 + \"' twice\"), nm(u, d2, d2), u.hasOwnProperty(void 0) && V(\"Cannot register multiple overloads of a function with the same number of arguments (undefined)!\"), u[d2].R[void 0] = v2) : u[d2] = v2, nh([n2, t2, r2], e2 ? [e2] : [], function(t3) {\n        if (t3 = t3[0], e2)\n          var r3, a3 = t3.M, o3 = a3.W;\n        else\n          o3 = ny.prototype;\n        t3 = U(d2, function() {\n          if (Object.getPrototypeOf(this) !== c4)\n            throw new k2(\"Use 'new' to construct \" + l2);\n          if (h3.X === void 0)\n            throw new k2(l2 + \" has no accessible constructor\");\n          var n3 = h3.X[arguments.length];\n          if (n3 === void 0)\n            throw new k2(\"Tried to invoke ctor of \" + l2 + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(h3.X).toString() + \") parameters instead!\");\n          return n3.apply(this, arguments);\n        });\n        var c4 = Object.create(o3, { constructor: { value: t3 } });\n        t3.prototype = c4;\n        var h3 = new nE(l2, t3, c4, p2, a3, i2, s2, f2);\n        a3 = new nA(l2, h3, true, false), o3 = new nA(l2 + \"*\", h3, false, false);\n        var v3 = new nA(l2 + \" const*\", h3, false, true);\n        return nr[n2] = { pointerType: o3, ka: v3 }, r3 = t3, u.hasOwnProperty(d2) || na2(\"Replacing nonexistant public symbol\"), u[d2] = r3, u[d2].Y = void 0, [a3, o3, v3];\n      });\n    }, d: function(n2, t2, r2, e2, a2, i2, o2) {\n      var s2 = nS(r2, e2);\n      t2 = B(t2), i2 = nb(a2, i2), nh([], [n2], function(n3) {\n        function e3() {\n          nI(\"Cannot call \" + a3 + \" due to unbound types\", s2);\n        }\n        var a3 = (n3 = n3[0]).name + \".\" + t2;\n        t2.startsWith(\"@@\") && (t2 = Symbol[t2.substring(2)]);\n        var u2 = n3.M.constructor;\n        return u2[t2] === void 0 ? (e3.Y = r2 - 1, u2[t2] = e3) : (nm(u2, t2, a3), u2[t2].R[r2 - 1] = e3), nh([], s2, function(n4) {\n          return n4 = nw(a3, [n4[0], null].concat(n4.slice(1)), null, i2, o2), u2[t2].R === void 0 ? (n4.Y = r2 - 1, u2[t2] = n4) : u2[t2].R[r2 - 1] = n4, [];\n        }), [];\n      });\n    }, p: function(n2, t2, r2, e2, a2, i2) {\n      0 < t2 || w();\n      var o2 = nS(t2, r2);\n      a2 = nb(e2, a2), nh([], [n2], function(n3) {\n        var r3 = \"constructor \" + (n3 = n3[0]).name;\n        if (n3.M.X === void 0 && (n3.M.X = []), n3.M.X[t2 - 1] !== void 0)\n          throw new k2(\"Cannot register multiple constructors with identical number of parameters (\" + (t2 - 1) + \") for class '\" + n3.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n        return n3.M.X[t2 - 1] = () => {\n          nI(\"Cannot construct \" + n3.name + \" due to unbound types\", o2);\n        }, nh([], o2, function(e3) {\n          return e3.splice(1, 0, null), n3.M.X[t2 - 1] = nw(r3, e3, null, a2, i2), [];\n        }), [];\n      });\n    }, a: function(n2, t2, r2, e2, a2, i2, o2, s2) {\n      var u2 = nS(r2, e2);\n      t2 = B(t2), i2 = nb(a2, i2), nh([], [n2], function(n3) {\n        function e3() {\n          nI(\"Cannot call \" + a3 + \" due to unbound types\", u2);\n        }\n        var a3 = (n3 = n3[0]).name + \".\" + t2;\n        t2.startsWith(\"@@\") && (t2 = Symbol[t2.substring(2)]), s2 && n3.M.ia.push(t2);\n        var c3 = n3.M.W, f2 = c3[t2];\n        return f2 === void 0 || f2.R === void 0 && f2.className !== n3.name && f2.Y === r2 - 2 ? (e3.Y = r2 - 2, e3.className = n3.name, c3[t2] = e3) : (nm(c3, t2, a3), c3[t2].R[r2 - 2] = e3), nh([], u2, function(e4) {\n          return e4 = nw(a3, e4, n3, i2, o2), c3[t2].R === void 0 ? (e4.Y = r2 - 2, c3[t2] = e4) : c3[t2].R[r2 - 2] = e4, [];\n        }), [];\n      });\n    }, A: function(n2, t2) {\n      nv(n2, { name: t2 = B(t2), fromWireType: function(n3) {\n        var t3 = j(n3);\n        return nR(n3), t3;\n      }, toWireType: function(n3, t3) {\n        return G2(t3);\n      }, argPackAdvance: 8, readValueFromPointer: nc, U: null });\n    }, n: function(n2, t2, r2) {\n      r2 = np(r2), nv(n2, { name: t2 = B(t2), fromWireType: function(n3) {\n        return n3;\n      }, toWireType: function(n3, t3) {\n        return t3;\n      }, argPackAdvance: 8, readValueFromPointer: function(n3, t3) {\n        switch (t3) {\n          case 2:\n            return function(n4) {\n              return this.fromWireType(T[n4 >> 2]);\n            };\n          case 3:\n            return function(n4) {\n              return this.fromWireType(L[n4 >> 3]);\n            };\n          default:\n            throw TypeError(\"Unknown float type: \" + n3);\n        }\n      }(t2, r2), U: null });\n    }, e: function(n2, t2, r2, e2, a2) {\n      t2 = B(t2), a2 === -1 && (a2 = 4294967295), a2 = np(r2);\n      var i2 = (n3) => n3;\n      if (e2 === 0) {\n        var o2 = 32 - 8 * r2;\n        i2 = (n3) => n3 << o2 >>> o2;\n      }\n      r2 = t2.includes(\"unsigned\") ? function(n3, t3) {\n        return t3 >>> 0;\n      } : function(n3, t3) {\n        return t3;\n      }, nv(n2, { name: t2, fromWireType: i2, toWireType: r2, argPackAdvance: 8, readValueFromPointer: function(n3, t3, r3) {\n        switch (t3) {\n          case 0:\n            return r3 ? function(n4) {\n              return d[n4];\n            } : function(n4) {\n              return y[n4];\n            };\n          case 1:\n            return r3 ? function(n4) {\n              return m[n4 >> 1];\n            } : function(n4) {\n              return E[n4 >> 1];\n            };\n          case 2:\n            return r3 ? function(n4) {\n              return g2[n4 >> 2];\n            } : function(n4) {\n              return _[n4 >> 2];\n            };\n          default:\n            throw TypeError(\"Unknown integer type: \" + n3);\n        }\n      }(t2, a2, e2 !== 0), U: null });\n    }, b: function(n2, t2, r2) {\n      function e2(n3) {\n        n3 >>= 2;\n        var t3 = _;\n        return new a2(t3.buffer, t3[n3 + 1], t3[n3]);\n      }\n      var a2 = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][t2];\n      nv(n2, { name: r2 = B(r2), fromWireType: e2, argPackAdvance: 8, readValueFromPointer: e2 }, { ta: true });\n    }, o: function(n2, t2) {\n      var r2 = (t2 = B(t2)) === \"std::string\";\n      nv(n2, { name: t2, fromWireType: function(n3) {\n        var t3 = _[n3 >> 2], e2 = n3 + 4;\n        if (r2)\n          for (var a2 = e2, i2 = 0; i2 <= t3; ++i2) {\n            var o2 = e2 + i2;\n            if (i2 == t3 || y[o2] == 0) {\n              if (a2 = a2 ? p(y, a2, o2 - a2) : \"\", s2 === void 0)\n                var s2 = a2;\n              else\n                s2 += \"\\0\" + a2;\n              a2 = o2 + 1;\n            }\n          }\n        else {\n          for (i2 = 0, s2 = Array(t3); i2 < t3; ++i2)\n            s2[i2] = String.fromCharCode(y[e2 + i2]);\n          s2 = s2.join(\"\");\n        }\n        return nZ(n3), s2;\n      }, toWireType: function(n3, t3) {\n        t3 instanceof ArrayBuffer && (t3 = new Uint8Array(t3));\n        var e2, a2 = typeof t3 == \"string\";\n        if (a2 || t3 instanceof Uint8Array || t3 instanceof Uint8ClampedArray || t3 instanceof Int8Array || V(\"Cannot pass non-string to std::string\"), r2 && a2) {\n          var i2 = 0;\n          for (e2 = 0; e2 < t3.length; ++e2) {\n            var o2 = t3.charCodeAt(e2);\n            127 >= o2 ? i2++ : 2047 >= o2 ? i2 += 2 : 55296 <= o2 && 57343 >= o2 ? (i2 += 4, ++e2) : i2 += 3;\n          }\n          e2 = i2;\n        } else\n          e2 = t3.length;\n        if (o2 = (i2 = n$(4 + e2 + 1)) + 4, _[i2 >> 2] = e2, r2 && a2) {\n          if (a2 = o2, o2 = e2 + 1, e2 = y, 0 < o2) {\n            o2 = a2 + o2 - 1;\n            for (var s2 = 0; s2 < t3.length; ++s2) {\n              var u2 = t3.charCodeAt(s2);\n              if (55296 <= u2 && 57343 >= u2 && (u2 = 65536 + ((1023 & u2) << 10) | 1023 & t3.charCodeAt(++s2)), 127 >= u2) {\n                if (a2 >= o2)\n                  break;\n                e2[a2++] = u2;\n              } else {\n                if (2047 >= u2) {\n                  if (a2 + 1 >= o2)\n                    break;\n                  e2[a2++] = 192 | u2 >> 6;\n                } else {\n                  if (65535 >= u2) {\n                    if (a2 + 2 >= o2)\n                      break;\n                    e2[a2++] = 224 | u2 >> 12;\n                  } else {\n                    if (a2 + 3 >= o2)\n                      break;\n                    e2[a2++] = 240 | u2 >> 18, e2[a2++] = 128 | u2 >> 12 & 63;\n                  }\n                  e2[a2++] = 128 | u2 >> 6 & 63;\n                }\n                e2[a2++] = 128 | 63 & u2;\n              }\n            }\n            e2[a2] = 0;\n          }\n        } else if (a2)\n          for (a2 = 0; a2 < e2; ++a2)\n            255 < (s2 = t3.charCodeAt(a2)) && (nZ(o2), V(\"String has UTF-16 code units that do not fit in 8 bits\")), y[o2 + a2] = s2;\n        else\n          for (a2 = 0; a2 < e2; ++a2)\n            y[o2 + a2] = t3[a2];\n        return n3 !== null && n3.push(nZ, i2), i2;\n      }, argPackAdvance: 8, readValueFromPointer: nc, U: function(n3) {\n        nZ(n3);\n      } });\n    }, k: function(n2, t2, r2) {\n      if (r2 = B(r2), t2 === 2)\n        var e2 = nW, a2 = nU, i2 = nM, o2 = () => E, s2 = 1;\n      else\n        t2 === 4 && (e2 = nF, a2 = nD, i2 = nk, o2 = () => _, s2 = 2);\n      nv(n2, { name: r2, fromWireType: function(n3) {\n        for (var r3, a3 = _[n3 >> 2], i3 = o2(), u2 = n3 + 4, c3 = 0; c3 <= a3; ++c3) {\n          var f2 = n3 + 4 + c3 * t2;\n          (c3 == a3 || i3[f2 >> s2] == 0) && (u2 = e2(u2, f2 - u2), r3 === void 0 ? r3 = u2 : r3 += \"\\0\" + u2, u2 = f2 + t2);\n        }\n        return nZ(n3), r3;\n      }, toWireType: function(n3, e3) {\n        typeof e3 != \"string\" && V(\"Cannot pass non-string to C++ string type \" + r2);\n        var o3 = i2(e3), u2 = n$(4 + o3 + t2);\n        return _[u2 >> 2] = o3 >> s2, a2(e3, u2 + 4, o3 + t2), n3 !== null && n3.push(nZ, u2), u2;\n      }, argPackAdvance: 8, readValueFromPointer: nc, U: function(n3) {\n        nZ(n3);\n      } });\n    }, m: function(n2, t2, r2, e2, a2, i2) {\n      ns[n2] = { name: B(t2), ea: nb(r2, e2), V: nb(a2, i2), ha: [] };\n    }, c: function(n2, t2, r2, e2, a2, i2, o2, s2, u2, c3) {\n      ns[n2].ha.push({ na: B(t2), sa: r2, qa: nb(e2, a2), ra: i2, ya: o2, xa: nb(s2, u2), za: c3 });\n    }, C: function(n2, t2) {\n      nv(n2, { ua: true, name: t2 = B(t2), argPackAdvance: 0, fromWireType: function() {\n      }, toWireType: function() {\n      } });\n    }, t: function(n2, t2, r2, e2, a2) {\n      n2 = nG[n2], t2 = j(t2), r2 = nj(r2);\n      var i2 = [];\n      return _[e2 >> 2] = G2(i2), n2(t2, r2, i2, a2);\n    }, j: function(n2, t2, r2, e2) {\n      n2 = nG[n2], n2(t2 = j(t2), r2 = nj(r2), null, e2);\n    }, f: nR, g: function(n2, t2) {\n      var r2, e2, a2 = function(n3, t3) {\n        for (var r3 = Array(n3), e3 = 0; e3 < n3; ++e3)\n          r3[e3] = K(_[t3 + 4 * e3 >> 2], \"parameter \" + e3);\n        return r3;\n      }(n2, t2), i2 = a2[0], o2 = nY[t2 = i2.name + \"_$\" + a2.slice(1).map(function(n3) {\n        return n3.name;\n      }).join(\"_\") + \"$\"];\n      if (o2 !== void 0)\n        return o2;\n      var s2 = Array(n2 - 1);\n      return r2 = (t3, r3, e3, o3) => {\n        for (var u2 = 0, c3 = 0; c3 < n2 - 1; ++c3)\n          s2[c3] = a2[c3 + 1].readValueFromPointer(o3 + u2), u2 += a2[c3 + 1].argPackAdvance;\n        for (c3 = 0, t3 = t3[r3].apply(t3, s2); c3 < n2 - 1; ++c3)\n          a2[c3 + 1].la && a2[c3 + 1].la(s2[c3]);\n        if (!i2.ua)\n          return i2.toWireType(e3, t3);\n      }, e2 = nG.length, nG.push(r2), o2 = e2, nY[t2] = o2;\n    }, r: function(n2) {\n      4 < n2 && (M[n2].fa += 1);\n    }, s: function(n2) {\n      nu2(j(n2)), nR(n2);\n    }, i: function() {\n      w(\"\");\n    }, x: function(n2, t2, r2) {\n      y.copyWithin(n2, t2, t2 + r2);\n    }, w: function(n2) {\n      var t2 = y.length;\n      if (2147483648 < (n2 >>>= 0))\n        return false;\n      for (var r2 = 1; 4 >= r2; r2 *= 2) {\n        var e2 = t2 * (1 + 0.2 / r2);\n        e2 = Math.min(e2, n2 + 100663296);\n        var a2 = Math, i2 = a2.min;\n        e2 = Math.max(n2, e2), e2 += (65536 - e2 % 65536) % 65536;\n        n: {\n          var o2 = l.buffer;\n          try {\n            l.grow(i2.call(a2, 2147483648, e2) - o2.byteLength + 65535 >>> 16), v();\n            var s2 = 1;\n            break n;\n          } catch (n3) {\n          }\n          s2 = void 0;\n        }\n        if (s2)\n          return true;\n      }\n      return false;\n    }, z: function() {\n      return 52;\n    }, u: function() {\n      return 70;\n    }, y: function(n2, t2, r2, e2) {\n      for (var a2 = 0, i2 = 0; i2 < r2; i2++) {\n        var u2 = _[t2 >> 2], c3 = _[t2 + 4 >> 2];\n        t2 += 8;\n        for (var f2 = 0; f2 < c3; f2++) {\n          var l2 = y[u2 + f2], h2 = nX[n2];\n          l2 === 0 || l2 === 10 ? ((n2 === 1 ? o : s)(p(h2, 0)), h2.length = 0) : h2.push(l2);\n        }\n        a2 += c3;\n      }\n      return _[e2 >> 2] = a2, 0;\n    } };\n    !function() {\n      function n2(n3) {\n        u.asm = n3.exports, l = u.asm.D, v(), A = u.asm.I, P2.unshift(u.asm.E), --N == 0 && I && (n3 = I, I = null, n3());\n      }\n      function t2(t3) {\n        n2(t3.instance);\n      }\n      function e2(n3) {\n        return (typeof fetch == \"function\" ? fetch(r, { credentials: \"same-origin\" }).then(function(n4) {\n          if (!n4.ok)\n            throw \"failed to load wasm binary file at '\" + r + \"'\";\n          return n4.arrayBuffer();\n        }).catch(function() {\n          return R();\n        }) : Promise.resolve().then(function() {\n          return R();\n        })).then(function(n4) {\n          return WebAssembly.instantiate(n4, a2);\n        }).then(function(n4) {\n          return n4;\n        }).then(n3, function(n4) {\n          s(\"failed to asynchronously prepare wasm: \" + n4), w(n4);\n        });\n      }\n      var a2 = { a: nx };\n      if (N++, u.instantiateWasm)\n        try {\n          return u.instantiateWasm(a2, n2);\n        } catch (n3) {\n          s(\"Module.instantiateWasm callback failed with error: \" + n3), f(n3);\n        }\n      (typeof WebAssembly.instantiateStreaming != \"function\" || S() || typeof fetch != \"function\" ? e2(t2) : fetch(r, { credentials: \"same-origin\" }).then(function(n3) {\n        return WebAssembly.instantiateStreaming(n3, a2).then(t2, function(n4) {\n          return s(\"wasm streaming compile failed: \" + n4), s(\"falling back to ArrayBuffer instantiation\"), e2(t2);\n        });\n      })).catch(f);\n    }();\n    var nz = u.___getTypeName = function() {\n      return (nz = u.___getTypeName = u.asm.F).apply(null, arguments);\n    };\n    function n$() {\n      return (n$ = u.asm.H).apply(null, arguments);\n    }\n    function nZ() {\n      return (nZ = u.asm.J).apply(null, arguments);\n    }\n    function nJ() {\n      0 < N || (C(O), 0 < N || e || (e = true, u.calledRun = true, h || (C(P2), c2(u), C(b))));\n    }\n    return u.__embind_initialize_bindings = function() {\n      return (u.__embind_initialize_bindings = u.asm.G).apply(null, arguments);\n    }, u.dynCall_jiji = function() {\n      return (u.dynCall_jiji = u.asm.K).apply(null, arguments);\n    }, I = function n2() {\n      e || nJ(), e || (I = n2);\n    }, nJ(), t.ready;\n  };\n})();\nasync function initYoga(t) {\n  let r = await yoga({ instantiateWasm(n, r2) {\n    WebAssembly.instantiate(t, n).then((n2) => {\n      n2 instanceof WebAssembly.Instance ? r2(n2) : r2(n2.instance);\n    });\n  } });\n  return wrapAsm(r);\n}\n\n// node_modules/.pnpm/@resvg+resvg-wasm@2.4.1/node_modules/@resvg/resvg-wasm/index.mjs\nvar resvg_wasm_exports = {};\n__export(resvg_wasm_exports, {\n  Resvg: () => Resvg2,\n  initWasm: () => initWasm\n});\nvar wasm;\nvar heap = new Array(128).fill(void 0);\nheap.push(void 0, null, true, false);\nvar heap_next = heap.length;\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length)\n    heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\nfunction getObject(idx) {\n  return heap[idx];\n}\nfunction dropObject(idx) {\n  if (idx < 132)\n    return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\nvar WASM_VECTOR_LEN = 0;\nvar cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n  return cachedUint8Memory0;\n}\nvar cachedTextEncoder = new TextEncoder(\"utf-8\");\nvar encodeString = typeof cachedTextEncoder.encodeInto === \"function\" ? function(arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function(arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === void 0) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr2 = malloc(buf.length);\n    getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr2;\n  }\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 127)\n      break;\n    mem[ptr + offset] = code;\n  }\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\nfunction isLikeNone(x) {\n  return x === void 0 || x === null;\n}\nvar cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n  return cachedInt32Memory0;\n}\nvar cachedTextDecoder = new TextDecoder(\"utf-8\", { ignoreBOM: true, fatal: true });\ncachedTextDecoder.decode();\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction _assertClass(instance, klass) {\n  if (!(instance instanceof klass)) {\n    throw new Error(`expected instance of ${klass.name}`);\n  }\n  return instance.ptr;\n}\nvar BBox = class {\n  static __wrap(ptr) {\n    const obj = Object.create(BBox.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_bbox_free(ptr);\n  }\n  get x() {\n    const ret = wasm.__wbg_get_bbox_x(this.ptr);\n    return ret;\n  }\n  set x(arg0) {\n    wasm.__wbg_set_bbox_x(this.ptr, arg0);\n  }\n  get y() {\n    const ret = wasm.__wbg_get_bbox_y(this.ptr);\n    return ret;\n  }\n  set y(arg0) {\n    wasm.__wbg_set_bbox_y(this.ptr, arg0);\n  }\n  get width() {\n    const ret = wasm.__wbg_get_bbox_width(this.ptr);\n    return ret;\n  }\n  set width(arg0) {\n    wasm.__wbg_set_bbox_width(this.ptr, arg0);\n  }\n  get height() {\n    const ret = wasm.__wbg_get_bbox_height(this.ptr);\n    return ret;\n  }\n  set height(arg0) {\n    wasm.__wbg_set_bbox_height(this.ptr, arg0);\n  }\n};\nvar RenderedImage = class {\n  static __wrap(ptr) {\n    const obj = Object.create(RenderedImage.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_renderedimage_free(ptr);\n  }\n  get width() {\n    const ret = wasm.renderedimage_width(this.ptr);\n    return ret >>> 0;\n  }\n  get height() {\n    const ret = wasm.renderedimage_height(this.ptr);\n    return ret >>> 0;\n  }\n  asPng() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.renderedimage_asPng(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  get pixels() {\n    const ret = wasm.renderedimage_pixels(this.ptr);\n    return takeObject(ret);\n  }\n};\nvar Resvg = class {\n  static __wrap(ptr) {\n    const obj = Object.create(Resvg.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n  __destroy_into_raw() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n    return ptr;\n  }\n  free() {\n    const ptr = this.__destroy_into_raw();\n    wasm.__wbg_resvg_free(ptr);\n  }\n  constructor(svg, options) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      var ptr0 = isLikeNone(options) ? 0 : passStringToWasm0(options, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.resvg_new(retptr, addHeapObject(svg), ptr0, len0);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return Resvg.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  get width() {\n    const ret = wasm.resvg_width(this.ptr);\n    return ret;\n  }\n  get height() {\n    const ret = wasm.resvg_height(this.ptr);\n    return ret;\n  }\n  render() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resvg_render(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return RenderedImage.__wrap(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  toString() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resvg_toString(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      return getStringFromWasm0(r0, r1);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n      wasm.__wbindgen_free(r0, r1);\n    }\n  }\n  innerBBox() {\n    const ret = wasm.resvg_innerBBox(this.ptr);\n    return ret === 0 ? void 0 : BBox.__wrap(ret);\n  }\n  getBBox() {\n    const ret = wasm.resvg_getBBox(this.ptr);\n    return ret === 0 ? void 0 : BBox.__wrap(ret);\n  }\n  cropByBBox(bbox) {\n    _assertClass(bbox, BBox);\n    wasm.resvg_cropByBBox(this.ptr, bbox.ptr);\n  }\n  imagesToResolve() {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      wasm.resvg_imagesToResolve(retptr, this.ptr);\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      var r2 = getInt32Memory0()[retptr / 4 + 2];\n      if (r2) {\n        throw takeObject(r1);\n      }\n      return takeObject(r0);\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n  resolveImage(href, buffer) {\n    try {\n      const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n      const ptr0 = passStringToWasm0(href, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      const len0 = WASM_VECTOR_LEN;\n      wasm.resvg_resolveImage(retptr, this.ptr, ptr0, len0, addHeapObject(buffer));\n      var r0 = getInt32Memory0()[retptr / 4 + 0];\n      var r1 = getInt32Memory0()[retptr / 4 + 1];\n      if (r1) {\n        throw takeObject(r0);\n      }\n    } finally {\n      wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n  }\n};\nasync function load2(module, imports) {\n  if (typeof Response === \"function\" && module instanceof Response) {\n    if (typeof WebAssembly.instantiateStreaming === \"function\") {\n      try {\n        return await WebAssembly.instantiateStreaming(module, imports);\n      } catch (e) {\n        if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n          console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n        } else {\n          throw e;\n        }\n      }\n    }\n    const bytes = await module.arrayBuffer();\n    return await WebAssembly.instantiate(bytes, imports);\n  } else {\n    const instance = await WebAssembly.instantiate(module, imports);\n    if (instance instanceof WebAssembly.Instance) {\n      return { instance, module };\n    } else {\n      return instance;\n    }\n  }\n}\nfunction getImports() {\n  const imports = {};\n  imports.wbg = {};\n  imports.wbg.__wbg_new_15d3966e9981a196 = function(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbindgen_memory = function() {\n    const ret = wasm.memory;\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5 = function(arg0, arg1, arg2) {\n    const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n  };\n  imports.wbg.__wbg_new_537b7341ce90bb31 = function(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbg_instanceof_Uint8Array_01cebe79ca606cca = function(arg0) {\n    let result;\n    try {\n      result = getObject(arg0) instanceof Uint8Array;\n    } catch (e) {\n      result = false;\n    }\n    const ret = result;\n    return ret;\n  };\n  imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof obj === \"string\" ? obj : void 0;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n  };\n  imports.wbg.__wbg_new_b525de17f44a8943 = function() {\n    const ret = new Array();\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n  };\n  imports.wbg.__wbg_push_49c286f04dd3bf59 = function(arg0, arg1) {\n    const ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n  };\n  imports.wbg.__wbg_length_27a2afe8ab42b09f = function(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n  };\n  imports.wbg.__wbg_set_17499e8aa4003ebd = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n  };\n  imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n  };\n  return imports;\n}\nfunction initMemory(imports, maybe_memory) {\n}\nfunction finalizeInit(instance, module) {\n  wasm = instance.exports;\n  init.__wbindgen_wasm_module = module;\n  cachedInt32Memory0 = null;\n  cachedUint8Memory0 = null;\n  return wasm;\n}\nasync function init(input) {\n  if (typeof input === \"undefined\") {\n    input = new URL(\"index_bg.wasm\", void 0);\n  }\n  const imports = getImports();\n  if (typeof input === \"string\" || typeof Request === \"function\" && input instanceof Request || typeof URL === \"function\" && input instanceof URL) {\n    input = fetch(input);\n  }\n  initMemory(imports);\n  const { instance, module } = await load2(await input, imports);\n  return finalizeInit(instance, module);\n}\nvar dist_default = init;\nvar initialized = false;\nvar initWasm = async (module_or_path) => {\n  if (initialized) {\n    throw new Error(\"Already initialized. The `initWasm()` function can be used only once.\");\n  }\n  await dist_default(await module_or_path);\n  initialized = true;\n};\nvar Resvg2 = class extends Resvg {\n  constructor(svg, options) {\n    if (!initialized)\n      throw new Error(\"Wasm has not been initialized. Call `initWasm()` function.\");\n    super(svg, JSON.stringify(options));\n  }\n};\n\n// src/index.node.ts\n\n\n\n\n\n// src/emoji/index.ts\nvar U200D = String.fromCharCode(8205);\nvar UFE0Fg = /\\uFE0F/g;\nfunction getIconCode(char) {\n  return toCodePoint(char.indexOf(U200D) < 0 ? char.replace(UFE0Fg, \"\") : char);\n}\nfunction toCodePoint(unicodeSurrogates) {\n  var r = [], c2 = 0, p = 0, i = 0;\n  while (i < unicodeSurrogates.length) {\n    c2 = unicodeSurrogates.charCodeAt(i++);\n    if (p) {\n      r.push((65536 + (p - 55296 << 10) + (c2 - 56320)).toString(16));\n      p = 0;\n    } else if (55296 <= c2 && c2 <= 56319) {\n      p = c2;\n    } else {\n      r.push(c2.toString(16));\n    }\n  }\n  return r.join(\"-\");\n}\nvar apis = {\n  twemoji: (code) => \"https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/svg/\" + code.toLowerCase() + \".svg\",\n  openmoji: \"https://cdn.jsdelivr.net/npm/@svgmoji/openmoji@2.0.0/svg/\",\n  blobmoji: \"https://cdn.jsdelivr.net/npm/@svgmoji/blob@2.0.0/svg/\",\n  noto: \"https://cdn.jsdelivr.net/gh/svgmoji/svgmoji/packages/svgmoji__noto/svg/\",\n  fluent: (code) => \"https://cdn.jsdelivr.net/gh/shuding/fluentui-emoji-unicode/assets/\" + code.toLowerCase() + \"_color.svg\",\n  fluentFlat: (code) => \"https://cdn.jsdelivr.net/gh/shuding/fluentui-emoji-unicode/assets/\" + code.toLowerCase() + \"_flat.svg\"\n};\nfunction loadEmoji(code, type) {\n  if (!type || !apis[type]) {\n    type = \"twemoji\";\n  }\n  const api = apis[type];\n  if (typeof api === \"function\") {\n    return fetch(api(code));\n  }\n  return fetch(`${api}${code.toUpperCase()}.svg`);\n}\n\n// src/og.ts\nvar languageFontMap = {\n  \"ja-JP\": \"Noto+Sans+JP\",\n  \"ko-KR\": \"Noto+Sans+KR\",\n  \"zh-CN\": \"Noto+Sans+SC\",\n  \"zh-TW\": \"Noto+Sans+TC\",\n  \"zh-HK\": \"Noto+Sans+HK\",\n  \"th-TH\": \"Noto+Sans+Thai\",\n  \"bn-IN\": \"Noto+Sans+Bengali\",\n  \"ar-AR\": \"Noto+Sans+Arabic\",\n  \"ta-IN\": \"Noto+Sans+Tamil\",\n  \"ml-IN\": \"Noto+Sans+Malayalam\",\n  \"he-IL\": \"Noto+Sans+Hebrew\",\n  \"te-IN\": \"Noto+Sans+Telugu\",\n  devanagari: \"Noto+Sans+Devanagari\",\n  kannada: \"Noto+Sans+Kannada\",\n  symbol: [\"Noto+Sans+Symbols\", \"Noto+Sans+Symbols+2\"],\n  math: \"Noto+Sans+Math\",\n  unknown: \"Noto+Sans\"\n};\nasync function loadGoogleFont(font, text) {\n  if (!font || !text)\n    return;\n  const API = `https://fonts.googleapis.com/css2?family=${font}&text=${encodeURIComponent(text)}`;\n  const css = await (await fetch(API, {\n    headers: {\n      \"User-Agent\": \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; de-at) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1\"\n    }\n  })).text();\n  const resource = css.match(/src: url\\((.+)\\) format\\('(opentype|truetype)'\\)/);\n  if (!resource)\n    throw new Error(\"Failed to load font\");\n  return fetch(resource[1]).then((res) => res.arrayBuffer());\n}\nvar assetCache = /* @__PURE__ */ new Map();\nvar loadDynamicAsset = ({ emoji }) => {\n  const fn = async (code, text) => {\n    if (code === \"emoji\") {\n      return `data:image/svg+xml;base64,` + btoa(await (await loadEmoji(getIconCode(text), emoji)).text());\n    }\n    if (!languageFontMap[code])\n      code = \"unknown\";\n    try {\n      const data = await loadGoogleFont(languageFontMap[code], text);\n      if (data) {\n        return {\n          name: `satori_${code}_fallback_${text}`,\n          data,\n          weight: 400,\n          style: \"normal\"\n        };\n      }\n    } catch (e) {\n      console.error(\"Failed to load dynamic font for\", text, \". Error:\", e);\n    }\n  };\n  return async (...args) => {\n    const key = JSON.stringify(args);\n    const cache = assetCache.get(key);\n    if (cache)\n      return cache;\n    const asset = await fn(...args);\n    assetCache.set(key, asset);\n    return asset;\n  };\n};\nasync function render(satori2, resvg, opts, defaultFonts, element) {\n  const options = Object.assign({\n    width: 1200,\n    height: 630,\n    debug: false\n  }, opts);\n  const svg = await satori2(element, {\n    width: options.width,\n    height: options.height,\n    debug: options.debug,\n    fonts: options.fonts || defaultFonts,\n    loadAdditionalAsset: loadDynamicAsset({\n      emoji: options.emoji\n    })\n  });\n  const resvgJS = new resvg.Resvg(svg, {\n    fitTo: {\n      mode: \"width\",\n      value: options.width\n    }\n  });\n  return resvgJS.render().asPng();\n}\n\n// src/index.node.ts\nvar satori = Cl.default || Cl;\nvar fontData = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync((0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)((0,path__WEBPACK_IMPORTED_MODULE_3__.join)(\"file:///Users/kimheejin/Documents/mymovester-projects/mymovester-client-product/node_modules/next/dist/compiled/@vercel/og/index.node.js\", \"../noto-sans-v27-latin-regular.ttf\")));\nvar yoga_wasm = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync((0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)((0,path__WEBPACK_IMPORTED_MODULE_3__.join)(\"file:///Users/kimheejin/Documents/mymovester-projects/mymovester-client-product/node_modules/next/dist/compiled/@vercel/og/index.node.js\", \"../yoga.wasm\")));\nvar resvg_wasm = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync((0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)((0,path__WEBPACK_IMPORTED_MODULE_3__.join)(\"file:///Users/kimheejin/Documents/mymovester-projects/mymovester-client-product/node_modules/next/dist/compiled/@vercel/og/index.node.js\", \"../resvg.wasm\")));\nvar initializedResvg = initWasm(resvg_wasm);\nvar initializedYoga = initYoga(yoga_wasm).then((yoga2) => Ll(yoga2));\nvar ImageResponse = class {\n  constructor(element, options = {}) {\n    if (typeof Response === \"undefined\" || typeof ReadableStream === \"undefined\") {\n      throw new Error(\"The `ImageResponse` API is not supported in this runtime, use the `unstable_createNodejsStream` API instead or switch to the Vercel Edge Runtime.\");\n    }\n    const result = new ReadableStream({\n      async start(controller) {\n        await initializedYoga;\n        await initializedResvg;\n        const fonts = [\n          {\n            name: \"sans serif\",\n            data: fontData,\n            weight: 700,\n            style: \"normal\"\n          }\n        ];\n        const result2 = await render(satori, resvg_wasm_exports, options, fonts, element);\n        controller.enqueue(result2);\n        controller.close();\n      }\n    });\n    return new Response(result, {\n      headers: {\n        \"content-type\": \"image/png\",\n        \"cache-control\":  true ? \"no-cache, no-store\" : 0,\n        ...options.headers\n      },\n      status: options.status,\n      statusText: options.statusText\n    });\n  }\n};\nasync function unstable_createNodejsStream(element, options = {}) {\n  await initializedYoga;\n  await initializedResvg;\n  const fonts = [\n    {\n      name: \"sans serif\",\n      data: fontData,\n      weight: 700,\n      style: \"normal\"\n    }\n  ];\n  const result = await render(satori, resvg_wasm_exports, options, fonts, element);\n  return stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(Buffer.from(result));\n}\n\n/*!\n * escape-html\n * Copyright(c) 2012-2013 TJ Holowaychuk\n * Copyright(c) 2015 Andreas Lubbe\n * Copyright(c) 2015 Tiancheng \"Timothy\" Gu\n * MIT Licensed\n */\n/*!\n * https://github.com/gilmoreorless/css-background-parser\n * Copyright © 2015 Gilmore Davidson under the MIT license: http://gilmoreorless.mit-license.org/\n */\n/*! Copyright Twitter Inc. and other contributors. Licensed under MIT */\n/**\n * parse-css-color\n * @version v0.2.1\n * @link http://github.com/noeldelgado/parse-css-color/\n * @license MIT\n */\n//# sourceMappingURL=index.node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/@vercel/og/index.node.js\n"));

/***/ })

}]);